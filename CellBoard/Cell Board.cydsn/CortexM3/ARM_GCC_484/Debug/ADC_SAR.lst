ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ADC_SAR.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	ADC_SAR_initVar
  19              		.bss
  20              		.type	ADC_SAR_initVar, %object
  21              		.size	ADC_SAR_initVar, 1
  22              	ADC_SAR_initVar:
  23 0000 00       		.space	1
  24              		.comm	ADC_SAR_offset,2,2
  25              		.comm	ADC_SAR_countsPerVolt,2,2
  26              		.comm	ADC_SAR_countsPer10Volt,4,4
  27              		.comm	ADC_SAR_shift,2,2
  28              		.section	.text.ADC_SAR_Start,"ax",%progbits
  29              		.align	2
  30              		.global	ADC_SAR_Start
  31              		.thumb
  32              		.thumb_func
  33              		.type	ADC_SAR_Start, %function
  34              	ADC_SAR_Start:
  35              	.LFB0:
  36              		.file 1 ".\\Generated_Source\\PSoC5\\ADC_SAR.c"
   1:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/ADC_SAR.c **** * File Name: ADC_SAR.c
   3:.\Generated_Source\PSoC5/ADC_SAR.c **** * Version 2.10
   4:.\Generated_Source\PSoC5/ADC_SAR.c **** *
   5:.\Generated_Source\PSoC5/ADC_SAR.c **** * Description:
   6:.\Generated_Source\PSoC5/ADC_SAR.c **** *  This file provides the source code to the API for the Successive
   7:.\Generated_Source\PSoC5/ADC_SAR.c **** *  approximation ADC Component.
   8:.\Generated_Source\PSoC5/ADC_SAR.c **** *
   9:.\Generated_Source\PSoC5/ADC_SAR.c **** * Note:
  10:.\Generated_Source\PSoC5/ADC_SAR.c **** *
  11:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
  12:.\Generated_Source\PSoC5/ADC_SAR.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC5/ADC_SAR.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC5/ADC_SAR.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC5/ADC_SAR.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC5/ADC_SAR.c **** 
  18:.\Generated_Source\PSoC5/ADC_SAR.c **** #include "CyLib.h"
  19:.\Generated_Source\PSoC5/ADC_SAR.c **** #include "ADC_SAR.h"
  20:.\Generated_Source\PSoC5/ADC_SAR.c **** 
  21:.\Generated_Source\PSoC5/ADC_SAR.c **** #if(ADC_SAR_DEFAULT_INTERNAL_CLK)
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 2


  22:.\Generated_Source\PSoC5/ADC_SAR.c ****     #include "ADC_SAR_theACLK.h"
  23:.\Generated_Source\PSoC5/ADC_SAR.c **** #endif /* End ADC_SAR_DEFAULT_INTERNAL_CLK */
  24:.\Generated_Source\PSoC5/ADC_SAR.c **** 
  25:.\Generated_Source\PSoC5/ADC_SAR.c **** 
  26:.\Generated_Source\PSoC5/ADC_SAR.c **** /***************************************
  27:.\Generated_Source\PSoC5/ADC_SAR.c **** * Forward function references
  28:.\Generated_Source\PSoC5/ADC_SAR.c **** ***************************************/
  29:.\Generated_Source\PSoC5/ADC_SAR.c **** static void ADC_SAR_CalcGain(uint8 resolution);
  30:.\Generated_Source\PSoC5/ADC_SAR.c **** 
  31:.\Generated_Source\PSoC5/ADC_SAR.c **** 
  32:.\Generated_Source\PSoC5/ADC_SAR.c **** /***************************************
  33:.\Generated_Source\PSoC5/ADC_SAR.c **** * Global data allocation
  34:.\Generated_Source\PSoC5/ADC_SAR.c **** ***************************************/
  35:.\Generated_Source\PSoC5/ADC_SAR.c **** uint8 ADC_SAR_initVar = 0u;
  36:.\Generated_Source\PSoC5/ADC_SAR.c **** volatile int16 ADC_SAR_offset;
  37:.\Generated_Source\PSoC5/ADC_SAR.c **** volatile int16 ADC_SAR_countsPerVolt;     /* Obsolete Gain compensation */
  38:.\Generated_Source\PSoC5/ADC_SAR.c **** volatile int32 ADC_SAR_countsPer10Volt;   /* Gain compensation */
  39:.\Generated_Source\PSoC5/ADC_SAR.c **** volatile int16 ADC_SAR_shift;
  40:.\Generated_Source\PSoC5/ADC_SAR.c **** 
  41:.\Generated_Source\PSoC5/ADC_SAR.c **** 
  42:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
  43:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_Start
  44:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
  45:.\Generated_Source\PSoC5/ADC_SAR.c **** *
  46:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
  47:.\Generated_Source\PSoC5/ADC_SAR.c **** *  This is the preferred method to begin component operation.
  48:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_Start() sets the initVar variable, calls the
  49:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_Init() function, and then calls the
  50:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_Enable() function.
  51:.\Generated_Source\PSoC5/ADC_SAR.c **** *
  52:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
  53:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
  54:.\Generated_Source\PSoC5/ADC_SAR.c **** *
  55:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
  56:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
  57:.\Generated_Source\PSoC5/ADC_SAR.c **** *
  58:.\Generated_Source\PSoC5/ADC_SAR.c **** * Global variables:
  59:.\Generated_Source\PSoC5/ADC_SAR.c **** *  The ADC_SAR_initVar variable is used to indicate when/if initial
  60:.\Generated_Source\PSoC5/ADC_SAR.c **** *  configuration of this component has happened. The variable is initialized to
  61:.\Generated_Source\PSoC5/ADC_SAR.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  62:.\Generated_Source\PSoC5/ADC_SAR.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  63:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_Start() routine.
  64:.\Generated_Source\PSoC5/ADC_SAR.c **** *  If re-initialization of the component is required the variable should be set
  65:.\Generated_Source\PSoC5/ADC_SAR.c **** *  to zero before call of ADC_SAR_Start() routine, or the user may call
  66:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_Init() and ADC_SAR_Enable() as done in the
  67:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_Start() routine.
  68:.\Generated_Source\PSoC5/ADC_SAR.c **** *
  69:.\Generated_Source\PSoC5/ADC_SAR.c **** * Side Effect:
  70:.\Generated_Source\PSoC5/ADC_SAR.c **** *  If the initVar variable is already set, this function only calls the
  71:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_Enable() function.
  72:.\Generated_Source\PSoC5/ADC_SAR.c **** *
  73:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
  74:.\Generated_Source\PSoC5/ADC_SAR.c **** void ADC_SAR_Start(void)
  75:.\Generated_Source\PSoC5/ADC_SAR.c **** {
  37              		.loc 1 75 0
  38              		.cfi_startproc
  39              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 3


  40              		@ frame_needed = 1, uses_anonymous_args = 0
  41 0000 80B5     		push	{r7, lr}
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 7, -8
  44              		.cfi_offset 14, -4
  45 0002 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
  76:.\Generated_Source\PSoC5/ADC_SAR.c **** 
  77:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* If not Initialized then initialize all required hardware and software */
  78:.\Generated_Source\PSoC5/ADC_SAR.c ****     if(ADC_SAR_initVar == 0u)
  47              		.loc 1 78 0
  48 0004 054B     		ldr	r3, .L3
  49 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  50 0008 002B     		cmp	r3, #0
  51 000a 04D1     		bne	.L2
  79:.\Generated_Source\PSoC5/ADC_SAR.c ****     {
  80:.\Generated_Source\PSoC5/ADC_SAR.c ****         ADC_SAR_Init();
  52              		.loc 1 80 0
  53 000c FFF7FEFF 		bl	ADC_SAR_Init
  81:.\Generated_Source\PSoC5/ADC_SAR.c ****         ADC_SAR_initVar = 1u;
  54              		.loc 1 81 0
  55 0010 024B     		ldr	r3, .L3
  56 0012 0122     		movs	r2, #1
  57 0014 1A70     		strb	r2, [r3]
  58              	.L2:
  82:.\Generated_Source\PSoC5/ADC_SAR.c ****     }
  83:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_Enable();
  59              		.loc 1 83 0
  60 0016 FFF7FEFF 		bl	ADC_SAR_Enable
  84:.\Generated_Source\PSoC5/ADC_SAR.c **** }
  61              		.loc 1 84 0
  62 001a 80BD     		pop	{r7, pc}
  63              	.L4:
  64              		.align	2
  65              	.L3:
  66 001c 00000000 		.word	ADC_SAR_initVar
  67              		.cfi_endproc
  68              	.LFE0:
  69              		.size	ADC_SAR_Start, .-ADC_SAR_Start
  70              		.section	.text.ADC_SAR_Init,"ax",%progbits
  71              		.align	2
  72              		.global	ADC_SAR_Init
  73              		.thumb
  74              		.thumb_func
  75              		.type	ADC_SAR_Init, %function
  76              	ADC_SAR_Init:
  77              	.LFB1:
  85:.\Generated_Source\PSoC5/ADC_SAR.c **** 
  86:.\Generated_Source\PSoC5/ADC_SAR.c **** 
  87:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
  88:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_Init
  89:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
  90:.\Generated_Source\PSoC5/ADC_SAR.c **** *
  91:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
  92:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Initialize component's parameters to the parameters set by user in the
  93:.\Generated_Source\PSoC5/ADC_SAR.c **** *  customizer of the component placed onto schematic. Usually called in
  94:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_Start().
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 4


  95:.\Generated_Source\PSoC5/ADC_SAR.c **** *
  96:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
  97:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
  98:.\Generated_Source\PSoC5/ADC_SAR.c **** *
  99:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
 100:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
 101:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 102:.\Generated_Source\PSoC5/ADC_SAR.c **** * Global variables:
 103:.\Generated_Source\PSoC5/ADC_SAR.c **** *  The ADC_SAR_offset variable is initialized to 0.
 104:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 105:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
 106:.\Generated_Source\PSoC5/ADC_SAR.c **** void ADC_SAR_Init(void)
 107:.\Generated_Source\PSoC5/ADC_SAR.c **** {
  78              		.loc 1 107 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 1, uses_anonymous_args = 0
  82 0000 80B5     		push	{r7, lr}
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 7, -8
  85              		.cfi_offset 14, -4
  86 0002 00AF     		add	r7, sp, #0
  87              		.cfi_def_cfa_register 7
 108:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 109:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* This is only valid if there is an internal clock */
 110:.\Generated_Source\PSoC5/ADC_SAR.c ****     #if(ADC_SAR_DEFAULT_INTERNAL_CLK)
 111:.\Generated_Source\PSoC5/ADC_SAR.c ****         ADC_SAR_theACLK_SetMode(CYCLK_DUTY);
  88              		.loc 1 111 0
  89 0004 1020     		movs	r0, #16
  90 0006 FFF7FEFF 		bl	ADC_SAR_theACLK_SetModeRegister
 112:.\Generated_Source\PSoC5/ADC_SAR.c ****     #endif /* End ADC_SAR_DEFAULT_INTERNAL_CLK */
 113:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 114:.\Generated_Source\PSoC5/ADC_SAR.c ****     #if(ADC_SAR_IRQ_REMOVE == 0u)
 115:.\Generated_Source\PSoC5/ADC_SAR.c ****         /* Start and set interrupt vector */
 116:.\Generated_Source\PSoC5/ADC_SAR.c ****         CyIntSetPriority(ADC_SAR_INTC_NUMBER, ADC_SAR_INTC_PRIOR_NUMBER);
  91              		.loc 1 116 0
  92 000a 0120     		movs	r0, #1
  93 000c 0721     		movs	r1, #7
  94 000e FFF7FEFF 		bl	CyIntSetPriority
 117:.\Generated_Source\PSoC5/ADC_SAR.c ****         (void)CyIntSetVector(ADC_SAR_INTC_NUMBER, &ADC_SAR_ISR);
  95              		.loc 1 117 0
  96 0012 0120     		movs	r0, #1
  97 0014 0849     		ldr	r1, .L6
  98 0016 FFF7FEFF 		bl	CyIntSetVector
 118:.\Generated_Source\PSoC5/ADC_SAR.c ****     #endif   /* End ADC_SAR_IRQ_REMOVE */
 119:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 120:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Enable IRQ mode*/
 121:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_SAR_CSR1_REG |= ADC_SAR_SAR_IRQ_MASK_EN | ADC_SAR_SAR_IRQ_MODE_EDGE;
  99              		.loc 1 121 0
 100 001a 084B     		ldr	r3, .L6+4
 101 001c 074A     		ldr	r2, .L6+4
 102 001e 1278     		ldrb	r2, [r2]
 103 0020 D2B2     		uxtb	r2, r2
 104 0022 42F00602 		orr	r2, r2, #6
 105 0026 D2B2     		uxtb	r2, r2
 106 0028 1A70     		strb	r2, [r3]
 122:.\Generated_Source\PSoC5/ADC_SAR.c **** 
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 5


 123:.\Generated_Source\PSoC5/ADC_SAR.c ****     /*Set SAR ADC resolution ADC */
 124:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_SetResolution(ADC_SAR_DEFAULT_RESOLUTION);
 107              		.loc 1 124 0
 108 002a 0C20     		movs	r0, #12
 109 002c FFF7FEFF 		bl	ADC_SAR_SetResolution
 125:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_offset = 0;
 110              		.loc 1 125 0
 111 0030 034B     		ldr	r3, .L6+8
 112 0032 0022     		movs	r2, #0
 113 0034 1A80     		strh	r2, [r3]	@ movhi
 126:.\Generated_Source\PSoC5/ADC_SAR.c **** }
 114              		.loc 1 126 0
 115 0036 80BD     		pop	{r7, pc}
 116              	.L7:
 117              		.align	2
 118              	.L6:
 119 0038 00000000 		.word	ADC_SAR_ISR
 120 003c 09590040 		.word	1073764617
 121 0040 00000000 		.word	ADC_SAR_offset
 122              		.cfi_endproc
 123              	.LFE1:
 124              		.size	ADC_SAR_Init, .-ADC_SAR_Init
 125              		.section	.text.ADC_SAR_Enable,"ax",%progbits
 126              		.align	2
 127              		.global	ADC_SAR_Enable
 128              		.thumb
 129              		.thumb_func
 130              		.type	ADC_SAR_Enable, %function
 131              	ADC_SAR_Enable:
 132              	.LFB2:
 127:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 128:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 129:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
 130:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_Enable
 131:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
 132:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 133:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
 134:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Enables the reference, clock and power for SAR ADC.
 135:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 136:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
 137:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
 138:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 139:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
 140:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
 141:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 142:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
 143:.\Generated_Source\PSoC5/ADC_SAR.c **** void ADC_SAR_Enable(void)
 144:.\Generated_Source\PSoC5/ADC_SAR.c **** {
 133              		.loc 1 144 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 8
 136              		@ frame_needed = 1, uses_anonymous_args = 0
 137 0000 80B5     		push	{r7, lr}
 138              		.cfi_def_cfa_offset 8
 139              		.cfi_offset 7, -8
 140              		.cfi_offset 14, -4
 141 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 6


 142              		.cfi_def_cfa_offset 16
 143 0004 00AF     		add	r7, sp, #0
 144              		.cfi_def_cfa_register 7
 145:.\Generated_Source\PSoC5/ADC_SAR.c ****     uint8 tmpReg;
 146:.\Generated_Source\PSoC5/ADC_SAR.c ****     uint8 enableInterrupts;
 147:.\Generated_Source\PSoC5/ADC_SAR.c ****     enableInterrupts = CyEnterCriticalSection();
 145              		.loc 1 147 0
 146 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 147 000a 0346     		mov	r3, r0
 148 000c FB71     		strb	r3, [r7, #7]
 148:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 149:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Enable the SAR ADC block in Active Power Mode */
 150:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_PWRMGR_SAR_REG |= ADC_SAR_ACT_PWR_SAR_EN;
 149              		.loc 1 150 0
 150 000e 2E4B     		ldr	r3, .L9
 151 0010 2D4A     		ldr	r2, .L9
 152 0012 1278     		ldrb	r2, [r2]
 153 0014 D2B2     		uxtb	r2, r2
 154 0016 42F00202 		orr	r2, r2, #2
 155 001a D2B2     		uxtb	r2, r2
 156 001c 1A70     		strb	r2, [r3]
 151:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 152:.\Generated_Source\PSoC5/ADC_SAR.c ****      /* Enable the SAR ADC in Standby Power Mode*/
 153:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_STBY_PWRMGR_SAR_REG |= ADC_SAR_STBY_PWR_SAR_EN;
 157              		.loc 1 153 0
 158 001e 2B4B     		ldr	r3, .L9+4
 159 0020 2A4A     		ldr	r2, .L9+4
 160 0022 1278     		ldrb	r2, [r2]
 161 0024 D2B2     		uxtb	r2, r2
 162 0026 42F00202 		orr	r2, r2, #2
 163 002a D2B2     		uxtb	r2, r2
 164 002c 1A70     		strb	r2, [r3]
 154:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 155:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* This is only valid if there is an internal clock */
 156:.\Generated_Source\PSoC5/ADC_SAR.c ****     #if(ADC_SAR_DEFAULT_INTERNAL_CLK)
 157:.\Generated_Source\PSoC5/ADC_SAR.c ****         ADC_SAR_PWRMGR_CLK_REG |= ADC_SAR_ACT_PWR_CLK_EN;
 165              		.loc 1 157 0
 166 002e 284B     		ldr	r3, .L9+8
 167 0030 274A     		ldr	r2, .L9+8
 168 0032 1278     		ldrb	r2, [r2]
 169 0034 D2B2     		uxtb	r2, r2
 170 0036 42F00102 		orr	r2, r2, #1
 171 003a D2B2     		uxtb	r2, r2
 172 003c 1A70     		strb	r2, [r3]
 158:.\Generated_Source\PSoC5/ADC_SAR.c ****         ADC_SAR_STBY_PWRMGR_CLK_REG |= ADC_SAR_STBY_PWR_CLK_EN;
 173              		.loc 1 158 0
 174 003e 254B     		ldr	r3, .L9+12
 175 0040 244A     		ldr	r2, .L9+12
 176 0042 1278     		ldrb	r2, [r2]
 177 0044 D2B2     		uxtb	r2, r2
 178 0046 42F00102 		orr	r2, r2, #1
 179 004a D2B2     		uxtb	r2, r2
 180 004c 1A70     		strb	r2, [r3]
 159:.\Generated_Source\PSoC5/ADC_SAR.c ****     #endif /* End ADC_SAR_DEFAULT_INTERNAL_CLK */
 160:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 161:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Enable VCM buffer and Enable Int Ref Amp */
 162:.\Generated_Source\PSoC5/ADC_SAR.c ****     tmpReg = ADC_SAR_SAR_CSR3_REG;
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 7


 181              		.loc 1 162 0
 182 004e 224B     		ldr	r3, .L9+16
 183 0050 1B78     		ldrb	r3, [r3]
 184 0052 BB71     		strb	r3, [r7, #6]
 163:.\Generated_Source\PSoC5/ADC_SAR.c ****     tmpReg |= ADC_SAR_SAR_EN_BUF_VCM_EN;
 185              		.loc 1 163 0
 186 0054 BB79     		ldrb	r3, [r7, #6]
 187 0056 43F00203 		orr	r3, r3, #2
 188 005a BB71     		strb	r3, [r7, #6]
 164:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* PD_BUF_VREF is OFF in External reference or Vdda reference mode */
 165:.\Generated_Source\PSoC5/ADC_SAR.c ****     #if((ADC_SAR_DEFAULT_REFERENCE == ADC_SAR__EXT_REF) || \
 166:.\Generated_Source\PSoC5/ADC_SAR.c ****         (ADC_SAR_DEFAULT_RANGE == ADC_SAR__VNEG_VDDA_DIFF))
 167:.\Generated_Source\PSoC5/ADC_SAR.c ****         tmpReg &= (uint8)~ADC_SAR_SAR_EN_BUF_VREF_EN;
 168:.\Generated_Source\PSoC5/ADC_SAR.c ****     #else /* In INTREF or INTREF Bypassed this buffer is ON */
 169:.\Generated_Source\PSoC5/ADC_SAR.c ****         tmpReg |= ADC_SAR_SAR_EN_BUF_VREF_EN;
 189              		.loc 1 169 0
 190 005c BB79     		ldrb	r3, [r7, #6]
 191 005e 43F00103 		orr	r3, r3, #1
 192 0062 BB71     		strb	r3, [r7, #6]
 170:.\Generated_Source\PSoC5/ADC_SAR.c ****     #endif /* ADC_SAR_DEFAULT_REFERENCE == ADC_SAR__EXT_REF */
 171:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_SAR_CSR3_REG = tmpReg;
 193              		.loc 1 171 0
 194 0064 1C4B     		ldr	r3, .L9+16
 195 0066 BA79     		ldrb	r2, [r7, #6]
 196 0068 1A70     		strb	r2, [r3]
 172:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 173:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Set reference for ADC */
 174:.\Generated_Source\PSoC5/ADC_SAR.c ****     #if(ADC_SAR_DEFAULT_RANGE == ADC_SAR__VNEG_VDDA_DIFF)
 175:.\Generated_Source\PSoC5/ADC_SAR.c ****         #if(ADC_SAR_DEFAULT_REFERENCE == ADC_SAR__EXT_REF)
 176:.\Generated_Source\PSoC5/ADC_SAR.c ****             ADC_SAR_SAR_CSR6_REG = ADC_SAR_INT_BYPASS_EXT_VREF; /* S2 */
 177:.\Generated_Source\PSoC5/ADC_SAR.c ****         #else /* Internal Vdda reference or obsolete bypass mode */
 178:.\Generated_Source\PSoC5/ADC_SAR.c ****             ADC_SAR_SAR_CSR6_REG = ADC_SAR_VDDA_VREF;           /* S7 */
 179:.\Generated_Source\PSoC5/ADC_SAR.c ****         #endif /* ADC_SAR_DEFAULT_REFERENCE == ADC_SAR__EXT_REF */
 180:.\Generated_Source\PSoC5/ADC_SAR.c ****     #else  /* Reference goes through internal buffer */
 181:.\Generated_Source\PSoC5/ADC_SAR.c ****         #if(ADC_SAR_DEFAULT_REFERENCE == ADC_SAR__INT_REF_NOT_BYPASSED)
 182:.\Generated_Source\PSoC5/ADC_SAR.c ****             ADC_SAR_SAR_CSR6_REG = ADC_SAR_INT_VREF;            /* S3 + S4 */
 183:.\Generated_Source\PSoC5/ADC_SAR.c ****         #else /* INTREF Bypassed of External */
 184:.\Generated_Source\PSoC5/ADC_SAR.c ****             ADC_SAR_SAR_CSR6_REG = ADC_SAR_INT_BYPASS_EXT_VREF; /* S2 */
 197              		.loc 1 184 0
 198 006a 1C4B     		ldr	r3, .L9+20
 199 006c 0422     		movs	r2, #4
 200 006e 1A70     		strb	r2, [r3]
 185:.\Generated_Source\PSoC5/ADC_SAR.c ****         #endif /* ADC_SAR_DEFAULT_REFERENCE == ADC_SAR__INT_REF_NOT_BYPASSED */
 186:.\Generated_Source\PSoC5/ADC_SAR.c ****     #endif /* VNEG_VDDA_DIFF */
 187:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 188:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Low non-overlap delay for sampling clock signals (for 1MSPS) */
 189:.\Generated_Source\PSoC5/ADC_SAR.c ****     #if(ADC_SAR_HIGH_POWER_PULSE == 0u) /* MinPulseWidth <= 50 ns */
 190:.\Generated_Source\PSoC5/ADC_SAR.c ****         ADC_SAR_SAR_CSR5_REG &= (uint8)~ADC_SAR_SAR_DLY_INC;
 201              		.loc 1 190 0
 202 0070 1B4B     		ldr	r3, .L9+24
 203 0072 1B4A     		ldr	r2, .L9+24
 204 0074 1278     		ldrb	r2, [r2]
 205 0076 D2B2     		uxtb	r2, r2
 206 0078 22F04002 		bic	r2, r2, #64
 207 007c D2B2     		uxtb	r2, r2
 208 007e 1A70     		strb	r2, [r3]
 191:.\Generated_Source\PSoC5/ADC_SAR.c ****     #else /* Set High non-overlap delay for sampling clock signals (for <500KSPS)*/
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 8


 192:.\Generated_Source\PSoC5/ADC_SAR.c ****         ADC_SAR_SAR_CSR5_REG |= ADC_SAR_SAR_DLY_INC;
 193:.\Generated_Source\PSoC5/ADC_SAR.c ****     #endif /* ADC_SAR_CLOCK_FREQUENCY > (ADC_SAR_MAX_FREQUENCY / 2) */
 194:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 195:.\Generated_Source\PSoC5/ADC_SAR.c ****      /* Delay control for comparator latch enable, low delay, (Default for 1MSPS) */
 196:.\Generated_Source\PSoC5/ADC_SAR.c ****     #if(ADC_SAR_HIGH_POWER_PULSE == 0u) /* MinPulseWidth <= 50 ns */
 197:.\Generated_Source\PSoC5/ADC_SAR.c ****         ADC_SAR_SAR_CSR5_REG |= ADC_SAR_SAR_DCEN;
 209              		.loc 1 197 0
 210 0080 174B     		ldr	r3, .L9+24
 211 0082 174A     		ldr	r2, .L9+24
 212 0084 1278     		ldrb	r2, [r2]
 213 0086 D2B2     		uxtb	r2, r2
 214 0088 42F02002 		orr	r2, r2, #32
 215 008c D2B2     		uxtb	r2, r2
 216 008e 1A70     		strb	r2, [r3]
 198:.\Generated_Source\PSoC5/ADC_SAR.c ****     #else /* Delay control for comparator latch enable, high delay (for <500ksps)*/
 199:.\Generated_Source\PSoC5/ADC_SAR.c ****         ADC_SAR_SAR_CSR5_REG &= (uint8)~ADC_SAR_SAR_DCEN;
 200:.\Generated_Source\PSoC5/ADC_SAR.c ****     #endif /* ADC_SAR_CLOCK_FREQUENCY > (ADC_SAR_MAX_FREQUENCY / 2) */
 201:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 202:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Set default power and other configurations for control register 0 in multiple lines */
 203:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_SAR_CSR0_REG = (uint8)((uint8)ADC_SAR_DEFAULT_POWER << ADC_SAR_SAR_POWER_SHIFT)
 217              		.loc 1 203 0
 218 0090 144B     		ldr	r3, .L9+28
 219 0092 0822     		movs	r2, #8
 220 0094 1A70     		strb	r2, [r3]
 204:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* SAR_HIZ_CLEAR:   Should not be used for LP */
 205:.\Generated_Source\PSoC5/ADC_SAR.c ****     #if ((CY_PSOC5LP) || (ADC_SAR_DEFAULT_REFERENCE != ADC_SAR__EXT_REF))
 206:.\Generated_Source\PSoC5/ADC_SAR.c ****         | ADC_SAR_SAR_HIZ_CLEAR
 207:.\Generated_Source\PSoC5/ADC_SAR.c ****     #endif /* SAR_HIZ_CLEAR */
 208:.\Generated_Source\PSoC5/ADC_SAR.c ****     /*Set Convertion mode */
 209:.\Generated_Source\PSoC5/ADC_SAR.c ****     #if(ADC_SAR_DEFAULT_CONV_MODE != ADC_SAR__FREE_RUNNING)      /* If triggered mode */
 210:.\Generated_Source\PSoC5/ADC_SAR.c ****         | ADC_SAR_SAR_MX_SOF_UDB           /* source: UDB */
 211:.\Generated_Source\PSoC5/ADC_SAR.c ****         | ADC_SAR_SAR_SOF_MODE_EDGE        /* Set edge-sensitive sof source */
 212:.\Generated_Source\PSoC5/ADC_SAR.c ****     #endif /* ADC_SAR_DEFAULT_CONV_MODE */
 213:.\Generated_Source\PSoC5/ADC_SAR.c ****     ; /* end of multiple line initialization */
 214:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 215:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_SAR_TR0_REG = ADC_SAR_SAR_CAP_TRIM_2;
 221              		.loc 1 215 0
 222 0096 144B     		ldr	r3, .L9+32
 223 0098 0222     		movs	r2, #2
 224 009a 1A70     		strb	r2, [r3]
 216:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 217:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Enable clock for SAR ADC*/
 218:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_SAR_CLK_REG |= ADC_SAR_SAR_MX_CLK_EN;
 225              		.loc 1 218 0
 226 009c 134B     		ldr	r3, .L9+36
 227 009e 134A     		ldr	r2, .L9+36
 228 00a0 1278     		ldrb	r2, [r2]
 229 00a2 D2B2     		uxtb	r2, r2
 230 00a4 42F00802 		orr	r2, r2, #8
 231 00a8 D2B2     		uxtb	r2, r2
 232 00aa 1A70     		strb	r2, [r3]
 219:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 220:.\Generated_Source\PSoC5/ADC_SAR.c ****     CyDelayUs(10u); /* The block is ready to use 10 us after the enable signal is set high. */
 233              		.loc 1 220 0
 234 00ac 0A20     		movs	r0, #10
 235 00ae FFF7FEFF 		bl	CyDelayUs
 221:.\Generated_Source\PSoC5/ADC_SAR.c **** 
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 9


 222:.\Generated_Source\PSoC5/ADC_SAR.c ****     #if(ADC_SAR_IRQ_REMOVE == 0u)
 223:.\Generated_Source\PSoC5/ADC_SAR.c ****         /* Clear a pending interrupt */
 224:.\Generated_Source\PSoC5/ADC_SAR.c ****         CyIntClearPending(ADC_SAR_INTC_NUMBER);
 236              		.loc 1 224 0
 237 00b2 0F4B     		ldr	r3, .L9+40
 238 00b4 0222     		movs	r2, #2
 239 00b6 1A60     		str	r2, [r3]
 225:.\Generated_Source\PSoC5/ADC_SAR.c ****     #endif   /* End ADC_SAR_IRQ_REMOVE */
 226:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 227:.\Generated_Source\PSoC5/ADC_SAR.c ****     CyExitCriticalSection(enableInterrupts);
 240              		.loc 1 227 0
 241 00b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 242 00ba 1846     		mov	r0, r3
 243 00bc FFF7FEFF 		bl	CyExitCriticalSection
 228:.\Generated_Source\PSoC5/ADC_SAR.c **** }
 244              		.loc 1 228 0
 245 00c0 0837     		adds	r7, r7, #8
 246 00c2 BD46     		mov	sp, r7
 247              		@ sp needed
 248 00c4 80BD     		pop	{r7, pc}
 249              	.L10:
 250 00c6 00BF     		.align	2
 251              	.L9:
 252 00c8 AB430040 		.word	1073759147
 253 00cc BB430040 		.word	1073759163
 254 00d0 A1430040 		.word	1073759137
 255 00d4 B1430040 		.word	1073759153
 256 00d8 0B590040 		.word	1073764619
 257 00dc 0E590040 		.word	1073764622
 258 00e0 0D590040 		.word	1073764621
 259 00e4 08590040 		.word	1073764616
 260 00e8 16460040 		.word	1073759766
 261 00ec 2F5B0040 		.word	1073765167
 262 00f0 80E200E0 		.word	-536812928
 263              		.cfi_endproc
 264              	.LFE2:
 265              		.size	ADC_SAR_Enable, .-ADC_SAR_Enable
 266              		.section	.text.ADC_SAR_Stop,"ax",%progbits
 267              		.align	2
 268              		.global	ADC_SAR_Stop
 269              		.thumb
 270              		.thumb_func
 271              		.type	ADC_SAR_Stop, %function
 272              	ADC_SAR_Stop:
 273              	.LFB3:
 229:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 230:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 231:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
 232:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_Stop
 233:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
 234:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 235:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
 236:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Stops ADC conversions and puts the ADC into its lowest power mode.
 237:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 238:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
 239:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
 240:.\Generated_Source\PSoC5/ADC_SAR.c **** *
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 10


 241:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
 242:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
 243:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 244:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
 245:.\Generated_Source\PSoC5/ADC_SAR.c **** void ADC_SAR_Stop(void)
 246:.\Generated_Source\PSoC5/ADC_SAR.c **** {
 274              		.loc 1 246 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 8
 277              		@ frame_needed = 1, uses_anonymous_args = 0
 278 0000 80B5     		push	{r7, lr}
 279              		.cfi_def_cfa_offset 8
 280              		.cfi_offset 7, -8
 281              		.cfi_offset 14, -4
 282 0002 82B0     		sub	sp, sp, #8
 283              		.cfi_def_cfa_offset 16
 284 0004 00AF     		add	r7, sp, #0
 285              		.cfi_def_cfa_register 7
 247:.\Generated_Source\PSoC5/ADC_SAR.c ****     uint8 enableInterrupts;
 248:.\Generated_Source\PSoC5/ADC_SAR.c ****     enableInterrupts = CyEnterCriticalSection();
 286              		.loc 1 248 0
 287 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 288 000a 0346     		mov	r3, r0
 289 000c FB71     		strb	r3, [r7, #7]
 249:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 250:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Stop all conversions */
 251:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_SAR_CSR0_REG &= (uint8)~ADC_SAR_SAR_SOF_START_CONV;
 290              		.loc 1 251 0
 291 000e 174B     		ldr	r3, .L12
 292 0010 164A     		ldr	r2, .L12
 293 0012 1278     		ldrb	r2, [r2]
 294 0014 D2B2     		uxtb	r2, r2
 295 0016 22F00102 		bic	r2, r2, #1
 296 001a D2B2     		uxtb	r2, r2
 297 001c 1A70     		strb	r2, [r3]
 252:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Disable the SAR ADC block in Active Power Mode */
 253:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_PWRMGR_SAR_REG &= (uint8)~ADC_SAR_ACT_PWR_SAR_EN;
 298              		.loc 1 253 0
 299 001e 144B     		ldr	r3, .L12+4
 300 0020 134A     		ldr	r2, .L12+4
 301 0022 1278     		ldrb	r2, [r2]
 302 0024 D2B2     		uxtb	r2, r2
 303 0026 22F00202 		bic	r2, r2, #2
 304 002a D2B2     		uxtb	r2, r2
 305 002c 1A70     		strb	r2, [r3]
 254:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Disable the SAR ADC in Standby Power Mode */
 255:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_STBY_PWRMGR_SAR_REG &= (uint8)~ADC_SAR_STBY_PWR_SAR_EN;
 306              		.loc 1 255 0
 307 002e 114B     		ldr	r3, .L12+8
 308 0030 104A     		ldr	r2, .L12+8
 309 0032 1278     		ldrb	r2, [r2]
 310 0034 D2B2     		uxtb	r2, r2
 311 0036 22F00202 		bic	r2, r2, #2
 312 003a D2B2     		uxtb	r2, r2
 313 003c 1A70     		strb	r2, [r3]
 256:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 257:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* This is only valid if there is an internal clock */
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 11


 258:.\Generated_Source\PSoC5/ADC_SAR.c ****     #if(ADC_SAR_DEFAULT_INTERNAL_CLK)
 259:.\Generated_Source\PSoC5/ADC_SAR.c ****         ADC_SAR_PWRMGR_CLK_REG &= (uint8)~ADC_SAR_ACT_PWR_CLK_EN;
 314              		.loc 1 259 0
 315 003e 0E4B     		ldr	r3, .L12+12
 316 0040 0D4A     		ldr	r2, .L12+12
 317 0042 1278     		ldrb	r2, [r2]
 318 0044 D2B2     		uxtb	r2, r2
 319 0046 22F00102 		bic	r2, r2, #1
 320 004a D2B2     		uxtb	r2, r2
 321 004c 1A70     		strb	r2, [r3]
 260:.\Generated_Source\PSoC5/ADC_SAR.c ****         ADC_SAR_STBY_PWRMGR_CLK_REG &= (uint8)~ADC_SAR_STBY_PWR_CLK_EN;
 322              		.loc 1 260 0
 323 004e 0B4B     		ldr	r3, .L12+16
 324 0050 0A4A     		ldr	r2, .L12+16
 325 0052 1278     		ldrb	r2, [r2]
 326 0054 D2B2     		uxtb	r2, r2
 327 0056 22F00102 		bic	r2, r2, #1
 328 005a D2B2     		uxtb	r2, r2
 329 005c 1A70     		strb	r2, [r3]
 261:.\Generated_Source\PSoC5/ADC_SAR.c ****     #endif /* End ADC_SAR_DEFAULT_INTERNAL_CLK */
 262:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 263:.\Generated_Source\PSoC5/ADC_SAR.c ****     CyExitCriticalSection(enableInterrupts);
 330              		.loc 1 263 0
 331 005e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 332 0060 1846     		mov	r0, r3
 333 0062 FFF7FEFF 		bl	CyExitCriticalSection
 264:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 265:.\Generated_Source\PSoC5/ADC_SAR.c **** }
 334              		.loc 1 265 0
 335 0066 0837     		adds	r7, r7, #8
 336 0068 BD46     		mov	sp, r7
 337              		@ sp needed
 338 006a 80BD     		pop	{r7, pc}
 339              	.L13:
 340              		.align	2
 341              	.L12:
 342 006c 08590040 		.word	1073764616
 343 0070 AB430040 		.word	1073759147
 344 0074 BB430040 		.word	1073759163
 345 0078 A1430040 		.word	1073759137
 346 007c B1430040 		.word	1073759153
 347              		.cfi_endproc
 348              	.LFE3:
 349              		.size	ADC_SAR_Stop, .-ADC_SAR_Stop
 350              		.section	.text.ADC_SAR_SetPower,"ax",%progbits
 351              		.align	2
 352              		.global	ADC_SAR_SetPower
 353              		.thumb
 354              		.thumb_func
 355              		.type	ADC_SAR_SetPower, %function
 356              	ADC_SAR_SetPower:
 357              	.LFB4:
 266:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 267:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 268:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
 269:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_SetPower
 270:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 12


 271:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 272:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
 273:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Sets the operational power of the ADC. You should use the higher power
 274:.\Generated_Source\PSoC5/ADC_SAR.c **** *  settings with faster clock speeds.
 275:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 276:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
 277:.\Generated_Source\PSoC5/ADC_SAR.c **** *  power:  Power setting for ADC
 278:.\Generated_Source\PSoC5/ADC_SAR.c **** *  0 ->    Normal
 279:.\Generated_Source\PSoC5/ADC_SAR.c **** *  1 ->    Medium power
 280:.\Generated_Source\PSoC5/ADC_SAR.c **** *  2 ->    1.25 power
 281:.\Generated_Source\PSoC5/ADC_SAR.c **** *  3 ->    Minimum power.
 282:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 283:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
 284:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
 285:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 286:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
 287:.\Generated_Source\PSoC5/ADC_SAR.c **** void ADC_SAR_SetPower(uint8 power)
 288:.\Generated_Source\PSoC5/ADC_SAR.c **** {
 358              		.loc 1 288 0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 16
 361              		@ frame_needed = 1, uses_anonymous_args = 0
 362              		@ link register save eliminated.
 363 0000 80B4     		push	{r7}
 364              		.cfi_def_cfa_offset 4
 365              		.cfi_offset 7, -4
 366 0002 85B0     		sub	sp, sp, #20
 367              		.cfi_def_cfa_offset 24
 368 0004 00AF     		add	r7, sp, #0
 369              		.cfi_def_cfa_register 7
 370 0006 0346     		mov	r3, r0
 371 0008 FB71     		strb	r3, [r7, #7]
 289:.\Generated_Source\PSoC5/ADC_SAR.c ****     uint8 tmpReg;
 290:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 291:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* mask off invalid power settings */
 292:.\Generated_Source\PSoC5/ADC_SAR.c ****     power &= ADC_SAR_SAR_API_POWER_MASK;
 372              		.loc 1 292 0
 373 000a FB79     		ldrb	r3, [r7, #7]
 374 000c 03F00303 		and	r3, r3, #3
 375 0010 FB71     		strb	r3, [r7, #7]
 293:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 294:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Set Power parameter  */
 295:.\Generated_Source\PSoC5/ADC_SAR.c ****     tmpReg = ADC_SAR_SAR_CSR0_REG & (uint8)~ADC_SAR_SAR_POWER_MASK;
 376              		.loc 1 295 0
 377 0012 0A4B     		ldr	r3, .L15
 378 0014 1B78     		ldrb	r3, [r3]
 379 0016 DBB2     		uxtb	r3, r3
 380 0018 03F03F03 		and	r3, r3, #63
 381 001c FB73     		strb	r3, [r7, #15]
 296:.\Generated_Source\PSoC5/ADC_SAR.c ****     tmpReg |= (uint8)(power << ADC_SAR_SAR_POWER_SHIFT);
 382              		.loc 1 296 0
 383 001e FB79     		ldrb	r3, [r7, #7]
 384 0020 9B01     		lsls	r3, r3, #6
 385 0022 DAB2     		uxtb	r2, r3
 386 0024 FB7B     		ldrb	r3, [r7, #15]
 387 0026 1343     		orrs	r3, r3, r2
 388 0028 FB73     		strb	r3, [r7, #15]
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 13


 297:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_SAR_CSR0_REG = tmpReg;
 389              		.loc 1 297 0
 390 002a 044B     		ldr	r3, .L15
 391 002c FA7B     		ldrb	r2, [r7, #15]
 392 002e 1A70     		strb	r2, [r3]
 298:.\Generated_Source\PSoC5/ADC_SAR.c **** }
 393              		.loc 1 298 0
 394 0030 1437     		adds	r7, r7, #20
 395 0032 BD46     		mov	sp, r7
 396              		@ sp needed
 397 0034 5DF8047B 		ldr	r7, [sp], #4
 398 0038 7047     		bx	lr
 399              	.L16:
 400 003a 00BF     		.align	2
 401              	.L15:
 402 003c 08590040 		.word	1073764616
 403              		.cfi_endproc
 404              	.LFE4:
 405              		.size	ADC_SAR_SetPower, .-ADC_SAR_SetPower
 406              		.section	.text.ADC_SAR_SetResolution,"ax",%progbits
 407              		.align	2
 408              		.global	ADC_SAR_SetResolution
 409              		.thumb
 410              		.thumb_func
 411              		.type	ADC_SAR_SetResolution, %function
 412              	ADC_SAR_SetResolution:
 413              	.LFB5:
 299:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 300:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 301:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
 302:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_SetResolution
 303:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
 304:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 305:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
 306:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Sets the Relution of the SAR.
 307:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 308:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
 309:.\Generated_Source\PSoC5/ADC_SAR.c **** *  resolution:
 310:.\Generated_Source\PSoC5/ADC_SAR.c **** *  12 ->    RES12
 311:.\Generated_Source\PSoC5/ADC_SAR.c **** *  10 ->    RES10
 312:.\Generated_Source\PSoC5/ADC_SAR.c **** *  8  ->    RES8
 313:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 314:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
 315:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
 316:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 317:.\Generated_Source\PSoC5/ADC_SAR.c **** * Side Effects:
 318:.\Generated_Source\PSoC5/ADC_SAR.c **** *  The ADC resolution cannot be changed during a conversion cycle. The
 319:.\Generated_Source\PSoC5/ADC_SAR.c **** *  recommended best practice is to stop conversions with
 320:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_StopConvert(), change the resolution, then restart the
 321:.\Generated_Source\PSoC5/ADC_SAR.c **** *  conversions with ADC_StartConvert().
 322:.\Generated_Source\PSoC5/ADC_SAR.c **** *  If you decide not to stop conversions before calling this API, you
 323:.\Generated_Source\PSoC5/ADC_SAR.c **** *  should use ADC_IsEndConversion() to wait until conversion is complete
 324:.\Generated_Source\PSoC5/ADC_SAR.c **** *  before changing the resolution.
 325:.\Generated_Source\PSoC5/ADC_SAR.c **** *  If you call ADC_SetResolution() during a conversion, the resolution will
 326:.\Generated_Source\PSoC5/ADC_SAR.c **** *  not be changed until the current conversion is complete. Data will not be
 327:.\Generated_Source\PSoC5/ADC_SAR.c **** *  available in the new resolution for another 6 + "New Resolution(in bits)"
 328:.\Generated_Source\PSoC5/ADC_SAR.c **** *  clock cycles.
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 14


 329:.\Generated_Source\PSoC5/ADC_SAR.c **** *  You may need add a delay of this number of clock cycles after
 330:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SetResolution() is called before data is valid again.
 331:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Affects ADC_CountsTo_Volts(), ADC_CountsTo_mVolts(), and
 332:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_CountsTo_uVolts() by calculating the correct conversion between ADC
 333:.\Generated_Source\PSoC5/ADC_SAR.c **** *  counts and the applied input voltage. Calculation depends on resolution,
 334:.\Generated_Source\PSoC5/ADC_SAR.c **** *  input range, and voltage reference.
 335:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 336:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
 337:.\Generated_Source\PSoC5/ADC_SAR.c **** void ADC_SAR_SetResolution(uint8 resolution)
 338:.\Generated_Source\PSoC5/ADC_SAR.c **** {
 414              		.loc 1 338 0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 16
 417              		@ frame_needed = 1, uses_anonymous_args = 0
 418 0000 80B5     		push	{r7, lr}
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 7, -8
 421              		.cfi_offset 14, -4
 422 0002 84B0     		sub	sp, sp, #16
 423              		.cfi_def_cfa_offset 24
 424 0004 00AF     		add	r7, sp, #0
 425              		.cfi_def_cfa_register 7
 426 0006 0346     		mov	r3, r0
 427 0008 FB71     		strb	r3, [r7, #7]
 339:.\Generated_Source\PSoC5/ADC_SAR.c ****     uint8 tmpReg;
 340:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 341:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Set SAR ADC resolution and sample width: 18 conversion cycles at 12bits + 1 gap */
 342:.\Generated_Source\PSoC5/ADC_SAR.c ****     switch (resolution)
 428              		.loc 1 342 0
 429 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 430 000c 0A2B     		cmp	r3, #10
 431 000e 07D0     		beq	.L19
 432 0010 0C2B     		cmp	r3, #12
 433 0012 02D0     		beq	.L20
 434 0014 082B     		cmp	r3, #8
 435 0016 06D0     		beq	.L21
 436 0018 08E0     		b	.L23
 437              	.L20:
 343:.\Generated_Source\PSoC5/ADC_SAR.c ****     {
 344:.\Generated_Source\PSoC5/ADC_SAR.c ****         case (uint8)ADC_SAR__BITS_12:
 345:.\Generated_Source\PSoC5/ADC_SAR.c ****             tmpReg = ADC_SAR_SAR_RESOLUTION_12BIT | ADC_SAR_SAR_SAMPLE_WIDTH;
 438              		.loc 1 345 0
 439 001a C423     		movs	r3, #196
 440 001c FB73     		strb	r3, [r7, #15]
 346:.\Generated_Source\PSoC5/ADC_SAR.c ****             break;
 441              		.loc 1 346 0
 442 001e 0BE0     		b	.L22
 443              	.L19:
 347:.\Generated_Source\PSoC5/ADC_SAR.c ****         case (uint8)ADC_SAR__BITS_10:
 348:.\Generated_Source\PSoC5/ADC_SAR.c ****             tmpReg = ADC_SAR_SAR_RESOLUTION_10BIT | ADC_SAR_SAR_SAMPLE_WIDTH;
 444              		.loc 1 348 0
 445 0020 8423     		movs	r3, #132
 446 0022 FB73     		strb	r3, [r7, #15]
 349:.\Generated_Source\PSoC5/ADC_SAR.c ****             break;
 447              		.loc 1 349 0
 448 0024 08E0     		b	.L22
 449              	.L21:
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 15


 350:.\Generated_Source\PSoC5/ADC_SAR.c ****         case (uint8)ADC_SAR__BITS_8:
 351:.\Generated_Source\PSoC5/ADC_SAR.c ****             tmpReg = ADC_SAR_SAR_RESOLUTION_8BIT | ADC_SAR_SAR_SAMPLE_WIDTH;
 450              		.loc 1 351 0
 451 0026 4423     		movs	r3, #68
 452 0028 FB73     		strb	r3, [r7, #15]
 352:.\Generated_Source\PSoC5/ADC_SAR.c ****             break;
 453              		.loc 1 352 0
 454 002a 05E0     		b	.L22
 455              	.L23:
 353:.\Generated_Source\PSoC5/ADC_SAR.c ****         default:
 354:.\Generated_Source\PSoC5/ADC_SAR.c ****             tmpReg = ADC_SAR_SAR_RESOLUTION_12BIT | ADC_SAR_SAR_SAMPLE_WIDTH;
 456              		.loc 1 354 0
 457 002c C423     		movs	r3, #196
 458 002e FB73     		strb	r3, [r7, #15]
 355:.\Generated_Source\PSoC5/ADC_SAR.c ****             /* Halt CPU in debug mode if resolution is out of valid range */
 356:.\Generated_Source\PSoC5/ADC_SAR.c ****             CYASSERT(0u != 0u);
 459              		.loc 1 356 0
 460 0030 0020     		movs	r0, #0
 461 0032 FFF7FEFF 		bl	CyHalt
 357:.\Generated_Source\PSoC5/ADC_SAR.c ****             break;
 462              		.loc 1 357 0
 463 0036 00BF     		nop
 464              	.L22:
 358:.\Generated_Source\PSoC5/ADC_SAR.c ****     }
 359:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_SAR_CSR2_REG = tmpReg;
 465              		.loc 1 359 0
 466 0038 044B     		ldr	r3, .L24
 467 003a FA7B     		ldrb	r2, [r7, #15]
 468 003c 1A70     		strb	r2, [r3]
 360:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 361:.\Generated_Source\PSoC5/ADC_SAR.c ****      /* Calculate gain for convert counts to volts */
 362:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_CalcGain(resolution);
 469              		.loc 1 362 0
 470 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 471 0040 1846     		mov	r0, r3
 472 0042 FFF7FEFF 		bl	ADC_SAR_CalcGain
 363:.\Generated_Source\PSoC5/ADC_SAR.c **** }
 473              		.loc 1 363 0
 474 0046 1037     		adds	r7, r7, #16
 475 0048 BD46     		mov	sp, r7
 476              		@ sp needed
 477 004a 80BD     		pop	{r7, pc}
 478              	.L25:
 479              		.align	2
 480              	.L24:
 481 004c 0A590040 		.word	1073764618
 482              		.cfi_endproc
 483              	.LFE5:
 484              		.size	ADC_SAR_SetResolution, .-ADC_SAR_SetResolution
 485              		.section	.text.ADC_SAR_StartConvert,"ax",%progbits
 486              		.align	2
 487              		.global	ADC_SAR_StartConvert
 488              		.thumb
 489              		.thumb_func
 490              		.type	ADC_SAR_StartConvert, %function
 491              	ADC_SAR_StartConvert:
 492              	.LFB6:
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 16


 364:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 365:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 366:.\Generated_Source\PSoC5/ADC_SAR.c **** #if(ADC_SAR_DEFAULT_CONV_MODE != ADC_SAR__HARDWARE_TRIGGER)
 367:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 368:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 369:.\Generated_Source\PSoC5/ADC_SAR.c ****     /*******************************************************************************
 370:.\Generated_Source\PSoC5/ADC_SAR.c ****     * Function Name: ADC_SAR_StartConvert
 371:.\Generated_Source\PSoC5/ADC_SAR.c ****     ********************************************************************************
 372:.\Generated_Source\PSoC5/ADC_SAR.c ****     *
 373:.\Generated_Source\PSoC5/ADC_SAR.c ****     * Summary:
 374:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  Forces the ADC to initiate a conversion. In free-running mode, the ADC runs
 375:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  continuously. In software trigger mode, the function also acts as a software
 376:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  version of the SOC and every conversion must be triggered by
 377:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  ADC_SAR_StartConvert(). This function is not available when the
 378:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  Hardware Trigger sample mode is selected.
 379:.\Generated_Source\PSoC5/ADC_SAR.c ****     *
 380:.\Generated_Source\PSoC5/ADC_SAR.c ****     * Parameters:
 381:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  None.
 382:.\Generated_Source\PSoC5/ADC_SAR.c ****     *
 383:.\Generated_Source\PSoC5/ADC_SAR.c ****     * Return:
 384:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  None.
 385:.\Generated_Source\PSoC5/ADC_SAR.c ****     *
 386:.\Generated_Source\PSoC5/ADC_SAR.c ****     * Theory:
 387:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  Forces the ADC to initiate a conversion. In Free Running mode, the ADC will
 388:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  run continuously. In a software trigger mode the function also acts as a
 389:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  software version of the SOC. Here every conversion has to be triggered by
 390:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  the routine. This writes into the SOC bit in SAR_CTRL reg.
 391:.\Generated_Source\PSoC5/ADC_SAR.c ****     *
 392:.\Generated_Source\PSoC5/ADC_SAR.c ****     * Side Effects:
 393:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  In a software trigger mode the function switches source for SOF from the
 394:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  external pin to the internal SOF generation. Application should not call
 395:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  StartConvert if external source used for SOF.
 396:.\Generated_Source\PSoC5/ADC_SAR.c ****     *
 397:.\Generated_Source\PSoC5/ADC_SAR.c ****     *******************************************************************************/
 398:.\Generated_Source\PSoC5/ADC_SAR.c ****     void ADC_SAR_StartConvert(void)
 399:.\Generated_Source\PSoC5/ADC_SAR.c ****     {
 493              		.loc 1 399 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 1, uses_anonymous_args = 0
 497              		@ link register save eliminated.
 498 0000 80B4     		push	{r7}
 499              		.cfi_def_cfa_offset 4
 500              		.cfi_offset 7, -4
 501 0002 00AF     		add	r7, sp, #0
 502              		.cfi_def_cfa_register 7
 400:.\Generated_Source\PSoC5/ADC_SAR.c ****         #if(ADC_SAR_DEFAULT_CONV_MODE != ADC_SAR__FREE_RUNNING)  /* If software triggered mode */
 401:.\Generated_Source\PSoC5/ADC_SAR.c ****             ADC_SAR_SAR_CSR0_REG &= (uint8)~ADC_SAR_SAR_MX_SOF_UDB;   /* source: SOF bit */
 402:.\Generated_Source\PSoC5/ADC_SAR.c ****         #endif /* End ADC_SAR_DEFAULT_CONV_MODE */
 403:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 404:.\Generated_Source\PSoC5/ADC_SAR.c ****         /* Start the conversion */
 405:.\Generated_Source\PSoC5/ADC_SAR.c ****         ADC_SAR_SAR_CSR0_REG |= ADC_SAR_SAR_SOF_START_CONV;
 503              		.loc 1 405 0
 504 0004 054B     		ldr	r3, .L27
 505 0006 054A     		ldr	r2, .L27
 506 0008 1278     		ldrb	r2, [r2]
 507 000a D2B2     		uxtb	r2, r2
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 17


 508 000c 42F00102 		orr	r2, r2, #1
 509 0010 D2B2     		uxtb	r2, r2
 510 0012 1A70     		strb	r2, [r3]
 406:.\Generated_Source\PSoC5/ADC_SAR.c ****     }
 511              		.loc 1 406 0
 512 0014 BD46     		mov	sp, r7
 513              		@ sp needed
 514 0016 5DF8047B 		ldr	r7, [sp], #4
 515 001a 7047     		bx	lr
 516              	.L28:
 517              		.align	2
 518              	.L27:
 519 001c 08590040 		.word	1073764616
 520              		.cfi_endproc
 521              	.LFE6:
 522              		.size	ADC_SAR_StartConvert, .-ADC_SAR_StartConvert
 523              		.section	.text.ADC_SAR_StopConvert,"ax",%progbits
 524              		.align	2
 525              		.global	ADC_SAR_StopConvert
 526              		.thumb
 527              		.thumb_func
 528              		.type	ADC_SAR_StopConvert, %function
 529              	ADC_SAR_StopConvert:
 530              	.LFB7:
 407:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 408:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 409:.\Generated_Source\PSoC5/ADC_SAR.c ****     /*******************************************************************************
 410:.\Generated_Source\PSoC5/ADC_SAR.c ****     * Function Name: ADC_SAR_StopConvert
 411:.\Generated_Source\PSoC5/ADC_SAR.c ****     ********************************************************************************
 412:.\Generated_Source\PSoC5/ADC_SAR.c ****     *
 413:.\Generated_Source\PSoC5/ADC_SAR.c ****     * Summary:
 414:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  Forces the ADC to stop conversions. If a conversion is currently executing,
 415:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  that conversion will complete, but no further conversions will occur. This
 416:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  function is not available when the Hardware Trigger sample mode is selected.
 417:.\Generated_Source\PSoC5/ADC_SAR.c ****     *
 418:.\Generated_Source\PSoC5/ADC_SAR.c ****     * Parameters:
 419:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  None.
 420:.\Generated_Source\PSoC5/ADC_SAR.c ****     *
 421:.\Generated_Source\PSoC5/ADC_SAR.c ****     * Return:
 422:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  None.
 423:.\Generated_Source\PSoC5/ADC_SAR.c ****     *
 424:.\Generated_Source\PSoC5/ADC_SAR.c ****     * Theory:
 425:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  Stops ADC conversion in Free Running mode.
 426:.\Generated_Source\PSoC5/ADC_SAR.c ****     *
 427:.\Generated_Source\PSoC5/ADC_SAR.c ****     * Side Effects:
 428:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  In Software Trigger sample mode, this function sets a software version of the
 429:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  SOC to low level and switches the SOC source to hardware SOC input.
 430:.\Generated_Source\PSoC5/ADC_SAR.c ****     *
 431:.\Generated_Source\PSoC5/ADC_SAR.c ****     *******************************************************************************/
 432:.\Generated_Source\PSoC5/ADC_SAR.c ****     void ADC_SAR_StopConvert(void)
 433:.\Generated_Source\PSoC5/ADC_SAR.c ****     {
 531              		.loc 1 433 0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 0
 534              		@ frame_needed = 1, uses_anonymous_args = 0
 535              		@ link register save eliminated.
 536 0000 80B4     		push	{r7}
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 18


 537              		.cfi_def_cfa_offset 4
 538              		.cfi_offset 7, -4
 539 0002 00AF     		add	r7, sp, #0
 540              		.cfi_def_cfa_register 7
 434:.\Generated_Source\PSoC5/ADC_SAR.c ****         /* Stop all conversions */
 435:.\Generated_Source\PSoC5/ADC_SAR.c ****         ADC_SAR_SAR_CSR0_REG &= (uint8)~ADC_SAR_SAR_SOF_START_CONV;
 541              		.loc 1 435 0
 542 0004 054B     		ldr	r3, .L30
 543 0006 054A     		ldr	r2, .L30
 544 0008 1278     		ldrb	r2, [r2]
 545 000a D2B2     		uxtb	r2, r2
 546 000c 22F00102 		bic	r2, r2, #1
 547 0010 D2B2     		uxtb	r2, r2
 548 0012 1A70     		strb	r2, [r3]
 436:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 437:.\Generated_Source\PSoC5/ADC_SAR.c ****         #if(ADC_SAR_DEFAULT_CONV_MODE != ADC_SAR__FREE_RUNNING)  /* If software triggered mode */
 438:.\Generated_Source\PSoC5/ADC_SAR.c ****             /* Return source to UDB for hardware SOF signal */
 439:.\Generated_Source\PSoC5/ADC_SAR.c ****             ADC_SAR_SAR_CSR0_REG |= ADC_SAR_SAR_MX_SOF_UDB;    /* source: UDB */
 440:.\Generated_Source\PSoC5/ADC_SAR.c ****         #endif /* End ADC_SAR_DEFAULT_CONV_MODE */
 441:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 442:.\Generated_Source\PSoC5/ADC_SAR.c ****     }
 549              		.loc 1 442 0
 550 0014 BD46     		mov	sp, r7
 551              		@ sp needed
 552 0016 5DF8047B 		ldr	r7, [sp], #4
 553 001a 7047     		bx	lr
 554              	.L31:
 555              		.align	2
 556              	.L30:
 557 001c 08590040 		.word	1073764616
 558              		.cfi_endproc
 559              	.LFE7:
 560              		.size	ADC_SAR_StopConvert, .-ADC_SAR_StopConvert
 561              		.section	.text.ADC_SAR_IsEndConversion,"ax",%progbits
 562              		.align	2
 563              		.global	ADC_SAR_IsEndConversion
 564              		.thumb
 565              		.thumb_func
 566              		.type	ADC_SAR_IsEndConversion, %function
 567              	ADC_SAR_IsEndConversion:
 568              	.LFB8:
 443:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 444:.\Generated_Source\PSoC5/ADC_SAR.c **** #endif /* End ADC_SAR_DEFAULT_CONV_MODE != ADC_SAR__HARDWARE_TRIGGER */
 445:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 446:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 447:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
 448:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_IsEndConversion
 449:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
 450:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 451:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
 452:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Immediately returns the status of the conversion or does not return
 453:.\Generated_Source\PSoC5/ADC_SAR.c **** *  (blocking) until the conversion completes, depending on the retMode
 454:.\Generated_Source\PSoC5/ADC_SAR.c **** *  parameter.
 455:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 456:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
 457:.\Generated_Source\PSoC5/ADC_SAR.c **** *  retMode:  Check conversion return mode.
 458:.\Generated_Source\PSoC5/ADC_SAR.c **** *   ADC_SAR_RETURN_STATUS: Immediately returns the status. If the
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 19


 459:.\Generated_Source\PSoC5/ADC_SAR.c **** *     value returned is zero, the conversion is not complete, and this function
 460:.\Generated_Source\PSoC5/ADC_SAR.c **** *     should be retried until a nonzero result is returned.
 461:.\Generated_Source\PSoC5/ADC_SAR.c **** *   ADC_SAR_WAIT_FOR_RESULT: Does not return a result until the ADC
 462:.\Generated_Source\PSoC5/ADC_SAR.c **** *     conversion is complete.
 463:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 464:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
 465:.\Generated_Source\PSoC5/ADC_SAR.c **** *  (uint8)  0 =>  The ADC is still calculating the last result.
 466:.\Generated_Source\PSoC5/ADC_SAR.c **** *           1 =>  The last conversion is complete.
 467:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 468:.\Generated_Source\PSoC5/ADC_SAR.c **** * Side Effects:
 469:.\Generated_Source\PSoC5/ADC_SAR.c **** *  This function reads the end of conversion status, which is cleared on read.
 470:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 471:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
 472:.\Generated_Source\PSoC5/ADC_SAR.c **** uint8 ADC_SAR_IsEndConversion(uint8 retMode)
 473:.\Generated_Source\PSoC5/ADC_SAR.c **** {
 569              		.loc 1 473 0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 16
 572              		@ frame_needed = 1, uses_anonymous_args = 0
 573 0000 80B5     		push	{r7, lr}
 574              		.cfi_def_cfa_offset 8
 575              		.cfi_offset 7, -8
 576              		.cfi_offset 14, -4
 577 0002 84B0     		sub	sp, sp, #16
 578              		.cfi_def_cfa_offset 24
 579 0004 00AF     		add	r7, sp, #0
 580              		.cfi_def_cfa_register 7
 581 0006 0346     		mov	r3, r0
 582 0008 FB71     		strb	r3, [r7, #7]
 583              	.L34:
 474:.\Generated_Source\PSoC5/ADC_SAR.c ****     uint8 status;
 475:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 476:.\Generated_Source\PSoC5/ADC_SAR.c ****     do
 477:.\Generated_Source\PSoC5/ADC_SAR.c ****     {
 478:.\Generated_Source\PSoC5/ADC_SAR.c ****         status = ADC_SAR_SAR_CSR1_REG & ADC_SAR_SAR_EOF_1;
 584              		.loc 1 478 0 discriminator 1
 585 000a 0C4B     		ldr	r3, .L37
 586 000c 1B78     		ldrb	r3, [r3]
 587 000e DBB2     		uxtb	r3, r3
 588 0010 03F00103 		and	r3, r3, #1
 589 0014 FB73     		strb	r3, [r7, #15]
 479:.\Generated_Source\PSoC5/ADC_SAR.c ****     } while ((status != ADC_SAR_SAR_EOF_1) && (retMode == ADC_SAR_WAIT_FOR_RESULT));
 590              		.loc 1 479 0 discriminator 1
 591 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 592 0018 012B     		cmp	r3, #1
 593 001a 02D0     		beq	.L33
 594 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 595 001e 002B     		cmp	r3, #0
 596 0020 F3D0     		beq	.L34
 597              	.L33:
 480:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* If convertion complete, wait until EOF bit released */
 481:.\Generated_Source\PSoC5/ADC_SAR.c ****     if(status == ADC_SAR_SAR_EOF_1)
 598              		.loc 1 481 0
 599 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 600 0024 012B     		cmp	r3, #1
 601 0026 04D1     		bne	.L35
 482:.\Generated_Source\PSoC5/ADC_SAR.c ****     {
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 20


 483:.\Generated_Source\PSoC5/ADC_SAR.c ****         /* wait one ADC clock to let the EOC status bit release */
 484:.\Generated_Source\PSoC5/ADC_SAR.c ****         CyDelayUs(1u);
 602              		.loc 1 484 0
 603 0028 0120     		movs	r0, #1
 604 002a FFF7FEFF 		bl	CyDelayUs
 485:.\Generated_Source\PSoC5/ADC_SAR.c ****         /* Do the unconditional read operation of the CSR1 register to make sure the EOC bit has be
 486:.\Generated_Source\PSoC5/ADC_SAR.c ****         CY_GET_REG8(ADC_SAR_SAR_CSR1_PTR);
 605              		.loc 1 486 0
 606 002e 034B     		ldr	r3, .L37
 607 0030 1B78     		ldrb	r3, [r3]
 608              	.L35:
 487:.\Generated_Source\PSoC5/ADC_SAR.c ****     }
 488:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 489:.\Generated_Source\PSoC5/ADC_SAR.c ****     return(status);
 609              		.loc 1 489 0
 610 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 490:.\Generated_Source\PSoC5/ADC_SAR.c **** }
 611              		.loc 1 490 0
 612 0034 1846     		mov	r0, r3
 613 0036 1037     		adds	r7, r7, #16
 614 0038 BD46     		mov	sp, r7
 615              		@ sp needed
 616 003a 80BD     		pop	{r7, pc}
 617              	.L38:
 618              		.align	2
 619              	.L37:
 620 003c 09590040 		.word	1073764617
 621              		.cfi_endproc
 622              	.LFE8:
 623              		.size	ADC_SAR_IsEndConversion, .-ADC_SAR_IsEndConversion
 624              		.section	.text.ADC_SAR_GetResult8,"ax",%progbits
 625              		.align	2
 626              		.global	ADC_SAR_GetResult8
 627              		.thumb
 628              		.thumb_func
 629              		.type	ADC_SAR_GetResult8, %function
 630              	ADC_SAR_GetResult8:
 631              	.LFB9:
 491:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 492:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 493:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
 494:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_GetResult8
 495:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
 496:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 497:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
 498:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Returns the result of an 8-bit conversion. If the resolution is set greater
 499:.\Generated_Source\PSoC5/ADC_SAR.c **** *  than 8 bits, the function returns the LSB of the result.
 500:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_IsEndConversion() should be called to verify that the data
 501:.\Generated_Source\PSoC5/ADC_SAR.c **** *   sample is ready.
 502:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 503:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
 504:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
 505:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 506:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
 507:.\Generated_Source\PSoC5/ADC_SAR.c **** *  The LSB of the last ADC conversion.
 508:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 509:.\Generated_Source\PSoC5/ADC_SAR.c **** * Global Variables:
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 21


 510:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_shift - used to convert the ADC counts to the 2s
 511:.\Generated_Source\PSoC5/ADC_SAR.c **** *  compliment form.
 512:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 513:.\Generated_Source\PSoC5/ADC_SAR.c **** * Side Effects:
 514:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Converts the ADC counts to the 2s complement form.
 515:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 516:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
 517:.\Generated_Source\PSoC5/ADC_SAR.c **** int8 ADC_SAR_GetResult8( void )
 518:.\Generated_Source\PSoC5/ADC_SAR.c **** {
 632              		.loc 1 518 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 1, uses_anonymous_args = 0
 636              		@ link register save eliminated.
 637 0000 80B4     		push	{r7}
 638              		.cfi_def_cfa_offset 4
 639              		.cfi_offset 7, -4
 640 0002 00AF     		add	r7, sp, #0
 641              		.cfi_def_cfa_register 7
 519:.\Generated_Source\PSoC5/ADC_SAR.c ****     return( (int8)ADC_SAR_SAR_WRK0_REG - (int8)ADC_SAR_shift);
 642              		.loc 1 519 0
 643 0004 074B     		ldr	r3, .L41
 644 0006 1B78     		ldrb	r3, [r3]
 645 0008 DAB2     		uxtb	r2, r3
 646 000a 074B     		ldr	r3, .L41+4
 647 000c 1B88     		ldrh	r3, [r3]	@ movhi
 648 000e 9BB2     		uxth	r3, r3
 649 0010 DBB2     		uxtb	r3, r3
 650 0012 D31A     		subs	r3, r2, r3
 651 0014 DBB2     		uxtb	r3, r3
 652 0016 DBB2     		uxtb	r3, r3
 653 0018 5BB2     		sxtb	r3, r3
 520:.\Generated_Source\PSoC5/ADC_SAR.c **** }
 654              		.loc 1 520 0
 655 001a 1846     		mov	r0, r3
 656 001c BD46     		mov	sp, r7
 657              		@ sp needed
 658 001e 5DF8047B 		ldr	r7, [sp], #4
 659 0022 7047     		bx	lr
 660              	.L42:
 661              		.align	2
 662              	.L41:
 663 0024 A25B0040 		.word	1073765282
 664 0028 00000000 		.word	ADC_SAR_shift
 665              		.cfi_endproc
 666              	.LFE9:
 667              		.size	ADC_SAR_GetResult8, .-ADC_SAR_GetResult8
 668              		.section	.text.ADC_SAR_GetResult16,"ax",%progbits
 669              		.align	2
 670              		.global	ADC_SAR_GetResult16
 671              		.thumb
 672              		.thumb_func
 673              		.type	ADC_SAR_GetResult16, %function
 674              	ADC_SAR_GetResult16:
 675              	.LFB10:
 521:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 522:.\Generated_Source\PSoC5/ADC_SAR.c **** 
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 22


 523:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
 524:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_GetResult16
 525:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
 526:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 527:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
 528:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Returns a 16-bit result for a conversion with a result that has a resolution
 529:.\Generated_Source\PSoC5/ADC_SAR.c **** *  of 8 to 12 bits.
 530:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_IsEndConversion() should be called to verify that the data
 531:.\Generated_Source\PSoC5/ADC_SAR.c **** *   sample is ready
 532:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 533:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
 534:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
 535:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 536:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
 537:.\Generated_Source\PSoC5/ADC_SAR.c **** *  The 16-bit result of the last ADC conversion
 538:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 539:.\Generated_Source\PSoC5/ADC_SAR.c **** * Global Variables:
 540:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_shift - used to convert the ADC counts to the 2s
 541:.\Generated_Source\PSoC5/ADC_SAR.c **** *  compliment form.
 542:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 543:.\Generated_Source\PSoC5/ADC_SAR.c **** * Side Effects:
 544:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Converts the ADC counts to the 2s complement form.
 545:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 546:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
 547:.\Generated_Source\PSoC5/ADC_SAR.c **** int16 ADC_SAR_GetResult16( void )
 548:.\Generated_Source\PSoC5/ADC_SAR.c **** {
 676              		.loc 1 548 0
 677              		.cfi_startproc
 678              		@ args = 0, pretend = 0, frame = 8
 679              		@ frame_needed = 1, uses_anonymous_args = 0
 680              		@ link register save eliminated.
 681 0000 80B4     		push	{r7}
 682              		.cfi_def_cfa_offset 4
 683              		.cfi_offset 7, -4
 684 0002 83B0     		sub	sp, sp, #12
 685              		.cfi_def_cfa_offset 16
 686 0004 00AF     		add	r7, sp, #0
 687              		.cfi_def_cfa_register 7
 549:.\Generated_Source\PSoC5/ADC_SAR.c ****     uint16 res;
 550:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 551:.\Generated_Source\PSoC5/ADC_SAR.c ****     res = CY_GET_REG16(ADC_SAR_SAR_WRK_PTR);
 688              		.loc 1 551 0
 689 0006 094B     		ldr	r3, .L45
 690 0008 1B88     		ldrh	r3, [r3]	@ movhi
 691 000a FB80     		strh	r3, [r7, #6]	@ movhi
 552:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 553:.\Generated_Source\PSoC5/ADC_SAR.c ****     return( (int16)res - ADC_SAR_shift );
 692              		.loc 1 553 0
 693 000c 084B     		ldr	r3, .L45+4
 694 000e 1B88     		ldrh	r3, [r3]	@ movhi
 695 0010 9BB2     		uxth	r3, r3
 696 0012 9BB2     		uxth	r3, r3
 697 0014 FA88     		ldrh	r2, [r7, #6]	@ movhi
 698 0016 D31A     		subs	r3, r2, r3
 699 0018 9BB2     		uxth	r3, r3
 700 001a 9BB2     		uxth	r3, r3
 701 001c 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 23


 554:.\Generated_Source\PSoC5/ADC_SAR.c **** }
 702              		.loc 1 554 0
 703 001e 1846     		mov	r0, r3
 704 0020 0C37     		adds	r7, r7, #12
 705 0022 BD46     		mov	sp, r7
 706              		@ sp needed
 707 0024 5DF8047B 		ldr	r7, [sp], #4
 708 0028 7047     		bx	lr
 709              	.L46:
 710 002a 00BF     		.align	2
 711              	.L45:
 712 002c A25B0040 		.word	1073765282
 713 0030 00000000 		.word	ADC_SAR_shift
 714              		.cfi_endproc
 715              	.LFE10:
 716              		.size	ADC_SAR_GetResult16, .-ADC_SAR_GetResult16
 717              		.section	.text.ADC_SAR_SetOffset,"ax",%progbits
 718              		.align	2
 719              		.global	ADC_SAR_SetOffset
 720              		.thumb
 721              		.thumb_func
 722              		.type	ADC_SAR_SetOffset, %function
 723              	ADC_SAR_SetOffset:
 724              	.LFB11:
 555:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 556:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 557:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
 558:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_SetOffset
 559:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
 560:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 561:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
 562:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Sets the ADC offset, which is used by ADC_SAR_CountsTo_Volts(),
 563:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_CountsTo_mVolts(), and ADC_SAR_CountsTo_uVolts()
 564:.\Generated_Source\PSoC5/ADC_SAR.c **** *  to subtract the offset from the given reading before calculating the voltage
 565:.\Generated_Source\PSoC5/ADC_SAR.c **** *  conversion.
 566:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 567:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
 568:.\Generated_Source\PSoC5/ADC_SAR.c **** *  int16: This value is measured when the inputs are shorted or connected to
 569:.\Generated_Source\PSoC5/ADC_SAR.c ****    the same input voltage.
 570:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 571:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
 572:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
 573:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 574:.\Generated_Source\PSoC5/ADC_SAR.c **** * Global Variables:
 575:.\Generated_Source\PSoC5/ADC_SAR.c **** *  The ADC_SAR_offset variable modified. This variable is used for
 576:.\Generated_Source\PSoC5/ADC_SAR.c **** *  offset calibration purpose.
 577:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Affects the ADC_SAR_CountsTo_Volts,
 578:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_CountsTo_mVolts, ADC_SAR_CountsTo_uVolts functions
 579:.\Generated_Source\PSoC5/ADC_SAR.c **** *  by subtracting the given offset.
 580:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 581:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
 582:.\Generated_Source\PSoC5/ADC_SAR.c **** void ADC_SAR_SetOffset(int16 offset)
 583:.\Generated_Source\PSoC5/ADC_SAR.c **** {
 725              		.loc 1 583 0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 8
 728              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 24


 729              		@ link register save eliminated.
 730 0000 80B4     		push	{r7}
 731              		.cfi_def_cfa_offset 4
 732              		.cfi_offset 7, -4
 733 0002 83B0     		sub	sp, sp, #12
 734              		.cfi_def_cfa_offset 16
 735 0004 00AF     		add	r7, sp, #0
 736              		.cfi_def_cfa_register 7
 737 0006 0346     		mov	r3, r0
 738 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 584:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_offset = offset;
 739              		.loc 1 584 0
 740 000a 044B     		ldr	r3, .L48
 741 000c FA88     		ldrh	r2, [r7, #6]	@ movhi
 742 000e 1A80     		strh	r2, [r3]	@ movhi
 585:.\Generated_Source\PSoC5/ADC_SAR.c **** }
 743              		.loc 1 585 0
 744 0010 0C37     		adds	r7, r7, #12
 745 0012 BD46     		mov	sp, r7
 746              		@ sp needed
 747 0014 5DF8047B 		ldr	r7, [sp], #4
 748 0018 7047     		bx	lr
 749              	.L49:
 750 001a 00BF     		.align	2
 751              	.L48:
 752 001c 00000000 		.word	ADC_SAR_offset
 753              		.cfi_endproc
 754              	.LFE11:
 755              		.size	ADC_SAR_SetOffset, .-ADC_SAR_SetOffset
 756              		.section	.text.ADC_SAR_CalcGain,"ax",%progbits
 757              		.align	2
 758              		.thumb
 759              		.thumb_func
 760              		.type	ADC_SAR_CalcGain, %function
 761              	ADC_SAR_CalcGain:
 762              	.LFB12:
 586:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 587:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 588:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
 589:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_CalcGain
 590:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
 591:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 592:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
 593:.\Generated_Source\PSoC5/ADC_SAR.c **** *  This function calculates the ADC gain in counts per 10 volt.
 594:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 595:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
 596:.\Generated_Source\PSoC5/ADC_SAR.c **** *  uint8: resolution
 597:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 598:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
 599:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
 600:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 601:.\Generated_Source\PSoC5/ADC_SAR.c **** * Global Variables:
 602:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_shift variable initialized. This variable is used to
 603:.\Generated_Source\PSoC5/ADC_SAR.c **** *  convert the ADC counts to the 2s compliment form.
 604:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_countsPer10Volt variable initialized. This variable is used
 605:.\Generated_Source\PSoC5/ADC_SAR.c **** *  for gain calibration purpose.
 606:.\Generated_Source\PSoC5/ADC_SAR.c **** *
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 25


 607:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
 608:.\Generated_Source\PSoC5/ADC_SAR.c **** static void ADC_SAR_CalcGain( uint8 resolution )
 609:.\Generated_Source\PSoC5/ADC_SAR.c **** {
 763              		.loc 1 609 0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 16
 766              		@ frame_needed = 1, uses_anonymous_args = 0
 767 0000 80B5     		push	{r7, lr}
 768              		.cfi_def_cfa_offset 8
 769              		.cfi_offset 7, -8
 770              		.cfi_offset 14, -4
 771 0002 84B0     		sub	sp, sp, #16
 772              		.cfi_def_cfa_offset 24
 773 0004 00AF     		add	r7, sp, #0
 774              		.cfi_def_cfa_register 7
 775 0006 0346     		mov	r3, r0
 776 0008 FB71     		strb	r3, [r7, #7]
 610:.\Generated_Source\PSoC5/ADC_SAR.c ****     int32 counts;
 611:.\Generated_Source\PSoC5/ADC_SAR.c ****     #if(!((ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSS_TO_VREF) || \
 612:.\Generated_Source\PSoC5/ADC_SAR.c ****          (ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSSA_TO_VDDA) || \
 613:.\Generated_Source\PSoC5/ADC_SAR.c ****          (ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSSA_TO_VDAC)) )
 614:.\Generated_Source\PSoC5/ADC_SAR.c ****         uint16 diff_zero;
 615:.\Generated_Source\PSoC5/ADC_SAR.c ****     #endif /* End ADC_SAR_DEFAULT_RANGE */
 616:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 617:.\Generated_Source\PSoC5/ADC_SAR.c ****     switch (resolution)
 777              		.loc 1 617 0
 778 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 779 000c 0A2B     		cmp	r3, #10
 780 000e 08D0     		beq	.L52
 781 0010 0C2B     		cmp	r3, #12
 782 0012 02D0     		beq	.L53
 783 0014 082B     		cmp	r3, #8
 784 0016 08D0     		beq	.L54
 785 0018 0BE0     		b	.L57
 786              	.L53:
 618:.\Generated_Source\PSoC5/ADC_SAR.c ****     {
 619:.\Generated_Source\PSoC5/ADC_SAR.c ****         case (uint8)ADC_SAR__BITS_12:
 620:.\Generated_Source\PSoC5/ADC_SAR.c ****             counts = (int32)ADC_SAR_SAR_WRK_MAX_12BIT;
 787              		.loc 1 620 0
 788 001a 4FF48053 		mov	r3, #4096
 789 001e FB60     		str	r3, [r7, #12]
 621:.\Generated_Source\PSoC5/ADC_SAR.c ****             #if(!((ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSS_TO_VREF) || \
 622:.\Generated_Source\PSoC5/ADC_SAR.c ****                  (ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSSA_TO_VDDA) || \
 623:.\Generated_Source\PSoC5/ADC_SAR.c ****                  (ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSSA_TO_VDAC)) )
 624:.\Generated_Source\PSoC5/ADC_SAR.c ****                 diff_zero = ADC_SAR_SAR_DIFF_SHIFT;
 625:.\Generated_Source\PSoC5/ADC_SAR.c ****             #endif /* End ADC_SAR_DEFAULT_RANGE */
 626:.\Generated_Source\PSoC5/ADC_SAR.c ****             break;
 790              		.loc 1 626 0
 791 0020 0DE0     		b	.L55
 792              	.L52:
 627:.\Generated_Source\PSoC5/ADC_SAR.c ****         case (uint8)ADC_SAR__BITS_10:
 628:.\Generated_Source\PSoC5/ADC_SAR.c ****             counts = (int32)ADC_SAR_SAR_WRK_MAX_10BIT;
 793              		.loc 1 628 0
 794 0022 4FF48063 		mov	r3, #1024
 795 0026 FB60     		str	r3, [r7, #12]
 629:.\Generated_Source\PSoC5/ADC_SAR.c ****             #if(!((ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSS_TO_VREF) || \
 630:.\Generated_Source\PSoC5/ADC_SAR.c ****                  (ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSSA_TO_VDDA) || \
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 26


 631:.\Generated_Source\PSoC5/ADC_SAR.c ****                  (ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSSA_TO_VDAC)) )
 632:.\Generated_Source\PSoC5/ADC_SAR.c ****                 diff_zero = ADC_SAR_SAR_DIFF_SHIFT >> 2u;
 633:.\Generated_Source\PSoC5/ADC_SAR.c ****             #endif /* End ADC_SAR_DEFAULT_RANGE */
 634:.\Generated_Source\PSoC5/ADC_SAR.c ****             break;
 796              		.loc 1 634 0
 797 0028 09E0     		b	.L55
 798              	.L54:
 635:.\Generated_Source\PSoC5/ADC_SAR.c ****         case (uint8)ADC_SAR__BITS_8:
 636:.\Generated_Source\PSoC5/ADC_SAR.c ****             counts = (int32)ADC_SAR_SAR_WRK_MAX_8BIT;
 799              		.loc 1 636 0
 800 002a 4FF48073 		mov	r3, #256
 801 002e FB60     		str	r3, [r7, #12]
 637:.\Generated_Source\PSoC5/ADC_SAR.c ****             #if(!((ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSS_TO_VREF) || \
 638:.\Generated_Source\PSoC5/ADC_SAR.c ****                  (ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSSA_TO_VDDA) || \
 639:.\Generated_Source\PSoC5/ADC_SAR.c ****                  (ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSSA_TO_VDAC)) )
 640:.\Generated_Source\PSoC5/ADC_SAR.c ****                 diff_zero = ADC_SAR_SAR_DIFF_SHIFT >> 4u;
 641:.\Generated_Source\PSoC5/ADC_SAR.c ****             #endif /* End ADC_SAR_DEFAULT_RANGE */
 642:.\Generated_Source\PSoC5/ADC_SAR.c ****             break;
 802              		.loc 1 642 0
 803 0030 05E0     		b	.L55
 804              	.L57:
 643:.\Generated_Source\PSoC5/ADC_SAR.c ****         default: /* Halt CPU in debug mode if resolution is out of valid range */
 644:.\Generated_Source\PSoC5/ADC_SAR.c ****             counts = 0;
 805              		.loc 1 644 0
 806 0032 0023     		movs	r3, #0
 807 0034 FB60     		str	r3, [r7, #12]
 645:.\Generated_Source\PSoC5/ADC_SAR.c ****             #if(!((ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSS_TO_VREF) || \
 646:.\Generated_Source\PSoC5/ADC_SAR.c ****                  (ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSSA_TO_VDDA) || \
 647:.\Generated_Source\PSoC5/ADC_SAR.c ****                  (ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSSA_TO_VDAC)) )
 648:.\Generated_Source\PSoC5/ADC_SAR.c ****                 diff_zero = 0u;
 649:.\Generated_Source\PSoC5/ADC_SAR.c ****             #endif /* End ADC_SAR_DEFAULT_RANGE */
 650:.\Generated_Source\PSoC5/ADC_SAR.c ****             CYASSERT(0u != 0u);
 808              		.loc 1 650 0
 809 0036 0020     		movs	r0, #0
 810 0038 FFF7FEFF 		bl	CyHalt
 651:.\Generated_Source\PSoC5/ADC_SAR.c ****             break;
 811              		.loc 1 651 0
 812 003c 00BF     		nop
 813              	.L55:
 652:.\Generated_Source\PSoC5/ADC_SAR.c ****     }
 653:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_countsPerVolt = 0; /* Clear obsolete variable */
 814              		.loc 1 653 0
 815 003e 0C4B     		ldr	r3, .L58
 816 0040 0022     		movs	r2, #0
 817 0042 1A80     		strh	r2, [r3]	@ movhi
 654:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Calculate gain in counts per 10 volts with rounding */
 655:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_countsPer10Volt = (((counts * ADC_SAR_10MV_COUNTS) +
 818              		.loc 1 655 0
 819 0044 FB68     		ldr	r3, [r7, #12]
 820 0046 42F21072 		movw	r2, #10000
 821 004a 02FB03F3 		mul	r3, r2, r3
 822 004e 03F58063 		add	r3, r3, #1024
 656:.\Generated_Source\PSoC5/ADC_SAR.c ****                         ADC_SAR_DEFAULT_REF_VOLTAGE_MV) / (ADC_SAR_DEFAULT_REF_VOLTAGE_MV * 2));
 823              		.loc 1 656 0
 824 0052 002B     		cmp	r3, #0
 825 0054 01DA     		bge	.L56
 826 0056 03F2FF73 		addw	r3, r3, #2047
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 27


 827              	.L56:
 828 005a DB12     		asrs	r3, r3, #11
 829 005c 1A46     		mov	r2, r3
 655:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_countsPer10Volt = (((counts * ADC_SAR_10MV_COUNTS) +
 830              		.loc 1 655 0
 831 005e 054B     		ldr	r3, .L58+4
 832 0060 1A60     		str	r2, [r3]
 657:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 658:.\Generated_Source\PSoC5/ADC_SAR.c ****     #if( (ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSS_TO_VREF) || \
 659:.\Generated_Source\PSoC5/ADC_SAR.c ****          (ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSSA_TO_VDDA) || \
 660:.\Generated_Source\PSoC5/ADC_SAR.c ****          (ADC_SAR_DEFAULT_RANGE == ADC_SAR__VSSA_TO_VDAC) )
 661:.\Generated_Source\PSoC5/ADC_SAR.c ****         ADC_SAR_shift = 0;
 833              		.loc 1 661 0
 834 0062 054B     		ldr	r3, .L58+8
 835 0064 0022     		movs	r2, #0
 836 0066 1A80     		strh	r2, [r3]	@ movhi
 662:.\Generated_Source\PSoC5/ADC_SAR.c ****     #else
 663:.\Generated_Source\PSoC5/ADC_SAR.c ****         ADC_SAR_shift = diff_zero;
 664:.\Generated_Source\PSoC5/ADC_SAR.c ****     #endif /* End ADC_SAR_DEFAULT_RANGE */
 665:.\Generated_Source\PSoC5/ADC_SAR.c **** }
 837              		.loc 1 665 0
 838 0068 1037     		adds	r7, r7, #16
 839 006a BD46     		mov	sp, r7
 840              		@ sp needed
 841 006c 80BD     		pop	{r7, pc}
 842              	.L59:
 843 006e 00BF     		.align	2
 844              	.L58:
 845 0070 00000000 		.word	ADC_SAR_countsPerVolt
 846 0074 00000000 		.word	ADC_SAR_countsPer10Volt
 847 0078 00000000 		.word	ADC_SAR_shift
 848              		.cfi_endproc
 849              	.LFE12:
 850              		.size	ADC_SAR_CalcGain, .-ADC_SAR_CalcGain
 851              		.section	.text.ADC_SAR_SetGain,"ax",%progbits
 852              		.align	2
 853              		.global	ADC_SAR_SetGain
 854              		.thumb
 855              		.thumb_func
 856              		.type	ADC_SAR_SetGain, %function
 857              	ADC_SAR_SetGain:
 858              	.LFB13:
 666:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 667:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 668:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
 669:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_SetGain
 670:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
 671:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 672:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
 673:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Sets the ADC gain in counts per volt for the voltage conversion functions
 674:.\Generated_Source\PSoC5/ADC_SAR.c **** *  that follow. This value is set by default by the reference and input range
 675:.\Generated_Source\PSoC5/ADC_SAR.c **** *  settings. It should only be used to further calibrate the ADC with a known
 676:.\Generated_Source\PSoC5/ADC_SAR.c **** *  input or if the ADC is using an external reference.
 677:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 678:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
 679:.\Generated_Source\PSoC5/ADC_SAR.c **** *  int16  adcGain  counts per volt
 680:.\Generated_Source\PSoC5/ADC_SAR.c **** *
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 28


 681:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
 682:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
 683:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 684:.\Generated_Source\PSoC5/ADC_SAR.c **** * Global Variables:
 685:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_countsPer10Volt variable modified. This variable is used
 686:.\Generated_Source\PSoC5/ADC_SAR.c **** *  for gain calibration purpose.
 687:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 688:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
 689:.\Generated_Source\PSoC5/ADC_SAR.c **** void ADC_SAR_SetGain(int16 adcGain)
 690:.\Generated_Source\PSoC5/ADC_SAR.c **** {
 859              		.loc 1 690 0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 8
 862              		@ frame_needed = 1, uses_anonymous_args = 0
 863              		@ link register save eliminated.
 864 0000 80B4     		push	{r7}
 865              		.cfi_def_cfa_offset 4
 866              		.cfi_offset 7, -4
 867 0002 83B0     		sub	sp, sp, #12
 868              		.cfi_def_cfa_offset 16
 869 0004 00AF     		add	r7, sp, #0
 870              		.cfi_def_cfa_register 7
 871 0006 0346     		mov	r3, r0
 872 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 691:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_countsPer10Volt = (int32)adcGain * 10;
 873              		.loc 1 691 0
 874 000a B7F90620 		ldrsh	r2, [r7, #6]
 875 000e 1346     		mov	r3, r2
 876 0010 9B00     		lsls	r3, r3, #2
 877 0012 1344     		add	r3, r3, r2
 878 0014 5B00     		lsls	r3, r3, #1
 879 0016 1A46     		mov	r2, r3
 880 0018 034B     		ldr	r3, .L61
 881 001a 1A60     		str	r2, [r3]
 692:.\Generated_Source\PSoC5/ADC_SAR.c **** }
 882              		.loc 1 692 0
 883 001c 0C37     		adds	r7, r7, #12
 884 001e BD46     		mov	sp, r7
 885              		@ sp needed
 886 0020 5DF8047B 		ldr	r7, [sp], #4
 887 0024 7047     		bx	lr
 888              	.L62:
 889 0026 00BF     		.align	2
 890              	.L61:
 891 0028 00000000 		.word	ADC_SAR_countsPer10Volt
 892              		.cfi_endproc
 893              	.LFE13:
 894              		.size	ADC_SAR_SetGain, .-ADC_SAR_SetGain
 895              		.section	.text.ADC_SAR_SetScaledGain,"ax",%progbits
 896              		.align	2
 897              		.global	ADC_SAR_SetScaledGain
 898              		.thumb
 899              		.thumb_func
 900              		.type	ADC_SAR_SetScaledGain, %function
 901              	ADC_SAR_SetScaledGain:
 902              	.LFB14:
 693:.\Generated_Source\PSoC5/ADC_SAR.c **** 
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 29


 694:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 695:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
 696:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_SetGainPer10Volt
 697:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
 698:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 699:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
 700:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Sets the ADC gain in counts per 10 volt for the voltage conversion functions
 701:.\Generated_Source\PSoC5/ADC_SAR.c **** *  that follow. This value is set by default by the reference and input range
 702:.\Generated_Source\PSoC5/ADC_SAR.c **** *  settings. It should only be used to further calibrate the ADC with a known
 703:.\Generated_Source\PSoC5/ADC_SAR.c **** *  input or if the ADC is using an external reference.
 704:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 705:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
 706:.\Generated_Source\PSoC5/ADC_SAR.c **** *  int16  adcGain  counts per 10 volt
 707:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 708:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
 709:.\Generated_Source\PSoC5/ADC_SAR.c **** *  None.
 710:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 711:.\Generated_Source\PSoC5/ADC_SAR.c **** * Global Variables:
 712:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_countsPer10Volt variable modified. This variable is used
 713:.\Generated_Source\PSoC5/ADC_SAR.c **** *  for gain calibration purpose.
 714:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 715:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
 716:.\Generated_Source\PSoC5/ADC_SAR.c **** void ADC_SAR_SetScaledGain(int32 adcGain)
 717:.\Generated_Source\PSoC5/ADC_SAR.c **** {
 903              		.loc 1 717 0
 904              		.cfi_startproc
 905              		@ args = 0, pretend = 0, frame = 8
 906              		@ frame_needed = 1, uses_anonymous_args = 0
 907              		@ link register save eliminated.
 908 0000 80B4     		push	{r7}
 909              		.cfi_def_cfa_offset 4
 910              		.cfi_offset 7, -4
 911 0002 83B0     		sub	sp, sp, #12
 912              		.cfi_def_cfa_offset 16
 913 0004 00AF     		add	r7, sp, #0
 914              		.cfi_def_cfa_register 7
 915 0006 7860     		str	r0, [r7, #4]
 718:.\Generated_Source\PSoC5/ADC_SAR.c ****     ADC_SAR_countsPer10Volt = adcGain;
 916              		.loc 1 718 0
 917 0008 034B     		ldr	r3, .L64
 918 000a 7A68     		ldr	r2, [r7, #4]
 919 000c 1A60     		str	r2, [r3]
 719:.\Generated_Source\PSoC5/ADC_SAR.c **** }
 920              		.loc 1 719 0
 921 000e 0C37     		adds	r7, r7, #12
 922 0010 BD46     		mov	sp, r7
 923              		@ sp needed
 924 0012 5DF8047B 		ldr	r7, [sp], #4
 925 0016 7047     		bx	lr
 926              	.L65:
 927              		.align	2
 928              	.L64:
 929 0018 00000000 		.word	ADC_SAR_countsPer10Volt
 930              		.cfi_endproc
 931              	.LFE14:
 932              		.size	ADC_SAR_SetScaledGain, .-ADC_SAR_SetScaledGain
 933              		.section	.text.ADC_SAR_CountsTo_mVolts,"ax",%progbits
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 30


 934              		.align	2
 935              		.global	ADC_SAR_CountsTo_mVolts
 936              		.thumb
 937              		.thumb_func
 938              		.type	ADC_SAR_CountsTo_mVolts, %function
 939              	ADC_SAR_CountsTo_mVolts:
 940              	.LFB15:
 720:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 721:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 722:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
 723:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_CountsTo_mVolts
 724:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
 725:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 726:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
 727:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Converts the ADC output to millivolts as a 16-bit integer.
 728:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 729:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
 730:.\Generated_Source\PSoC5/ADC_SAR.c **** *  int16 adcCounts:  Result from the ADC conversion
 731:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 732:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
 733:.\Generated_Source\PSoC5/ADC_SAR.c **** *  int16 Result in mVolts
 734:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 735:.\Generated_Source\PSoC5/ADC_SAR.c **** * Global Variables:
 736:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_offset variable used.
 737:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_countsPer10Volt variable used.
 738:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 739:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
 740:.\Generated_Source\PSoC5/ADC_SAR.c **** int16 ADC_SAR_CountsTo_mVolts(int16 adcCounts)
 741:.\Generated_Source\PSoC5/ADC_SAR.c **** {
 941              		.loc 1 741 0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 16
 944              		@ frame_needed = 1, uses_anonymous_args = 0
 945              		@ link register save eliminated.
 946 0000 80B4     		push	{r7}
 947              		.cfi_def_cfa_offset 4
 948              		.cfi_offset 7, -4
 949 0002 85B0     		sub	sp, sp, #20
 950              		.cfi_def_cfa_offset 24
 951 0004 00AF     		add	r7, sp, #0
 952              		.cfi_def_cfa_register 7
 953 0006 0346     		mov	r3, r0
 954 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 742:.\Generated_Source\PSoC5/ADC_SAR.c ****     int16 mVolts;
 743:.\Generated_Source\PSoC5/ADC_SAR.c ****     int32 countsPer10Volt;
 744:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 745:.\Generated_Source\PSoC5/ADC_SAR.c ****     if(ADC_SAR_countsPerVolt != 0)
 955              		.loc 1 745 0
 956 000a 1D4B     		ldr	r3, .L72
 957 000c 1B88     		ldrh	r3, [r3]	@ movhi
 958 000e 9BB2     		uxth	r3, r3
 959 0010 002B     		cmp	r3, #0
 960 0012 09D0     		beq	.L67
 746:.\Generated_Source\PSoC5/ADC_SAR.c ****     {   /* Support obsolete method */
 747:.\Generated_Source\PSoC5/ADC_SAR.c ****         countsPer10Volt = (int32)ADC_SAR_countsPerVolt * 10;
 961              		.loc 1 747 0
 962 0014 1A4B     		ldr	r3, .L72
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 31


 963 0016 1B88     		ldrh	r3, [r3]	@ movhi
 964 0018 9BB2     		uxth	r3, r3
 965 001a 1AB2     		sxth	r2, r3
 966 001c 1346     		mov	r3, r2
 967 001e 9B00     		lsls	r3, r3, #2
 968 0020 1344     		add	r3, r3, r2
 969 0022 5B00     		lsls	r3, r3, #1
 970 0024 FB60     		str	r3, [r7, #12]
 971 0026 02E0     		b	.L68
 972              	.L67:
 748:.\Generated_Source\PSoC5/ADC_SAR.c ****     }
 749:.\Generated_Source\PSoC5/ADC_SAR.c ****     else
 750:.\Generated_Source\PSoC5/ADC_SAR.c ****     {
 751:.\Generated_Source\PSoC5/ADC_SAR.c ****         countsPer10Volt = ADC_SAR_countsPer10Volt;
 973              		.loc 1 751 0
 974 0028 164B     		ldr	r3, .L72+4
 975 002a 1B68     		ldr	r3, [r3]
 976 002c FB60     		str	r3, [r7, #12]
 977              	.L68:
 752:.\Generated_Source\PSoC5/ADC_SAR.c ****     }
 753:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 754:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Subtract ADC offset */
 755:.\Generated_Source\PSoC5/ADC_SAR.c ****     adcCounts -= ADC_SAR_offset;
 978              		.loc 1 755 0
 979 002e FA88     		ldrh	r2, [r7, #6]
 980 0030 154B     		ldr	r3, .L72+8
 981 0032 1B88     		ldrh	r3, [r3]	@ movhi
 982 0034 9BB2     		uxth	r3, r3
 983 0036 9BB2     		uxth	r3, r3
 984 0038 D31A     		subs	r3, r2, r3
 985 003a 9BB2     		uxth	r3, r3
 986 003c FB80     		strh	r3, [r7, #6]	@ movhi
 756:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Convert to millivolts with rounding */
 757:.\Generated_Source\PSoC5/ADC_SAR.c ****     mVolts = (int16)( (( (int32)adcCounts * ADC_SAR_10MV_COUNTS ) + ( (adcCounts > 0) ?
 987              		.loc 1 757 0
 988 003e B7F90630 		ldrsh	r3, [r7, #6]
 989 0042 42F21072 		movw	r2, #10000
 990 0046 02FB03F2 		mul	r2, r2, r3
 758:.\Generated_Source\PSoC5/ADC_SAR.c ****                        (countsPer10Volt / 2) : (-(countsPer10Volt / 2)) )) / countsPer10Volt);
 991              		.loc 1 758 0
 992 004a B7F90630 		ldrsh	r3, [r7, #6]
 993 004e 002B     		cmp	r3, #0
 994 0050 04DD     		ble	.L69
 995              		.loc 1 758 0 is_stmt 0 discriminator 1
 996 0052 FB68     		ldr	r3, [r7, #12]
 997 0054 D90F     		lsrs	r1, r3, #31
 998 0056 0B44     		add	r3, r3, r1
 999 0058 5B10     		asrs	r3, r3, #1
 1000 005a 04E0     		b	.L70
 1001              	.L69:
 1002              		.loc 1 758 0 discriminator 2
 1003 005c FB68     		ldr	r3, [r7, #12]
 1004 005e D90F     		lsrs	r1, r3, #31
 1005 0060 0B44     		add	r3, r3, r1
 1006 0062 5B10     		asrs	r3, r3, #1
 1007 0064 5B42     		negs	r3, r3
 1008              	.L70:
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 32


 757:.\Generated_Source\PSoC5/ADC_SAR.c ****     mVolts = (int16)( (( (int32)adcCounts * ADC_SAR_10MV_COUNTS ) + ( (adcCounts > 0) ?
 1009              		.loc 1 757 0 is_stmt 1
 1010 0066 1A44     		add	r2, r2, r3
 1011              		.loc 1 758 0
 1012 0068 FB68     		ldr	r3, [r7, #12]
 1013 006a 92FBF3F3 		sdiv	r3, r2, r3
 757:.\Generated_Source\PSoC5/ADC_SAR.c ****     mVolts = (int16)( (( (int32)adcCounts * ADC_SAR_10MV_COUNTS ) + ( (adcCounts > 0) ?
 1014              		.loc 1 757 0
 1015 006e 7B81     		strh	r3, [r7, #10]	@ movhi
 759:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 760:.\Generated_Source\PSoC5/ADC_SAR.c ****     return( mVolts );
 1016              		.loc 1 760 0
 1017 0070 7B89     		ldrh	r3, [r7, #10]
 1018 0072 1BB2     		sxth	r3, r3
 761:.\Generated_Source\PSoC5/ADC_SAR.c **** }
 1019              		.loc 1 761 0
 1020 0074 1846     		mov	r0, r3
 1021 0076 1437     		adds	r7, r7, #20
 1022 0078 BD46     		mov	sp, r7
 1023              		@ sp needed
 1024 007a 5DF8047B 		ldr	r7, [sp], #4
 1025 007e 7047     		bx	lr
 1026              	.L73:
 1027              		.align	2
 1028              	.L72:
 1029 0080 00000000 		.word	ADC_SAR_countsPerVolt
 1030 0084 00000000 		.word	ADC_SAR_countsPer10Volt
 1031 0088 00000000 		.word	ADC_SAR_offset
 1032              		.cfi_endproc
 1033              	.LFE15:
 1034              		.size	ADC_SAR_CountsTo_mVolts, .-ADC_SAR_CountsTo_mVolts
 1035              		.global	__aeabi_ldivmod
 1036              		.section	.text.ADC_SAR_CountsTo_uVolts,"ax",%progbits
 1037              		.align	2
 1038              		.global	ADC_SAR_CountsTo_uVolts
 1039              		.thumb
 1040              		.thumb_func
 1041              		.type	ADC_SAR_CountsTo_uVolts, %function
 1042              	ADC_SAR_CountsTo_uVolts:
 1043              	.LFB16:
 762:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 763:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 764:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
 765:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_CountsTo_uVolts
 766:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
 767:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 768:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
 769:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Converts the ADC output to microvolts as a 32-bit integer.
 770:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 771:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
 772:.\Generated_Source\PSoC5/ADC_SAR.c **** *  int16 adcCounts: Result from the ADC conversion
 773:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 774:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
 775:.\Generated_Source\PSoC5/ADC_SAR.c **** *  int32 Result in micro Volts
 776:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 777:.\Generated_Source\PSoC5/ADC_SAR.c **** * Global Variables:
 778:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_offset variable used.
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 33


 779:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_countsPer10Volt used to convert ADC counts to uVolts.
 780:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 781:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
 782:.\Generated_Source\PSoC5/ADC_SAR.c **** int32 ADC_SAR_CountsTo_uVolts(int16 adcCounts)
 783:.\Generated_Source\PSoC5/ADC_SAR.c **** {
 1044              		.loc 1 783 0
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 24
 1047              		@ frame_needed = 1, uses_anonymous_args = 0
 1048 0000 B0B5     		push	{r4, r5, r7, lr}
 1049              		.cfi_def_cfa_offset 16
 1050              		.cfi_offset 4, -16
 1051              		.cfi_offset 5, -12
 1052              		.cfi_offset 7, -8
 1053              		.cfi_offset 14, -4
 1054 0002 86B0     		sub	sp, sp, #24
 1055              		.cfi_def_cfa_offset 40
 1056 0004 00AF     		add	r7, sp, #0
 1057              		.cfi_def_cfa_register 7
 1058 0006 0346     		mov	r3, r0
 1059 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 784:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 785:.\Generated_Source\PSoC5/ADC_SAR.c ****     int64 uVolts;
 786:.\Generated_Source\PSoC5/ADC_SAR.c ****     int32 countsPer10Volt;
 787:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 788:.\Generated_Source\PSoC5/ADC_SAR.c ****     if(ADC_SAR_countsPerVolt != 0)
 1060              		.loc 1 788 0
 1061 000a 1E4B     		ldr	r3, .L78
 1062 000c 1B88     		ldrh	r3, [r3]	@ movhi
 1063 000e 9BB2     		uxth	r3, r3
 1064 0010 002B     		cmp	r3, #0
 1065 0012 09D0     		beq	.L75
 789:.\Generated_Source\PSoC5/ADC_SAR.c ****     {   /* Support obsolete method */
 790:.\Generated_Source\PSoC5/ADC_SAR.c ****         countsPer10Volt = (int32)ADC_SAR_countsPerVolt * 10;
 1066              		.loc 1 790 0
 1067 0014 1B4B     		ldr	r3, .L78
 1068 0016 1B88     		ldrh	r3, [r3]	@ movhi
 1069 0018 9BB2     		uxth	r3, r3
 1070 001a 1AB2     		sxth	r2, r3
 1071 001c 1346     		mov	r3, r2
 1072 001e 9B00     		lsls	r3, r3, #2
 1073 0020 1344     		add	r3, r3, r2
 1074 0022 5B00     		lsls	r3, r3, #1
 1075 0024 7B61     		str	r3, [r7, #20]
 1076 0026 02E0     		b	.L76
 1077              	.L75:
 791:.\Generated_Source\PSoC5/ADC_SAR.c ****     }
 792:.\Generated_Source\PSoC5/ADC_SAR.c ****     else
 793:.\Generated_Source\PSoC5/ADC_SAR.c ****     {
 794:.\Generated_Source\PSoC5/ADC_SAR.c ****         countsPer10Volt = ADC_SAR_countsPer10Volt;
 1078              		.loc 1 794 0
 1079 0028 174B     		ldr	r3, .L78+4
 1080 002a 1B68     		ldr	r3, [r3]
 1081 002c 7B61     		str	r3, [r7, #20]
 1082              	.L76:
 795:.\Generated_Source\PSoC5/ADC_SAR.c ****     }
 796:.\Generated_Source\PSoC5/ADC_SAR.c **** 
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 34


 797:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Subtract ADC offset */
 798:.\Generated_Source\PSoC5/ADC_SAR.c ****     adcCounts -= ADC_SAR_offset;
 1083              		.loc 1 798 0
 1084 002e FA88     		ldrh	r2, [r7, #6]
 1085 0030 164B     		ldr	r3, .L78+8
 1086 0032 1B88     		ldrh	r3, [r3]	@ movhi
 1087 0034 9BB2     		uxth	r3, r3
 1088 0036 9BB2     		uxth	r3, r3
 1089 0038 D31A     		subs	r3, r2, r3
 1090 003a 9BB2     		uxth	r3, r3
 1091 003c FB80     		strh	r3, [r7, #6]	@ movhi
 799:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* To convert adcCounts to microVolts it is required to be multiplied
 800:.\Generated_Source\PSoC5/ADC_SAR.c ****     *  on 10 million and later divide on gain in counts per 10V.
 801:.\Generated_Source\PSoC5/ADC_SAR.c ****     */
 802:.\Generated_Source\PSoC5/ADC_SAR.c ****     uVolts = (( (int64)adcCounts * ADC_SAR_10UV_COUNTS ) / countsPer10Volt);
 1092              		.loc 1 802 0
 1093 003e B7F90620 		ldrsh	r2, [r7, #6]
 1094 0042 4FEAE273 		asr	r3, r2, #31
 1095 0046 1249     		ldr	r1, .L78+12
 1096 0048 01FB03F0 		mul	r0, r1, r3
 1097 004c 0021     		movs	r1, #0
 1098 004e 01FB02F1 		mul	r1, r1, r2
 1099 0052 0144     		add	r1, r1, r0
 1100 0054 0E48     		ldr	r0, .L78+12
 1101 0056 A2FB0023 		umull	r2, r3, r2, r0
 1102 005a 1944     		add	r1, r1, r3
 1103 005c 0B46     		mov	r3, r1
 1104 005e 7969     		ldr	r1, [r7, #20]
 1105 0060 0C46     		mov	r4, r1
 1106 0062 4FEAE475 		asr	r5, r4, #31
 1107 0066 1046     		mov	r0, r2
 1108 0068 1946     		mov	r1, r3
 1109 006a 2246     		mov	r2, r4
 1110 006c 2B46     		mov	r3, r5
 1111 006e FFF7FEFF 		bl	__aeabi_ldivmod
 1112 0072 0246     		mov	r2, r0
 1113 0074 0B46     		mov	r3, r1
 1114 0076 C7E90223 		strd	r2, [r7, #8]
 803:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 804:.\Generated_Source\PSoC5/ADC_SAR.c ****     return( uVolts );
 1115              		.loc 1 804 0
 1116 007a BB68     		ldr	r3, [r7, #8]
 805:.\Generated_Source\PSoC5/ADC_SAR.c **** }
 1117              		.loc 1 805 0
 1118 007c 1846     		mov	r0, r3
 1119 007e 1837     		adds	r7, r7, #24
 1120 0080 BD46     		mov	sp, r7
 1121              		@ sp needed
 1122 0082 B0BD     		pop	{r4, r5, r7, pc}
 1123              	.L79:
 1124              		.align	2
 1125              	.L78:
 1126 0084 00000000 		.word	ADC_SAR_countsPerVolt
 1127 0088 00000000 		.word	ADC_SAR_countsPer10Volt
 1128 008c 00000000 		.word	ADC_SAR_offset
 1129 0090 80969800 		.word	10000000
 1130              		.cfi_endproc
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 35


 1131              	.LFE16:
 1132              		.size	ADC_SAR_CountsTo_uVolts, .-ADC_SAR_CountsTo_uVolts
 1133              		.global	__aeabi_i2f
 1134              		.global	__aeabi_fmul
 1135              		.global	__aeabi_fdiv
 1136              		.section	.text.ADC_SAR_CountsTo_Volts,"ax",%progbits
 1137              		.align	2
 1138              		.global	ADC_SAR_CountsTo_Volts
 1139              		.thumb
 1140              		.thumb_func
 1141              		.type	ADC_SAR_CountsTo_Volts, %function
 1142              	ADC_SAR_CountsTo_Volts:
 1143              	.LFB17:
 806:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 807:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 808:.\Generated_Source\PSoC5/ADC_SAR.c **** /*******************************************************************************
 809:.\Generated_Source\PSoC5/ADC_SAR.c **** * Function Name: ADC_SAR_CountsTo_Volts
 810:.\Generated_Source\PSoC5/ADC_SAR.c **** ********************************************************************************
 811:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 812:.\Generated_Source\PSoC5/ADC_SAR.c **** * Summary:
 813:.\Generated_Source\PSoC5/ADC_SAR.c **** *  Converts the ADC output to volts as a floating-point number.
 814:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 815:.\Generated_Source\PSoC5/ADC_SAR.c **** * Parameters:
 816:.\Generated_Source\PSoC5/ADC_SAR.c **** *  int16 adcCounts: Result from the ADC conversion
 817:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 818:.\Generated_Source\PSoC5/ADC_SAR.c **** * Return:
 819:.\Generated_Source\PSoC5/ADC_SAR.c **** *  float Result in Volts
 820:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 821:.\Generated_Source\PSoC5/ADC_SAR.c **** * Global Variables:
 822:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_offset variable used.
 823:.\Generated_Source\PSoC5/ADC_SAR.c **** *  ADC_SAR_countsPer10Volt used to convert ADC counts to Volts.
 824:.\Generated_Source\PSoC5/ADC_SAR.c **** *
 825:.\Generated_Source\PSoC5/ADC_SAR.c **** *******************************************************************************/
 826:.\Generated_Source\PSoC5/ADC_SAR.c **** float32 ADC_SAR_CountsTo_Volts(int16 adcCounts)
 827:.\Generated_Source\PSoC5/ADC_SAR.c **** {
 1144              		.loc 1 827 0
 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 16
 1147              		@ frame_needed = 1, uses_anonymous_args = 0
 1148 0000 90B5     		push	{r4, r7, lr}
 1149              		.cfi_def_cfa_offset 12
 1150              		.cfi_offset 4, -12
 1151              		.cfi_offset 7, -8
 1152              		.cfi_offset 14, -4
 1153 0002 85B0     		sub	sp, sp, #20
 1154              		.cfi_def_cfa_offset 32
 1155 0004 00AF     		add	r7, sp, #0
 1156              		.cfi_def_cfa_register 7
 1157 0006 0346     		mov	r3, r0
 1158 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 828:.\Generated_Source\PSoC5/ADC_SAR.c ****     float32 volts;
 829:.\Generated_Source\PSoC5/ADC_SAR.c ****     int32 countsPer10Volt;
 830:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 831:.\Generated_Source\PSoC5/ADC_SAR.c ****     if(ADC_SAR_countsPerVolt != 0)
 1159              		.loc 1 831 0
 1160 000a 1A4B     		ldr	r3, .L84
 1161 000c 1B88     		ldrh	r3, [r3]	@ movhi
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 36


 1162 000e 9BB2     		uxth	r3, r3
 1163 0010 002B     		cmp	r3, #0
 1164 0012 09D0     		beq	.L81
 832:.\Generated_Source\PSoC5/ADC_SAR.c ****     {   /* Support obsolete method */
 833:.\Generated_Source\PSoC5/ADC_SAR.c ****         countsPer10Volt = (int32)ADC_SAR_countsPerVolt * 10;
 1165              		.loc 1 833 0
 1166 0014 174B     		ldr	r3, .L84
 1167 0016 1B88     		ldrh	r3, [r3]	@ movhi
 1168 0018 9BB2     		uxth	r3, r3
 1169 001a 1AB2     		sxth	r2, r3
 1170 001c 1346     		mov	r3, r2
 1171 001e 9B00     		lsls	r3, r3, #2
 1172 0020 1344     		add	r3, r3, r2
 1173 0022 5B00     		lsls	r3, r3, #1
 1174 0024 FB60     		str	r3, [r7, #12]
 1175 0026 02E0     		b	.L82
 1176              	.L81:
 834:.\Generated_Source\PSoC5/ADC_SAR.c ****     }
 835:.\Generated_Source\PSoC5/ADC_SAR.c ****     else
 836:.\Generated_Source\PSoC5/ADC_SAR.c ****     {
 837:.\Generated_Source\PSoC5/ADC_SAR.c ****         countsPer10Volt = ADC_SAR_countsPer10Volt;
 1177              		.loc 1 837 0
 1178 0028 134B     		ldr	r3, .L84+4
 1179 002a 1B68     		ldr	r3, [r3]
 1180 002c FB60     		str	r3, [r7, #12]
 1181              	.L82:
 838:.\Generated_Source\PSoC5/ADC_SAR.c ****     }
 839:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 840:.\Generated_Source\PSoC5/ADC_SAR.c ****     /* Subtract ADC offset */
 841:.\Generated_Source\PSoC5/ADC_SAR.c ****     adcCounts -= ADC_SAR_offset;
 1182              		.loc 1 841 0
 1183 002e FA88     		ldrh	r2, [r7, #6]
 1184 0030 124B     		ldr	r3, .L84+8
 1185 0032 1B88     		ldrh	r3, [r3]	@ movhi
 1186 0034 9BB2     		uxth	r3, r3
 1187 0036 9BB2     		uxth	r3, r3
 1188 0038 D31A     		subs	r3, r2, r3
 1189 003a 9BB2     		uxth	r3, r3
 1190 003c FB80     		strh	r3, [r7, #6]	@ movhi
 842:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 843:.\Generated_Source\PSoC5/ADC_SAR.c ****     volts = ((float32)adcCounts * ADC_SAR_10V_COUNTS) / (float32)countsPer10Volt;
 1191              		.loc 1 843 0
 1192 003e B7F90630 		ldrsh	r3, [r7, #6]
 1193 0042 1846     		mov	r0, r3
 1194 0044 FFF7FEFF 		bl	__aeabi_i2f
 1195 0048 0346     		mov	r3, r0
 1196 004a 1846     		mov	r0, r3
 1197 004c 0C49     		ldr	r1, .L84+12
 1198 004e FFF7FEFF 		bl	__aeabi_fmul
 1199 0052 0346     		mov	r3, r0
 1200 0054 1C46     		mov	r4, r3
 1201 0056 F868     		ldr	r0, [r7, #12]
 1202 0058 FFF7FEFF 		bl	__aeabi_i2f
 1203 005c 0346     		mov	r3, r0
 1204 005e 2046     		mov	r0, r4
 1205 0060 1946     		mov	r1, r3
 1206 0062 FFF7FEFF 		bl	__aeabi_fdiv
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 37


 1207 0066 0346     		mov	r3, r0
 1208 0068 BB60     		str	r3, [r7, #8]	@ float
 844:.\Generated_Source\PSoC5/ADC_SAR.c **** 
 845:.\Generated_Source\PSoC5/ADC_SAR.c ****     return( volts );
 1209              		.loc 1 845 0
 1210 006a BB68     		ldr	r3, [r7, #8]	@ float
 846:.\Generated_Source\PSoC5/ADC_SAR.c **** }
 1211              		.loc 1 846 0
 1212 006c 1846     		mov	r0, r3
 1213 006e 1437     		adds	r7, r7, #20
 1214 0070 BD46     		mov	sp, r7
 1215              		@ sp needed
 1216 0072 90BD     		pop	{r4, r7, pc}
 1217              	.L85:
 1218              		.align	2
 1219              	.L84:
 1220 0074 00000000 		.word	ADC_SAR_countsPerVolt
 1221 0078 00000000 		.word	ADC_SAR_countsPer10Volt
 1222 007c 00000000 		.word	ADC_SAR_offset
 1223 0080 00002041 		.word	1092616192
 1224              		.cfi_endproc
 1225              	.LFE17:
 1226              		.size	ADC_SAR_CountsTo_Volts, .-ADC_SAR_CountsTo_Volts
 1227              		.text
 1228              	.Letext0:
 1229              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 1230              		.section	.debug_info,"",%progbits
 1231              	.Ldebug_info0:
 1232 0000 6C040000 		.4byte	0x46c
 1233 0004 0400     		.2byte	0x4
 1234 0006 00000000 		.4byte	.Ldebug_abbrev0
 1235 000a 04       		.byte	0x4
 1236 000b 01       		.uleb128 0x1
 1237 000c 1E020000 		.4byte	.LASF59
 1238 0010 01       		.byte	0x1
 1239 0011 01030000 		.4byte	.LASF60
 1240 0015 76000000 		.4byte	.LASF61
 1241 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1242 001d 00000000 		.4byte	0
 1243 0021 00000000 		.4byte	.Ldebug_line0
 1244 0025 02       		.uleb128 0x2
 1245 0026 04       		.byte	0x4
 1246 0027 05       		.byte	0x5
 1247 0028 696E7400 		.ascii	"int\000"
 1248 002c 03       		.uleb128 0x3
 1249 002d 04       		.byte	0x4
 1250 002e 07       		.byte	0x7
 1251 002f 78010000 		.4byte	.LASF0
 1252 0033 03       		.uleb128 0x3
 1253 0034 01       		.byte	0x1
 1254 0035 06       		.byte	0x6
 1255 0036 6A000000 		.4byte	.LASF1
 1256 003a 03       		.uleb128 0x3
 1257 003b 01       		.byte	0x1
 1258 003c 08       		.byte	0x8
 1259 003d DF020000 		.4byte	.LASF2
 1260 0041 03       		.uleb128 0x3
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 38


 1261 0042 02       		.byte	0x2
 1262 0043 05       		.byte	0x5
 1263 0044 24030000 		.4byte	.LASF3
 1264 0048 03       		.uleb128 0x3
 1265 0049 02       		.byte	0x2
 1266 004a 07       		.byte	0x7
 1267 004b A4010000 		.4byte	.LASF4
 1268 004f 03       		.uleb128 0x3
 1269 0050 04       		.byte	0x4
 1270 0051 05       		.byte	0x5
 1271 0052 C9000000 		.4byte	.LASF5
 1272 0056 03       		.uleb128 0x3
 1273 0057 04       		.byte	0x4
 1274 0058 07       		.byte	0x7
 1275 0059 8C010000 		.4byte	.LASF6
 1276 005d 03       		.uleb128 0x3
 1277 005e 08       		.byte	0x8
 1278 005f 05       		.byte	0x5
 1279 0060 5C000000 		.4byte	.LASF7
 1280 0064 03       		.uleb128 0x3
 1281 0065 08       		.byte	0x8
 1282 0066 07       		.byte	0x7
 1283 0067 37000000 		.4byte	.LASF8
 1284 006b 03       		.uleb128 0x3
 1285 006c 04       		.byte	0x4
 1286 006d 07       		.byte	0x7
 1287 006e ED010000 		.4byte	.LASF9
 1288 0072 03       		.uleb128 0x3
 1289 0073 01       		.byte	0x1
 1290 0074 08       		.byte	0x8
 1291 0075 39030000 		.4byte	.LASF10
 1292 0079 04       		.uleb128 0x4
 1293 007a 00010000 		.4byte	.LASF11
 1294 007e 02       		.byte	0x2
 1295 007f A1       		.byte	0xa1
 1296 0080 3A000000 		.4byte	0x3a
 1297 0084 04       		.uleb128 0x4
 1298 0085 00000000 		.4byte	.LASF12
 1299 0089 02       		.byte	0x2
 1300 008a A2       		.byte	0xa2
 1301 008b 48000000 		.4byte	0x48
 1302 008f 04       		.uleb128 0x4
 1303 0090 0D010000 		.4byte	.LASF13
 1304 0094 02       		.byte	0x2
 1305 0095 A3       		.byte	0xa3
 1306 0096 56000000 		.4byte	0x56
 1307 009a 04       		.uleb128 0x4
 1308 009b B7010000 		.4byte	.LASF14
 1309 009f 02       		.byte	0x2
 1310 00a0 A4       		.byte	0xa4
 1311 00a1 33000000 		.4byte	0x33
 1312 00a5 04       		.uleb128 0x4
 1313 00a6 B4030000 		.4byte	.LASF15
 1314 00aa 02       		.byte	0x2
 1315 00ab A5       		.byte	0xa5
 1316 00ac 41000000 		.4byte	0x41
 1317 00b0 04       		.uleb128 0x4
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 39


 1318 00b1 C3000000 		.4byte	.LASF16
 1319 00b5 02       		.byte	0x2
 1320 00b6 A6       		.byte	0xa6
 1321 00b7 4F000000 		.4byte	0x4f
 1322 00bb 04       		.uleb128 0x4
 1323 00bc E5010000 		.4byte	.LASF17
 1324 00c0 02       		.byte	0x2
 1325 00c1 A7       		.byte	0xa7
 1326 00c2 C6000000 		.4byte	0xc6
 1327 00c6 03       		.uleb128 0x3
 1328 00c7 04       		.byte	0x4
 1329 00c8 04       		.byte	0x4
 1330 00c9 B6020000 		.4byte	.LASF18
 1331 00cd 03       		.uleb128 0x3
 1332 00ce 08       		.byte	0x8
 1333 00cf 04       		.byte	0x4
 1334 00d0 06010000 		.4byte	.LASF19
 1335 00d4 04       		.uleb128 0x4
 1336 00d5 9A020000 		.4byte	.LASF20
 1337 00d9 02       		.byte	0x2
 1338 00da AC       		.byte	0xac
 1339 00db 5D000000 		.4byte	0x5d
 1340 00df 05       		.uleb128 0x5
 1341 00e0 C2020000 		.4byte	.LASF21
 1342 00e4 02       		.byte	0x2
 1343 00e5 4B01     		.2byte	0x14b
 1344 00e7 EB000000 		.4byte	0xeb
 1345 00eb 06       		.uleb128 0x6
 1346 00ec 79000000 		.4byte	0x79
 1347 00f0 05       		.uleb128 0x5
 1348 00f1 FA000000 		.4byte	.LASF22
 1349 00f5 02       		.byte	0x2
 1350 00f6 4C01     		.2byte	0x14c
 1351 00f8 FC000000 		.4byte	0xfc
 1352 00fc 06       		.uleb128 0x6
 1353 00fd 84000000 		.4byte	0x84
 1354 0101 05       		.uleb128 0x5
 1355 0102 D0010000 		.4byte	.LASF23
 1356 0106 02       		.byte	0x2
 1357 0107 4D01     		.2byte	0x14d
 1358 0109 0D010000 		.4byte	0x10d
 1359 010d 06       		.uleb128 0x6
 1360 010e 8F000000 		.4byte	0x8f
 1361 0112 07       		.uleb128 0x7
 1362 0113 4E000000 		.4byte	.LASF24
 1363 0117 01       		.byte	0x1
 1364 0118 4A       		.byte	0x4a
 1365 0119 00000000 		.4byte	.LFB0
 1366 011d 20000000 		.4byte	.LFE0-.LFB0
 1367 0121 01       		.uleb128 0x1
 1368 0122 9C       		.byte	0x9c
 1369 0123 07       		.uleb128 0x7
 1370 0124 C3010000 		.4byte	.LASF25
 1371 0128 01       		.byte	0x1
 1372 0129 6A       		.byte	0x6a
 1373 012a 00000000 		.4byte	.LFB1
 1374 012e 44000000 		.4byte	.LFE1-.LFB1
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 40


 1375 0132 01       		.uleb128 0x1
 1376 0133 9C       		.byte	0x9c
 1377 0134 08       		.uleb128 0x8
 1378 0135 ED030000 		.4byte	.LASF28
 1379 0139 01       		.byte	0x1
 1380 013a 8F       		.byte	0x8f
 1381 013b 00000000 		.4byte	.LFB2
 1382 013f F4000000 		.4byte	.LFE2-.LFB2
 1383 0143 01       		.uleb128 0x1
 1384 0144 9C       		.byte	0x9c
 1385 0145 66010000 		.4byte	0x166
 1386 0149 09       		.uleb128 0x9
 1387 014a E6030000 		.4byte	.LASF26
 1388 014e 01       		.byte	0x1
 1389 014f 91       		.byte	0x91
 1390 0150 79000000 		.4byte	0x79
 1391 0154 02       		.uleb128 0x2
 1392 0155 91       		.byte	0x91
 1393 0156 76       		.sleb128 -10
 1394 0157 09       		.uleb128 0x9
 1395 0158 8B030000 		.4byte	.LASF27
 1396 015c 01       		.byte	0x1
 1397 015d 92       		.byte	0x92
 1398 015e 79000000 		.4byte	0x79
 1399 0162 02       		.uleb128 0x2
 1400 0163 91       		.byte	0x91
 1401 0164 77       		.sleb128 -9
 1402 0165 00       		.byte	0
 1403 0166 08       		.uleb128 0x8
 1404 0167 16000000 		.4byte	.LASF29
 1405 016b 01       		.byte	0x1
 1406 016c F5       		.byte	0xf5
 1407 016d 00000000 		.4byte	.LFB3
 1408 0171 80000000 		.4byte	.LFE3-.LFB3
 1409 0175 01       		.uleb128 0x1
 1410 0176 9C       		.byte	0x9c
 1411 0177 8A010000 		.4byte	0x18a
 1412 017b 09       		.uleb128 0x9
 1413 017c 8B030000 		.4byte	.LASF27
 1414 0180 01       		.byte	0x1
 1415 0181 F7       		.byte	0xf7
 1416 0182 79000000 		.4byte	0x79
 1417 0186 02       		.uleb128 0x2
 1418 0187 91       		.byte	0x91
 1419 0188 77       		.sleb128 -9
 1420 0189 00       		.byte	0
 1421 018a 0A       		.uleb128 0xa
 1422 018b 9C030000 		.4byte	.LASF30
 1423 018f 01       		.byte	0x1
 1424 0190 1F01     		.2byte	0x11f
 1425 0192 00000000 		.4byte	.LFB4
 1426 0196 40000000 		.4byte	.LFE4-.LFB4
 1427 019a 01       		.uleb128 0x1
 1428 019b 9C       		.byte	0x9c
 1429 019c BF010000 		.4byte	0x1bf
 1430 01a0 0B       		.uleb128 0xb
 1431 01a1 BC020000 		.4byte	.LASF32
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 41


 1432 01a5 01       		.byte	0x1
 1433 01a6 1F01     		.2byte	0x11f
 1434 01a8 79000000 		.4byte	0x79
 1435 01ac 02       		.uleb128 0x2
 1436 01ad 91       		.byte	0x91
 1437 01ae 6F       		.sleb128 -17
 1438 01af 0C       		.uleb128 0xc
 1439 01b0 E6030000 		.4byte	.LASF26
 1440 01b4 01       		.byte	0x1
 1441 01b5 2101     		.2byte	0x121
 1442 01b7 79000000 		.4byte	0x79
 1443 01bb 02       		.uleb128 0x2
 1444 01bc 91       		.byte	0x91
 1445 01bd 77       		.sleb128 -9
 1446 01be 00       		.byte	0
 1447 01bf 0D       		.uleb128 0xd
 1448 01c0 A0020000 		.4byte	.LASF31
 1449 01c4 01       		.byte	0x1
 1450 01c5 5101     		.2byte	0x151
 1451 01c7 00000000 		.4byte	.LFB5
 1452 01cb 50000000 		.4byte	.LFE5-.LFB5
 1453 01cf 01       		.uleb128 0x1
 1454 01d0 9C       		.byte	0x9c
 1455 01d1 F4010000 		.4byte	0x1f4
 1456 01d5 0B       		.uleb128 0xb
 1457 01d6 2E030000 		.4byte	.LASF33
 1458 01da 01       		.byte	0x1
 1459 01db 5101     		.2byte	0x151
 1460 01dd 79000000 		.4byte	0x79
 1461 01e1 02       		.uleb128 0x2
 1462 01e2 91       		.byte	0x91
 1463 01e3 6F       		.sleb128 -17
 1464 01e4 0C       		.uleb128 0xc
 1465 01e5 E6030000 		.4byte	.LASF26
 1466 01e9 01       		.byte	0x1
 1467 01ea 5301     		.2byte	0x153
 1468 01ec 79000000 		.4byte	0x79
 1469 01f0 02       		.uleb128 0x2
 1470 01f1 91       		.byte	0x91
 1471 01f2 77       		.sleb128 -9
 1472 01f3 00       		.byte	0
 1473 01f4 0E       		.uleb128 0xe
 1474 01f5 D1030000 		.4byte	.LASF34
 1475 01f9 01       		.byte	0x1
 1476 01fa 8E01     		.2byte	0x18e
 1477 01fc 00000000 		.4byte	.LFB6
 1478 0200 20000000 		.4byte	.LFE6-.LFB6
 1479 0204 01       		.uleb128 0x1
 1480 0205 9C       		.byte	0x9c
 1481 0206 0E       		.uleb128 0xe
 1482 0207 23000000 		.4byte	.LASF35
 1483 020b 01       		.byte	0x1
 1484 020c B001     		.2byte	0x1b0
 1485 020e 00000000 		.4byte	.LFB7
 1486 0212 20000000 		.4byte	.LFE7-.LFB7
 1487 0216 01       		.uleb128 0x1
 1488 0217 9C       		.byte	0x9c
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 42


 1489 0218 0F       		.uleb128 0xf
 1490 0219 73030000 		.4byte	.LASF38
 1491 021d 01       		.byte	0x1
 1492 021e D801     		.2byte	0x1d8
 1493 0220 79000000 		.4byte	0x79
 1494 0224 00000000 		.4byte	.LFB8
 1495 0228 40000000 		.4byte	.LFE8-.LFB8
 1496 022c 01       		.uleb128 0x1
 1497 022d 9C       		.byte	0x9c
 1498 022e 51020000 		.4byte	0x251
 1499 0232 0B       		.uleb128 0xb
 1500 0233 70010000 		.4byte	.LASF36
 1501 0237 01       		.byte	0x1
 1502 0238 D801     		.2byte	0x1d8
 1503 023a 79000000 		.4byte	0x79
 1504 023e 02       		.uleb128 0x2
 1505 023f 91       		.byte	0x91
 1506 0240 6F       		.sleb128 -17
 1507 0241 0C       		.uleb128 0xc
 1508 0242 AD030000 		.4byte	.LASF37
 1509 0246 01       		.byte	0x1
 1510 0247 DA01     		.2byte	0x1da
 1511 0249 79000000 		.4byte	0x79
 1512 024d 02       		.uleb128 0x2
 1513 024e 91       		.byte	0x91
 1514 024f 77       		.sleb128 -9
 1515 0250 00       		.byte	0
 1516 0251 10       		.uleb128 0x10
 1517 0252 3A010000 		.4byte	.LASF62
 1518 0256 01       		.byte	0x1
 1519 0257 0502     		.2byte	0x205
 1520 0259 9A000000 		.4byte	0x9a
 1521 025d 00000000 		.4byte	.LFB9
 1522 0261 2C000000 		.4byte	.LFE9-.LFB9
 1523 0265 01       		.uleb128 0x1
 1524 0266 9C       		.byte	0x9c
 1525 0267 11       		.uleb128 0x11
 1526 0268 ED020000 		.4byte	.LASF39
 1527 026c 01       		.byte	0x1
 1528 026d 2302     		.2byte	0x223
 1529 026f A5000000 		.4byte	0xa5
 1530 0273 00000000 		.4byte	.LFB10
 1531 0277 34000000 		.4byte	.LFE10-.LFB10
 1532 027b 01       		.uleb128 0x1
 1533 027c 9C       		.byte	0x9c
 1534 027d 91020000 		.4byte	0x291
 1535 0281 12       		.uleb128 0x12
 1536 0282 72657300 		.ascii	"res\000"
 1537 0286 01       		.byte	0x1
 1538 0287 2502     		.2byte	0x225
 1539 0289 84000000 		.4byte	0x84
 1540 028d 02       		.uleb128 0x2
 1541 028e 91       		.byte	0x91
 1542 028f 76       		.sleb128 -10
 1543 0290 00       		.byte	0
 1544 0291 0A       		.uleb128 0xa
 1545 0292 4D010000 		.4byte	.LASF40
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 43


 1546 0296 01       		.byte	0x1
 1547 0297 4602     		.2byte	0x246
 1548 0299 00000000 		.4byte	.LFB11
 1549 029d 20000000 		.4byte	.LFE11-.LFB11
 1550 02a1 01       		.uleb128 0x1
 1551 02a2 9C       		.byte	0x9c
 1552 02a3 B7020000 		.4byte	0x2b7
 1553 02a7 0B       		.uleb128 0xb
 1554 02a8 54030000 		.4byte	.LASF41
 1555 02ac 01       		.byte	0x1
 1556 02ad 4602     		.2byte	0x246
 1557 02af A5000000 		.4byte	0xa5
 1558 02b3 02       		.uleb128 0x2
 1559 02b4 91       		.byte	0x91
 1560 02b5 76       		.sleb128 -10
 1561 02b6 00       		.byte	0
 1562 02b7 13       		.uleb128 0x13
 1563 02b8 5F010000 		.4byte	.LASF63
 1564 02bc 01       		.byte	0x1
 1565 02bd 6002     		.2byte	0x260
 1566 02bf 00000000 		.4byte	.LFB12
 1567 02c3 7C000000 		.4byte	.LFE12-.LFB12
 1568 02c7 01       		.uleb128 0x1
 1569 02c8 9C       		.byte	0x9c
 1570 02c9 EC020000 		.4byte	0x2ec
 1571 02cd 0B       		.uleb128 0xb
 1572 02ce 2E030000 		.4byte	.LASF33
 1573 02d2 01       		.byte	0x1
 1574 02d3 6002     		.2byte	0x260
 1575 02d5 79000000 		.4byte	0x79
 1576 02d9 02       		.uleb128 0x2
 1577 02da 91       		.byte	0x91
 1578 02db 6F       		.sleb128 -17
 1579 02dc 0C       		.uleb128 0xc
 1580 02dd 0F000000 		.4byte	.LASF42
 1581 02e1 01       		.byte	0x1
 1582 02e2 6202     		.2byte	0x262
 1583 02e4 B0000000 		.4byte	0xb0
 1584 02e8 02       		.uleb128 0x2
 1585 02e9 91       		.byte	0x91
 1586 02ea 74       		.sleb128 -12
 1587 02eb 00       		.byte	0
 1588 02ec 0A       		.uleb128 0xa
 1589 02ed F6010000 		.4byte	.LASF43
 1590 02f1 01       		.byte	0x1
 1591 02f2 B102     		.2byte	0x2b1
 1592 02f4 00000000 		.4byte	.LFB13
 1593 02f8 2C000000 		.4byte	.LFE13-.LFB13
 1594 02fc 01       		.uleb128 0x1
 1595 02fd 9C       		.byte	0x9c
 1596 02fe 12030000 		.4byte	0x312
 1597 0302 0B       		.uleb128 0xb
 1598 0303 07000000 		.4byte	.LASF44
 1599 0307 01       		.byte	0x1
 1600 0308 B102     		.2byte	0x2b1
 1601 030a A5000000 		.4byte	0xa5
 1602 030e 02       		.uleb128 0x2
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 44


 1603 030f 91       		.byte	0x91
 1604 0310 76       		.sleb128 -10
 1605 0311 00       		.byte	0
 1606 0312 0A       		.uleb128 0xa
 1607 0313 3E030000 		.4byte	.LASF45
 1608 0317 01       		.byte	0x1
 1609 0318 CC02     		.2byte	0x2cc
 1610 031a 00000000 		.4byte	.LFB14
 1611 031e 1C000000 		.4byte	.LFE14-.LFB14
 1612 0322 01       		.uleb128 0x1
 1613 0323 9C       		.byte	0x9c
 1614 0324 38030000 		.4byte	0x338
 1615 0328 0B       		.uleb128 0xb
 1616 0329 07000000 		.4byte	.LASF44
 1617 032d 01       		.byte	0x1
 1618 032e CC02     		.2byte	0x2cc
 1619 0330 B0000000 		.4byte	0xb0
 1620 0334 02       		.uleb128 0x2
 1621 0335 91       		.byte	0x91
 1622 0336 74       		.sleb128 -12
 1623 0337 00       		.byte	0
 1624 0338 11       		.uleb128 0x11
 1625 0339 C7020000 		.4byte	.LASF46
 1626 033d 01       		.byte	0x1
 1627 033e E402     		.2byte	0x2e4
 1628 0340 A5000000 		.4byte	0xa5
 1629 0344 00000000 		.4byte	.LFB15
 1630 0348 8C000000 		.4byte	.LFE15-.LFB15
 1631 034c 01       		.uleb128 0x1
 1632 034d 9C       		.byte	0x9c
 1633 034e 80030000 		.4byte	0x380
 1634 0352 0B       		.uleb128 0xb
 1635 0353 5B030000 		.4byte	.LASF47
 1636 0357 01       		.byte	0x1
 1637 0358 E402     		.2byte	0x2e4
 1638 035a A5000000 		.4byte	0xa5
 1639 035e 02       		.uleb128 0x2
 1640 035f 91       		.byte	0x91
 1641 0360 6E       		.sleb128 -18
 1642 0361 0C       		.uleb128 0xc
 1643 0362 BC010000 		.4byte	.LASF48
 1644 0366 01       		.byte	0x1
 1645 0367 E602     		.2byte	0x2e6
 1646 0369 A5000000 		.4byte	0xa5
 1647 036d 02       		.uleb128 0x2
 1648 036e 91       		.byte	0x91
 1649 036f 72       		.sleb128 -14
 1650 0370 0C       		.uleb128 0xc
 1651 0371 14010000 		.4byte	.LASF49
 1652 0375 01       		.byte	0x1
 1653 0376 E702     		.2byte	0x2e7
 1654 0378 B0000000 		.4byte	0xb0
 1655 037c 02       		.uleb128 0x2
 1656 037d 91       		.byte	0x91
 1657 037e 74       		.sleb128 -12
 1658 037f 00       		.byte	0
 1659 0380 0F       		.uleb128 0xf
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 45


 1660 0381 06020000 		.4byte	.LASF50
 1661 0385 01       		.byte	0x1
 1662 0386 0E03     		.2byte	0x30e
 1663 0388 B0000000 		.4byte	0xb0
 1664 038c 00000000 		.4byte	.LFB16
 1665 0390 94000000 		.4byte	.LFE16-.LFB16
 1666 0394 01       		.uleb128 0x1
 1667 0395 9C       		.byte	0x9c
 1668 0396 C8030000 		.4byte	0x3c8
 1669 039a 0B       		.uleb128 0xb
 1670 039b 5B030000 		.4byte	.LASF47
 1671 039f 01       		.byte	0x1
 1672 03a0 0E03     		.2byte	0x30e
 1673 03a2 A5000000 		.4byte	0xa5
 1674 03a6 02       		.uleb128 0x2
 1675 03a7 91       		.byte	0x91
 1676 03a8 5E       		.sleb128 -34
 1677 03a9 0C       		.uleb128 0xc
 1678 03aa 85010000 		.4byte	.LASF51
 1679 03ae 01       		.byte	0x1
 1680 03af 1103     		.2byte	0x311
 1681 03b1 D4000000 		.4byte	0xd4
 1682 03b5 02       		.uleb128 0x2
 1683 03b6 91       		.byte	0x91
 1684 03b7 60       		.sleb128 -32
 1685 03b8 0C       		.uleb128 0xc
 1686 03b9 14010000 		.4byte	.LASF49
 1687 03bd 01       		.byte	0x1
 1688 03be 1203     		.2byte	0x312
 1689 03c0 B0000000 		.4byte	0xb0
 1690 03c4 02       		.uleb128 0x2
 1691 03c5 91       		.byte	0x91
 1692 03c6 6C       		.sleb128 -20
 1693 03c7 00       		.byte	0
 1694 03c8 0F       		.uleb128 0xf
 1695 03c9 BA030000 		.4byte	.LASF52
 1696 03cd 01       		.byte	0x1
 1697 03ce 3A03     		.2byte	0x33a
 1698 03d0 BB000000 		.4byte	0xbb
 1699 03d4 00000000 		.4byte	.LFB17
 1700 03d8 84000000 		.4byte	.LFE17-.LFB17
 1701 03dc 01       		.uleb128 0x1
 1702 03dd 9C       		.byte	0x9c
 1703 03de 10040000 		.4byte	0x410
 1704 03e2 0B       		.uleb128 0xb
 1705 03e3 5B030000 		.4byte	.LASF47
 1706 03e7 01       		.byte	0x1
 1707 03e8 3A03     		.2byte	0x33a
 1708 03ea A5000000 		.4byte	0xa5
 1709 03ee 02       		.uleb128 0x2
 1710 03ef 91       		.byte	0x91
 1711 03f0 66       		.sleb128 -26
 1712 03f1 0C       		.uleb128 0xc
 1713 03f2 9E010000 		.4byte	.LASF53
 1714 03f6 01       		.byte	0x1
 1715 03f7 3C03     		.2byte	0x33c
 1716 03f9 BB000000 		.4byte	0xbb
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 46


 1717 03fd 02       		.uleb128 0x2
 1718 03fe 91       		.byte	0x91
 1719 03ff 68       		.sleb128 -24
 1720 0400 0C       		.uleb128 0xc
 1721 0401 14010000 		.4byte	.LASF49
 1722 0405 01       		.byte	0x1
 1723 0406 3D03     		.2byte	0x33d
 1724 0408 B0000000 		.4byte	0xb0
 1725 040c 02       		.uleb128 0x2
 1726 040d 91       		.byte	0x91
 1727 040e 6C       		.sleb128 -20
 1728 040f 00       		.byte	0
 1729 0410 14       		.uleb128 0x14
 1730 0411 EA000000 		.4byte	.LASF54
 1731 0415 01       		.byte	0x1
 1732 0416 23       		.byte	0x23
 1733 0417 79000000 		.4byte	0x79
 1734 041b 05       		.uleb128 0x5
 1735 041c 03       		.byte	0x3
 1736 041d 00000000 		.4byte	ADC_SAR_initVar
 1737 0421 14       		.uleb128 0x14
 1738 0422 D6010000 		.4byte	.LASF55
 1739 0426 01       		.byte	0x1
 1740 0427 24       		.byte	0x24
 1741 0428 32040000 		.4byte	0x432
 1742 042c 05       		.uleb128 0x5
 1743 042d 03       		.byte	0x3
 1744 042e 00000000 		.4byte	ADC_SAR_offset
 1745 0432 06       		.uleb128 0x6
 1746 0433 A5000000 		.4byte	0xa5
 1747 0437 14       		.uleb128 0x14
 1748 0438 24010000 		.4byte	.LASF56
 1749 043c 01       		.byte	0x1
 1750 043d 25       		.byte	0x25
 1751 043e 32040000 		.4byte	0x432
 1752 0442 05       		.uleb128 0x5
 1753 0443 03       		.byte	0x3
 1754 0444 00000000 		.4byte	ADC_SAR_countsPerVolt
 1755 0448 14       		.uleb128 0x14
 1756 0449 D2000000 		.4byte	.LASF57
 1757 044d 01       		.byte	0x1
 1758 044e 26       		.byte	0x26
 1759 044f 59040000 		.4byte	0x459
 1760 0453 05       		.uleb128 0x5
 1761 0454 03       		.byte	0x3
 1762 0455 00000000 		.4byte	ADC_SAR_countsPer10Volt
 1763 0459 06       		.uleb128 0x6
 1764 045a B0000000 		.4byte	0xb0
 1765 045e 14       		.uleb128 0x14
 1766 045f 65030000 		.4byte	.LASF58
 1767 0463 01       		.byte	0x1
 1768 0464 27       		.byte	0x27
 1769 0465 32040000 		.4byte	0x432
 1770 0469 05       		.uleb128 0x5
 1771 046a 03       		.byte	0x3
 1772 046b 00000000 		.4byte	ADC_SAR_shift
 1773 046f 00       		.byte	0
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 47


 1774              		.section	.debug_abbrev,"",%progbits
 1775              	.Ldebug_abbrev0:
 1776 0000 01       		.uleb128 0x1
 1777 0001 11       		.uleb128 0x11
 1778 0002 01       		.byte	0x1
 1779 0003 25       		.uleb128 0x25
 1780 0004 0E       		.uleb128 0xe
 1781 0005 13       		.uleb128 0x13
 1782 0006 0B       		.uleb128 0xb
 1783 0007 03       		.uleb128 0x3
 1784 0008 0E       		.uleb128 0xe
 1785 0009 1B       		.uleb128 0x1b
 1786 000a 0E       		.uleb128 0xe
 1787 000b 55       		.uleb128 0x55
 1788 000c 17       		.uleb128 0x17
 1789 000d 11       		.uleb128 0x11
 1790 000e 01       		.uleb128 0x1
 1791 000f 10       		.uleb128 0x10
 1792 0010 17       		.uleb128 0x17
 1793 0011 00       		.byte	0
 1794 0012 00       		.byte	0
 1795 0013 02       		.uleb128 0x2
 1796 0014 24       		.uleb128 0x24
 1797 0015 00       		.byte	0
 1798 0016 0B       		.uleb128 0xb
 1799 0017 0B       		.uleb128 0xb
 1800 0018 3E       		.uleb128 0x3e
 1801 0019 0B       		.uleb128 0xb
 1802 001a 03       		.uleb128 0x3
 1803 001b 08       		.uleb128 0x8
 1804 001c 00       		.byte	0
 1805 001d 00       		.byte	0
 1806 001e 03       		.uleb128 0x3
 1807 001f 24       		.uleb128 0x24
 1808 0020 00       		.byte	0
 1809 0021 0B       		.uleb128 0xb
 1810 0022 0B       		.uleb128 0xb
 1811 0023 3E       		.uleb128 0x3e
 1812 0024 0B       		.uleb128 0xb
 1813 0025 03       		.uleb128 0x3
 1814 0026 0E       		.uleb128 0xe
 1815 0027 00       		.byte	0
 1816 0028 00       		.byte	0
 1817 0029 04       		.uleb128 0x4
 1818 002a 16       		.uleb128 0x16
 1819 002b 00       		.byte	0
 1820 002c 03       		.uleb128 0x3
 1821 002d 0E       		.uleb128 0xe
 1822 002e 3A       		.uleb128 0x3a
 1823 002f 0B       		.uleb128 0xb
 1824 0030 3B       		.uleb128 0x3b
 1825 0031 0B       		.uleb128 0xb
 1826 0032 49       		.uleb128 0x49
 1827 0033 13       		.uleb128 0x13
 1828 0034 00       		.byte	0
 1829 0035 00       		.byte	0
 1830 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 48


 1831 0037 16       		.uleb128 0x16
 1832 0038 00       		.byte	0
 1833 0039 03       		.uleb128 0x3
 1834 003a 0E       		.uleb128 0xe
 1835 003b 3A       		.uleb128 0x3a
 1836 003c 0B       		.uleb128 0xb
 1837 003d 3B       		.uleb128 0x3b
 1838 003e 05       		.uleb128 0x5
 1839 003f 49       		.uleb128 0x49
 1840 0040 13       		.uleb128 0x13
 1841 0041 00       		.byte	0
 1842 0042 00       		.byte	0
 1843 0043 06       		.uleb128 0x6
 1844 0044 35       		.uleb128 0x35
 1845 0045 00       		.byte	0
 1846 0046 49       		.uleb128 0x49
 1847 0047 13       		.uleb128 0x13
 1848 0048 00       		.byte	0
 1849 0049 00       		.byte	0
 1850 004a 07       		.uleb128 0x7
 1851 004b 2E       		.uleb128 0x2e
 1852 004c 00       		.byte	0
 1853 004d 3F       		.uleb128 0x3f
 1854 004e 19       		.uleb128 0x19
 1855 004f 03       		.uleb128 0x3
 1856 0050 0E       		.uleb128 0xe
 1857 0051 3A       		.uleb128 0x3a
 1858 0052 0B       		.uleb128 0xb
 1859 0053 3B       		.uleb128 0x3b
 1860 0054 0B       		.uleb128 0xb
 1861 0055 27       		.uleb128 0x27
 1862 0056 19       		.uleb128 0x19
 1863 0057 11       		.uleb128 0x11
 1864 0058 01       		.uleb128 0x1
 1865 0059 12       		.uleb128 0x12
 1866 005a 06       		.uleb128 0x6
 1867 005b 40       		.uleb128 0x40
 1868 005c 18       		.uleb128 0x18
 1869 005d 9642     		.uleb128 0x2116
 1870 005f 19       		.uleb128 0x19
 1871 0060 00       		.byte	0
 1872 0061 00       		.byte	0
 1873 0062 08       		.uleb128 0x8
 1874 0063 2E       		.uleb128 0x2e
 1875 0064 01       		.byte	0x1
 1876 0065 3F       		.uleb128 0x3f
 1877 0066 19       		.uleb128 0x19
 1878 0067 03       		.uleb128 0x3
 1879 0068 0E       		.uleb128 0xe
 1880 0069 3A       		.uleb128 0x3a
 1881 006a 0B       		.uleb128 0xb
 1882 006b 3B       		.uleb128 0x3b
 1883 006c 0B       		.uleb128 0xb
 1884 006d 27       		.uleb128 0x27
 1885 006e 19       		.uleb128 0x19
 1886 006f 11       		.uleb128 0x11
 1887 0070 01       		.uleb128 0x1
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 49


 1888 0071 12       		.uleb128 0x12
 1889 0072 06       		.uleb128 0x6
 1890 0073 40       		.uleb128 0x40
 1891 0074 18       		.uleb128 0x18
 1892 0075 9642     		.uleb128 0x2116
 1893 0077 19       		.uleb128 0x19
 1894 0078 01       		.uleb128 0x1
 1895 0079 13       		.uleb128 0x13
 1896 007a 00       		.byte	0
 1897 007b 00       		.byte	0
 1898 007c 09       		.uleb128 0x9
 1899 007d 34       		.uleb128 0x34
 1900 007e 00       		.byte	0
 1901 007f 03       		.uleb128 0x3
 1902 0080 0E       		.uleb128 0xe
 1903 0081 3A       		.uleb128 0x3a
 1904 0082 0B       		.uleb128 0xb
 1905 0083 3B       		.uleb128 0x3b
 1906 0084 0B       		.uleb128 0xb
 1907 0085 49       		.uleb128 0x49
 1908 0086 13       		.uleb128 0x13
 1909 0087 02       		.uleb128 0x2
 1910 0088 18       		.uleb128 0x18
 1911 0089 00       		.byte	0
 1912 008a 00       		.byte	0
 1913 008b 0A       		.uleb128 0xa
 1914 008c 2E       		.uleb128 0x2e
 1915 008d 01       		.byte	0x1
 1916 008e 3F       		.uleb128 0x3f
 1917 008f 19       		.uleb128 0x19
 1918 0090 03       		.uleb128 0x3
 1919 0091 0E       		.uleb128 0xe
 1920 0092 3A       		.uleb128 0x3a
 1921 0093 0B       		.uleb128 0xb
 1922 0094 3B       		.uleb128 0x3b
 1923 0095 05       		.uleb128 0x5
 1924 0096 27       		.uleb128 0x27
 1925 0097 19       		.uleb128 0x19
 1926 0098 11       		.uleb128 0x11
 1927 0099 01       		.uleb128 0x1
 1928 009a 12       		.uleb128 0x12
 1929 009b 06       		.uleb128 0x6
 1930 009c 40       		.uleb128 0x40
 1931 009d 18       		.uleb128 0x18
 1932 009e 9742     		.uleb128 0x2117
 1933 00a0 19       		.uleb128 0x19
 1934 00a1 01       		.uleb128 0x1
 1935 00a2 13       		.uleb128 0x13
 1936 00a3 00       		.byte	0
 1937 00a4 00       		.byte	0
 1938 00a5 0B       		.uleb128 0xb
 1939 00a6 05       		.uleb128 0x5
 1940 00a7 00       		.byte	0
 1941 00a8 03       		.uleb128 0x3
 1942 00a9 0E       		.uleb128 0xe
 1943 00aa 3A       		.uleb128 0x3a
 1944 00ab 0B       		.uleb128 0xb
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 50


 1945 00ac 3B       		.uleb128 0x3b
 1946 00ad 05       		.uleb128 0x5
 1947 00ae 49       		.uleb128 0x49
 1948 00af 13       		.uleb128 0x13
 1949 00b0 02       		.uleb128 0x2
 1950 00b1 18       		.uleb128 0x18
 1951 00b2 00       		.byte	0
 1952 00b3 00       		.byte	0
 1953 00b4 0C       		.uleb128 0xc
 1954 00b5 34       		.uleb128 0x34
 1955 00b6 00       		.byte	0
 1956 00b7 03       		.uleb128 0x3
 1957 00b8 0E       		.uleb128 0xe
 1958 00b9 3A       		.uleb128 0x3a
 1959 00ba 0B       		.uleb128 0xb
 1960 00bb 3B       		.uleb128 0x3b
 1961 00bc 05       		.uleb128 0x5
 1962 00bd 49       		.uleb128 0x49
 1963 00be 13       		.uleb128 0x13
 1964 00bf 02       		.uleb128 0x2
 1965 00c0 18       		.uleb128 0x18
 1966 00c1 00       		.byte	0
 1967 00c2 00       		.byte	0
 1968 00c3 0D       		.uleb128 0xd
 1969 00c4 2E       		.uleb128 0x2e
 1970 00c5 01       		.byte	0x1
 1971 00c6 3F       		.uleb128 0x3f
 1972 00c7 19       		.uleb128 0x19
 1973 00c8 03       		.uleb128 0x3
 1974 00c9 0E       		.uleb128 0xe
 1975 00ca 3A       		.uleb128 0x3a
 1976 00cb 0B       		.uleb128 0xb
 1977 00cc 3B       		.uleb128 0x3b
 1978 00cd 05       		.uleb128 0x5
 1979 00ce 27       		.uleb128 0x27
 1980 00cf 19       		.uleb128 0x19
 1981 00d0 11       		.uleb128 0x11
 1982 00d1 01       		.uleb128 0x1
 1983 00d2 12       		.uleb128 0x12
 1984 00d3 06       		.uleb128 0x6
 1985 00d4 40       		.uleb128 0x40
 1986 00d5 18       		.uleb128 0x18
 1987 00d6 9642     		.uleb128 0x2116
 1988 00d8 19       		.uleb128 0x19
 1989 00d9 01       		.uleb128 0x1
 1990 00da 13       		.uleb128 0x13
 1991 00db 00       		.byte	0
 1992 00dc 00       		.byte	0
 1993 00dd 0E       		.uleb128 0xe
 1994 00de 2E       		.uleb128 0x2e
 1995 00df 00       		.byte	0
 1996 00e0 3F       		.uleb128 0x3f
 1997 00e1 19       		.uleb128 0x19
 1998 00e2 03       		.uleb128 0x3
 1999 00e3 0E       		.uleb128 0xe
 2000 00e4 3A       		.uleb128 0x3a
 2001 00e5 0B       		.uleb128 0xb
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 51


 2002 00e6 3B       		.uleb128 0x3b
 2003 00e7 05       		.uleb128 0x5
 2004 00e8 27       		.uleb128 0x27
 2005 00e9 19       		.uleb128 0x19
 2006 00ea 11       		.uleb128 0x11
 2007 00eb 01       		.uleb128 0x1
 2008 00ec 12       		.uleb128 0x12
 2009 00ed 06       		.uleb128 0x6
 2010 00ee 40       		.uleb128 0x40
 2011 00ef 18       		.uleb128 0x18
 2012 00f0 9742     		.uleb128 0x2117
 2013 00f2 19       		.uleb128 0x19
 2014 00f3 00       		.byte	0
 2015 00f4 00       		.byte	0
 2016 00f5 0F       		.uleb128 0xf
 2017 00f6 2E       		.uleb128 0x2e
 2018 00f7 01       		.byte	0x1
 2019 00f8 3F       		.uleb128 0x3f
 2020 00f9 19       		.uleb128 0x19
 2021 00fa 03       		.uleb128 0x3
 2022 00fb 0E       		.uleb128 0xe
 2023 00fc 3A       		.uleb128 0x3a
 2024 00fd 0B       		.uleb128 0xb
 2025 00fe 3B       		.uleb128 0x3b
 2026 00ff 05       		.uleb128 0x5
 2027 0100 27       		.uleb128 0x27
 2028 0101 19       		.uleb128 0x19
 2029 0102 49       		.uleb128 0x49
 2030 0103 13       		.uleb128 0x13
 2031 0104 11       		.uleb128 0x11
 2032 0105 01       		.uleb128 0x1
 2033 0106 12       		.uleb128 0x12
 2034 0107 06       		.uleb128 0x6
 2035 0108 40       		.uleb128 0x40
 2036 0109 18       		.uleb128 0x18
 2037 010a 9642     		.uleb128 0x2116
 2038 010c 19       		.uleb128 0x19
 2039 010d 01       		.uleb128 0x1
 2040 010e 13       		.uleb128 0x13
 2041 010f 00       		.byte	0
 2042 0110 00       		.byte	0
 2043 0111 10       		.uleb128 0x10
 2044 0112 2E       		.uleb128 0x2e
 2045 0113 00       		.byte	0
 2046 0114 3F       		.uleb128 0x3f
 2047 0115 19       		.uleb128 0x19
 2048 0116 03       		.uleb128 0x3
 2049 0117 0E       		.uleb128 0xe
 2050 0118 3A       		.uleb128 0x3a
 2051 0119 0B       		.uleb128 0xb
 2052 011a 3B       		.uleb128 0x3b
 2053 011b 05       		.uleb128 0x5
 2054 011c 27       		.uleb128 0x27
 2055 011d 19       		.uleb128 0x19
 2056 011e 49       		.uleb128 0x49
 2057 011f 13       		.uleb128 0x13
 2058 0120 11       		.uleb128 0x11
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 52


 2059 0121 01       		.uleb128 0x1
 2060 0122 12       		.uleb128 0x12
 2061 0123 06       		.uleb128 0x6
 2062 0124 40       		.uleb128 0x40
 2063 0125 18       		.uleb128 0x18
 2064 0126 9742     		.uleb128 0x2117
 2065 0128 19       		.uleb128 0x19
 2066 0129 00       		.byte	0
 2067 012a 00       		.byte	0
 2068 012b 11       		.uleb128 0x11
 2069 012c 2E       		.uleb128 0x2e
 2070 012d 01       		.byte	0x1
 2071 012e 3F       		.uleb128 0x3f
 2072 012f 19       		.uleb128 0x19
 2073 0130 03       		.uleb128 0x3
 2074 0131 0E       		.uleb128 0xe
 2075 0132 3A       		.uleb128 0x3a
 2076 0133 0B       		.uleb128 0xb
 2077 0134 3B       		.uleb128 0x3b
 2078 0135 05       		.uleb128 0x5
 2079 0136 27       		.uleb128 0x27
 2080 0137 19       		.uleb128 0x19
 2081 0138 49       		.uleb128 0x49
 2082 0139 13       		.uleb128 0x13
 2083 013a 11       		.uleb128 0x11
 2084 013b 01       		.uleb128 0x1
 2085 013c 12       		.uleb128 0x12
 2086 013d 06       		.uleb128 0x6
 2087 013e 40       		.uleb128 0x40
 2088 013f 18       		.uleb128 0x18
 2089 0140 9742     		.uleb128 0x2117
 2090 0142 19       		.uleb128 0x19
 2091 0143 01       		.uleb128 0x1
 2092 0144 13       		.uleb128 0x13
 2093 0145 00       		.byte	0
 2094 0146 00       		.byte	0
 2095 0147 12       		.uleb128 0x12
 2096 0148 34       		.uleb128 0x34
 2097 0149 00       		.byte	0
 2098 014a 03       		.uleb128 0x3
 2099 014b 08       		.uleb128 0x8
 2100 014c 3A       		.uleb128 0x3a
 2101 014d 0B       		.uleb128 0xb
 2102 014e 3B       		.uleb128 0x3b
 2103 014f 05       		.uleb128 0x5
 2104 0150 49       		.uleb128 0x49
 2105 0151 13       		.uleb128 0x13
 2106 0152 02       		.uleb128 0x2
 2107 0153 18       		.uleb128 0x18
 2108 0154 00       		.byte	0
 2109 0155 00       		.byte	0
 2110 0156 13       		.uleb128 0x13
 2111 0157 2E       		.uleb128 0x2e
 2112 0158 01       		.byte	0x1
 2113 0159 03       		.uleb128 0x3
 2114 015a 0E       		.uleb128 0xe
 2115 015b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 53


 2116 015c 0B       		.uleb128 0xb
 2117 015d 3B       		.uleb128 0x3b
 2118 015e 05       		.uleb128 0x5
 2119 015f 27       		.uleb128 0x27
 2120 0160 19       		.uleb128 0x19
 2121 0161 11       		.uleb128 0x11
 2122 0162 01       		.uleb128 0x1
 2123 0163 12       		.uleb128 0x12
 2124 0164 06       		.uleb128 0x6
 2125 0165 40       		.uleb128 0x40
 2126 0166 18       		.uleb128 0x18
 2127 0167 9642     		.uleb128 0x2116
 2128 0169 19       		.uleb128 0x19
 2129 016a 01       		.uleb128 0x1
 2130 016b 13       		.uleb128 0x13
 2131 016c 00       		.byte	0
 2132 016d 00       		.byte	0
 2133 016e 14       		.uleb128 0x14
 2134 016f 34       		.uleb128 0x34
 2135 0170 00       		.byte	0
 2136 0171 03       		.uleb128 0x3
 2137 0172 0E       		.uleb128 0xe
 2138 0173 3A       		.uleb128 0x3a
 2139 0174 0B       		.uleb128 0xb
 2140 0175 3B       		.uleb128 0x3b
 2141 0176 0B       		.uleb128 0xb
 2142 0177 49       		.uleb128 0x49
 2143 0178 13       		.uleb128 0x13
 2144 0179 3F       		.uleb128 0x3f
 2145 017a 19       		.uleb128 0x19
 2146 017b 02       		.uleb128 0x2
 2147 017c 18       		.uleb128 0x18
 2148 017d 00       		.byte	0
 2149 017e 00       		.byte	0
 2150 017f 00       		.byte	0
 2151              		.section	.debug_aranges,"",%progbits
 2152 0000 A4000000 		.4byte	0xa4
 2153 0004 0200     		.2byte	0x2
 2154 0006 00000000 		.4byte	.Ldebug_info0
 2155 000a 04       		.byte	0x4
 2156 000b 00       		.byte	0
 2157 000c 0000     		.2byte	0
 2158 000e 0000     		.2byte	0
 2159 0010 00000000 		.4byte	.LFB0
 2160 0014 20000000 		.4byte	.LFE0-.LFB0
 2161 0018 00000000 		.4byte	.LFB1
 2162 001c 44000000 		.4byte	.LFE1-.LFB1
 2163 0020 00000000 		.4byte	.LFB2
 2164 0024 F4000000 		.4byte	.LFE2-.LFB2
 2165 0028 00000000 		.4byte	.LFB3
 2166 002c 80000000 		.4byte	.LFE3-.LFB3
 2167 0030 00000000 		.4byte	.LFB4
 2168 0034 40000000 		.4byte	.LFE4-.LFB4
 2169 0038 00000000 		.4byte	.LFB5
 2170 003c 50000000 		.4byte	.LFE5-.LFB5
 2171 0040 00000000 		.4byte	.LFB6
 2172 0044 20000000 		.4byte	.LFE6-.LFB6
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 54


 2173 0048 00000000 		.4byte	.LFB7
 2174 004c 20000000 		.4byte	.LFE7-.LFB7
 2175 0050 00000000 		.4byte	.LFB8
 2176 0054 40000000 		.4byte	.LFE8-.LFB8
 2177 0058 00000000 		.4byte	.LFB9
 2178 005c 2C000000 		.4byte	.LFE9-.LFB9
 2179 0060 00000000 		.4byte	.LFB10
 2180 0064 34000000 		.4byte	.LFE10-.LFB10
 2181 0068 00000000 		.4byte	.LFB11
 2182 006c 20000000 		.4byte	.LFE11-.LFB11
 2183 0070 00000000 		.4byte	.LFB12
 2184 0074 7C000000 		.4byte	.LFE12-.LFB12
 2185 0078 00000000 		.4byte	.LFB13
 2186 007c 2C000000 		.4byte	.LFE13-.LFB13
 2187 0080 00000000 		.4byte	.LFB14
 2188 0084 1C000000 		.4byte	.LFE14-.LFB14
 2189 0088 00000000 		.4byte	.LFB15
 2190 008c 8C000000 		.4byte	.LFE15-.LFB15
 2191 0090 00000000 		.4byte	.LFB16
 2192 0094 94000000 		.4byte	.LFE16-.LFB16
 2193 0098 00000000 		.4byte	.LFB17
 2194 009c 84000000 		.4byte	.LFE17-.LFB17
 2195 00a0 00000000 		.4byte	0
 2196 00a4 00000000 		.4byte	0
 2197              		.section	.debug_ranges,"",%progbits
 2198              	.Ldebug_ranges0:
 2199 0000 00000000 		.4byte	.LFB0
 2200 0004 20000000 		.4byte	.LFE0
 2201 0008 00000000 		.4byte	.LFB1
 2202 000c 44000000 		.4byte	.LFE1
 2203 0010 00000000 		.4byte	.LFB2
 2204 0014 F4000000 		.4byte	.LFE2
 2205 0018 00000000 		.4byte	.LFB3
 2206 001c 80000000 		.4byte	.LFE3
 2207 0020 00000000 		.4byte	.LFB4
 2208 0024 40000000 		.4byte	.LFE4
 2209 0028 00000000 		.4byte	.LFB5
 2210 002c 50000000 		.4byte	.LFE5
 2211 0030 00000000 		.4byte	.LFB6
 2212 0034 20000000 		.4byte	.LFE6
 2213 0038 00000000 		.4byte	.LFB7
 2214 003c 20000000 		.4byte	.LFE7
 2215 0040 00000000 		.4byte	.LFB8
 2216 0044 40000000 		.4byte	.LFE8
 2217 0048 00000000 		.4byte	.LFB9
 2218 004c 2C000000 		.4byte	.LFE9
 2219 0050 00000000 		.4byte	.LFB10
 2220 0054 34000000 		.4byte	.LFE10
 2221 0058 00000000 		.4byte	.LFB11
 2222 005c 20000000 		.4byte	.LFE11
 2223 0060 00000000 		.4byte	.LFB12
 2224 0064 7C000000 		.4byte	.LFE12
 2225 0068 00000000 		.4byte	.LFB13
 2226 006c 2C000000 		.4byte	.LFE13
 2227 0070 00000000 		.4byte	.LFB14
 2228 0074 1C000000 		.4byte	.LFE14
 2229 0078 00000000 		.4byte	.LFB15
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 55


 2230 007c 8C000000 		.4byte	.LFE15
 2231 0080 00000000 		.4byte	.LFB16
 2232 0084 94000000 		.4byte	.LFE16
 2233 0088 00000000 		.4byte	.LFB17
 2234 008c 84000000 		.4byte	.LFE17
 2235 0090 00000000 		.4byte	0
 2236 0094 00000000 		.4byte	0
 2237              		.section	.debug_line,"",%progbits
 2238              	.Ldebug_line0:
 2239 0000 FE010000 		.section	.debug_str,"MS",%progbits,1
 2239      02004600 
 2239      00000201 
 2239      FB0E0D00 
 2239      01010101 
 2240              	.LASF12:
 2241 0000 75696E74 		.ascii	"uint16\000"
 2241      313600
 2242              	.LASF44:
 2243 0007 61646347 		.ascii	"adcGain\000"
 2243      61696E00 
 2244              	.LASF42:
 2245 000f 636F756E 		.ascii	"counts\000"
 2245      747300
 2246              	.LASF29:
 2247 0016 4144435F 		.ascii	"ADC_SAR_Stop\000"
 2247      5341525F 
 2247      53746F70 
 2247      00
 2248              	.LASF35:
 2249 0023 4144435F 		.ascii	"ADC_SAR_StopConvert\000"
 2249      5341525F 
 2249      53746F70 
 2249      436F6E76 
 2249      65727400 
 2250              	.LASF8:
 2251 0037 6C6F6E67 		.ascii	"long long unsigned int\000"
 2251      206C6F6E 
 2251      6720756E 
 2251      7369676E 
 2251      65642069 
 2252              	.LASF24:
 2253 004e 4144435F 		.ascii	"ADC_SAR_Start\000"
 2253      5341525F 
 2253      53746172 
 2253      7400
 2254              	.LASF7:
 2255 005c 6C6F6E67 		.ascii	"long long int\000"
 2255      206C6F6E 
 2255      6720696E 
 2255      7400
 2256              	.LASF1:
 2257 006a 7369676E 		.ascii	"signed char\000"
 2257      65642063 
 2257      68617200 
 2258              	.LASF61:
 2259 0076 433A5C55 		.ascii	"C:\\Users\\karunmj\\Desktop\\wongb\\Adaptive Sampli"
 2259      73657273 
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 56


 2259      5C6B6172 
 2259      756E6D6A 
 2259      5C446573 
 2260 00a4 6E675C43 		.ascii	"ng\\Cell Board\\Cell Board.cydsn\000"
 2260      656C6C20 
 2260      426F6172 
 2260      645C4365 
 2260      6C6C2042 
 2261              	.LASF16:
 2262 00c3 696E7433 		.ascii	"int32\000"
 2262      3200
 2263              	.LASF5:
 2264 00c9 6C6F6E67 		.ascii	"long int\000"
 2264      20696E74 
 2264      00
 2265              	.LASF57:
 2266 00d2 4144435F 		.ascii	"ADC_SAR_countsPer10Volt\000"
 2266      5341525F 
 2266      636F756E 
 2266      74735065 
 2266      72313056 
 2267              	.LASF54:
 2268 00ea 4144435F 		.ascii	"ADC_SAR_initVar\000"
 2268      5341525F 
 2268      696E6974 
 2268      56617200 
 2269              	.LASF22:
 2270 00fa 72656731 		.ascii	"reg16\000"
 2270      3600
 2271              	.LASF11:
 2272 0100 75696E74 		.ascii	"uint8\000"
 2272      3800
 2273              	.LASF19:
 2274 0106 646F7562 		.ascii	"double\000"
 2274      6C6500
 2275              	.LASF13:
 2276 010d 75696E74 		.ascii	"uint32\000"
 2276      333200
 2277              	.LASF49:
 2278 0114 636F756E 		.ascii	"countsPer10Volt\000"
 2278      74735065 
 2278      72313056 
 2278      6F6C7400 
 2279              	.LASF56:
 2280 0124 4144435F 		.ascii	"ADC_SAR_countsPerVolt\000"
 2280      5341525F 
 2280      636F756E 
 2280      74735065 
 2280      72566F6C 
 2281              	.LASF62:
 2282 013a 4144435F 		.ascii	"ADC_SAR_GetResult8\000"
 2282      5341525F 
 2282      47657452 
 2282      6573756C 
 2282      743800
 2283              	.LASF40:
 2284 014d 4144435F 		.ascii	"ADC_SAR_SetOffset\000"
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 57


 2284      5341525F 
 2284      5365744F 
 2284      66667365 
 2284      7400
 2285              	.LASF63:
 2286 015f 4144435F 		.ascii	"ADC_SAR_CalcGain\000"
 2286      5341525F 
 2286      43616C63 
 2286      4761696E 
 2286      00
 2287              	.LASF36:
 2288 0170 7265744D 		.ascii	"retMode\000"
 2288      6F646500 
 2289              	.LASF0:
 2290 0178 756E7369 		.ascii	"unsigned int\000"
 2290      676E6564 
 2290      20696E74 
 2290      00
 2291              	.LASF51:
 2292 0185 75566F6C 		.ascii	"uVolts\000"
 2292      747300
 2293              	.LASF6:
 2294 018c 6C6F6E67 		.ascii	"long unsigned int\000"
 2294      20756E73 
 2294      69676E65 
 2294      6420696E 
 2294      7400
 2295              	.LASF53:
 2296 019e 766F6C74 		.ascii	"volts\000"
 2296      7300
 2297              	.LASF4:
 2298 01a4 73686F72 		.ascii	"short unsigned int\000"
 2298      7420756E 
 2298      7369676E 
 2298      65642069 
 2298      6E7400
 2299              	.LASF14:
 2300 01b7 696E7438 		.ascii	"int8\000"
 2300      00
 2301              	.LASF48:
 2302 01bc 6D566F6C 		.ascii	"mVolts\000"
 2302      747300
 2303              	.LASF25:
 2304 01c3 4144435F 		.ascii	"ADC_SAR_Init\000"
 2304      5341525F 
 2304      496E6974 
 2304      00
 2305              	.LASF23:
 2306 01d0 72656733 		.ascii	"reg32\000"
 2306      3200
 2307              	.LASF55:
 2308 01d6 4144435F 		.ascii	"ADC_SAR_offset\000"
 2308      5341525F 
 2308      6F666673 
 2308      657400
 2309              	.LASF17:
 2310 01e5 666C6F61 		.ascii	"float32\000"
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 58


 2310      74333200 
 2311              	.LASF9:
 2312 01ed 73697A65 		.ascii	"sizetype\000"
 2312      74797065 
 2312      00
 2313              	.LASF43:
 2314 01f6 4144435F 		.ascii	"ADC_SAR_SetGain\000"
 2314      5341525F 
 2314      53657447 
 2314      61696E00 
 2315              	.LASF50:
 2316 0206 4144435F 		.ascii	"ADC_SAR_CountsTo_uVolts\000"
 2316      5341525F 
 2316      436F756E 
 2316      7473546F 
 2316      5F75566F 
 2317              	.LASF59:
 2318 021e 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2318      4320342E 
 2318      382E3420 
 2318      32303134 
 2318      30353236 
 2319 0251 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m3 -mthumb -g -O"
 2319      20726576 
 2319      6973696F 
 2319      6E203231 
 2319      31333538 
 2320 0284 30202D66 		.ascii	"0 -ffunction-sections\000"
 2320      66756E63 
 2320      74696F6E 
 2320      2D736563 
 2320      74696F6E 
 2321              	.LASF20:
 2322 029a 696E7436 		.ascii	"int64\000"
 2322      3400
 2323              	.LASF31:
 2324 02a0 4144435F 		.ascii	"ADC_SAR_SetResolution\000"
 2324      5341525F 
 2324      53657452 
 2324      65736F6C 
 2324      7574696F 
 2325              	.LASF18:
 2326 02b6 666C6F61 		.ascii	"float\000"
 2326      7400
 2327              	.LASF32:
 2328 02bc 706F7765 		.ascii	"power\000"
 2328      7200
 2329              	.LASF21:
 2330 02c2 72656738 		.ascii	"reg8\000"
 2330      00
 2331              	.LASF46:
 2332 02c7 4144435F 		.ascii	"ADC_SAR_CountsTo_mVolts\000"
 2332      5341525F 
 2332      436F756E 
 2332      7473546F 
 2332      5F6D566F 
 2333              	.LASF2:
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 59


 2334 02df 756E7369 		.ascii	"unsigned char\000"
 2334      676E6564 
 2334      20636861 
 2334      7200
 2335              	.LASF39:
 2336 02ed 4144435F 		.ascii	"ADC_SAR_GetResult16\000"
 2336      5341525F 
 2336      47657452 
 2336      6573756C 
 2336      74313600 
 2337              	.LASF60:
 2338 0301 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\ADC_SAR.c\000"
 2338      6E657261 
 2338      7465645F 
 2338      536F7572 
 2338      63655C50 
 2339              	.LASF3:
 2340 0324 73686F72 		.ascii	"short int\000"
 2340      7420696E 
 2340      7400
 2341              	.LASF33:
 2342 032e 7265736F 		.ascii	"resolution\000"
 2342      6C757469 
 2342      6F6E00
 2343              	.LASF10:
 2344 0339 63686172 		.ascii	"char\000"
 2344      00
 2345              	.LASF45:
 2346 033e 4144435F 		.ascii	"ADC_SAR_SetScaledGain\000"
 2346      5341525F 
 2346      53657453 
 2346      63616C65 
 2346      64476169 
 2347              	.LASF41:
 2348 0354 6F666673 		.ascii	"offset\000"
 2348      657400
 2349              	.LASF47:
 2350 035b 61646343 		.ascii	"adcCounts\000"
 2350      6F756E74 
 2350      7300
 2351              	.LASF58:
 2352 0365 4144435F 		.ascii	"ADC_SAR_shift\000"
 2352      5341525F 
 2352      73686966 
 2352      7400
 2353              	.LASF38:
 2354 0373 4144435F 		.ascii	"ADC_SAR_IsEndConversion\000"
 2354      5341525F 
 2354      4973456E 
 2354      64436F6E 
 2354      76657273 
 2355              	.LASF27:
 2356 038b 656E6162 		.ascii	"enableInterrupts\000"
 2356      6C65496E 
 2356      74657272 
 2356      75707473 
 2356      00
ARM GAS  C:\Users\karunmj\AppData\Local\Temp\cc0v4Ipz.s 			page 60


 2357              	.LASF30:
 2358 039c 4144435F 		.ascii	"ADC_SAR_SetPower\000"
 2358      5341525F 
 2358      53657450 
 2358      6F776572 
 2358      00
 2359              	.LASF37:
 2360 03ad 73746174 		.ascii	"status\000"
 2360      757300
 2361              	.LASF15:
 2362 03b4 696E7431 		.ascii	"int16\000"
 2362      3600
 2363              	.LASF52:
 2364 03ba 4144435F 		.ascii	"ADC_SAR_CountsTo_Volts\000"
 2364      5341525F 
 2364      436F756E 
 2364      7473546F 
 2364      5F566F6C 
 2365              	.LASF34:
 2366 03d1 4144435F 		.ascii	"ADC_SAR_StartConvert\000"
 2366      5341525F 
 2366      53746172 
 2366      74436F6E 
 2366      76657274 
 2367              	.LASF26:
 2368 03e6 746D7052 		.ascii	"tmpReg\000"
 2368      656700
 2369              	.LASF28:
 2370 03ed 4144435F 		.ascii	"ADC_SAR_Enable\000"
 2370      5341525F 
 2370      456E6162 
 2370      6C6500
 2371              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
