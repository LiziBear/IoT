ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"modem.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	modem_state,1,1
  19              		.global	lock_acquired
  20              		.bss
  21              		.type	lock_acquired, %object
  22              		.size	lock_acquired, 1
  23              	lock_acquired:
  24 0000 00       		.space	1
  25              		.global	ready
  26              		.type	ready, %object
  27              		.size	ready, 1
  28              	ready:
  29 0001 00       		.space	1
  30              		.global	uart_string_index
  31              		.align	1
  32              		.type	uart_string_index, %object
  33              		.size	uart_string_index, 2
  34              	uart_string_index:
  35 0002 0000     		.space	2
  36              		.comm	feed_id,4,4
  37              		.global	uart_received_string
  38              		.align	2
  39              		.type	uart_received_string, %object
  40              		.size	uart_received_string, 1000
  41              	uart_received_string:
  42 0004 00000000 		.space	1000
  42      00000000 
  42      00000000 
  42      00000000 
  42      00000000 
  43              		.comm	api_key,4,4
  44              		.global	modem_apn
  45              		.section	.rodata
  46              		.align	2
  47              	.LC0:
  48 0000 6570632E 		.ascii	"epc.tmobile.com\000"
  48      746D6F62 
  48      696C652E 
  48      636F6D00 
  49              		.data
  50              		.align	2
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 2


  51              		.type	modem_apn, %object
  52              		.size	modem_apn, 4
  53              	modem_apn:
  54 0000 00000000 		.word	.LC0
  55              		.section	.text.modem_set_api_feed,"ax",%progbits
  56              		.align	2
  57              		.global	modem_set_api_feed
  58              		.thumb
  59              		.thumb_func
  60              		.type	modem_set_api_feed, %function
  61              	modem_set_api_feed:
  62              	.LFB56:
  63              		.file 1 ".\\modem.c"
   1:.\modem.c     **** ///* ========================================
   2:.\modem.c     **** // *
   3:.\modem.c     **** // * Copyright YOUR COMPANY, THE YEAR
   4:.\modem.c     **** // * All Rights Reserved
   5:.\modem.c     **** // * UNPUBLISHED, LICENSED SOFTWARE.
   6:.\modem.c     **** // *
   7:.\modem.c     **** // * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:.\modem.c     **** // * WHICH IS THE PROPERTY OF your company.
   9:.\modem.c     **** // *
  10:.\modem.c     **** // * ========================================
  11:.\modem.c     **** //*/
  12:.\modem.c     **** //
  13:.\modem.c     **** 
  14:.\modem.c     **** #include <project.h>
  15:.\modem.c     **** #include <stdio.h>
  16:.\modem.c     **** #include <string.h>
  17:.\modem.c     **** #include "modem.h"
  18:.\modem.c     **** #include "packet.h"
  19:.\modem.c     **** //#include "debug.h" TODO: ACCOUNT FOR THIS
  20:.\modem.c     **** 
  21:.\modem.c     **** // declare varaiables
  22:.\modem.c     **** uint8  modem_state, lock_acquired = 0u, ready = 0u;
  23:.\modem.c     **** uint16 uart_string_index = 0u;
  24:.\modem.c     **** uint32 feed_id;
  25:.\modem.c     **** char   uart_received_string[1000] = {0}, *api_key;
  26:.\modem.c     **** char*  modem_apn = "epc.tmobile.com";
  27:.\modem.c     **** 
  28:.\modem.c     **** 
  29:.\modem.c     **** 
  30:.\modem.c     **** // prototype modem interrupt
  31:.\modem.c     **** CY_ISR_PROTO(Telit_isr_rx);
  32:.\modem.c     **** void uart_string_reset();
  33:.\modem.c     **** 
  34:.\modem.c     **** uint8 modem_set_api_feed(uint32 id, char* key){
  64              		.loc 1 34 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 8
  67              		@ frame_needed = 1, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  69 0000 80B4     		push	{r7}
  70              		.cfi_def_cfa_offset 4
  71              		.cfi_offset 7, -4
  72 0002 83B0     		sub	sp, sp, #12
  73              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 3


  74 0004 00AF     		add	r7, sp, #0
  75              		.cfi_def_cfa_register 7
  76 0006 7860     		str	r0, [r7, #4]
  77 0008 3960     		str	r1, [r7]
  35:.\modem.c     ****     feed_id = id;
  78              		.loc 1 35 0
  79 000a 064A     		ldr	r2, .L3
  80 000c 7B68     		ldr	r3, [r7, #4]
  81 000e 1360     		str	r3, [r2]
  36:.\modem.c     ****     api_key = key;
  82              		.loc 1 36 0
  83 0010 054A     		ldr	r2, .L3+4
  84 0012 3B68     		ldr	r3, [r7]
  85 0014 1360     		str	r3, [r2]
  37:.\modem.c     ****     return 1u;
  86              		.loc 1 37 0
  87 0016 0123     		movs	r3, #1
  38:.\modem.c     **** }
  88              		.loc 1 38 0
  89 0018 1846     		mov	r0, r3
  90 001a 0C37     		adds	r7, r7, #12
  91              		.cfi_def_cfa_offset 4
  92 001c BD46     		mov	sp, r7
  93              		.cfi_def_cfa_register 13
  94              		@ sp needed
  95 001e 5DF8047B 		ldr	r7, [sp], #4
  96              		.cfi_restore 7
  97              		.cfi_def_cfa_offset 0
  98 0022 7047     		bx	lr
  99              	.L4:
 100              		.align	2
 101              	.L3:
 102 0024 00000000 		.word	feed_id
 103 0028 00000000 		.word	api_key
 104              		.cfi_endproc
 105              	.LFE56:
 106              		.size	modem_set_api_feed, .-modem_set_api_feed
 107              		.section	.text.modem_shutdown,"ax",%progbits
 108              		.align	2
 109              		.global	modem_shutdown
 110              		.thumb
 111              		.thumb_func
 112              		.type	modem_shutdown, %function
 113              	modem_shutdown:
 114              	.LFB57:
  39:.\modem.c     **** 
  40:.\modem.c     **** // startup sequence to power on the modem, start modem
  41:.\modem.c     **** // components and prepare for sending/receiving messages
  42:.\modem.c     **** // over the network
  43:.\modem.c     **** /*uint8   modem_connect_with_retries(uint8 retries) {
  44:.\modem.c     **** 	uint8 iter = 0;
  45:.\modem.c     **** 	
  46:.\modem.c     **** 	while( iter < retries) {
  47:.\modem.c     **** 
  48:.\modem.c     **** 		hardware_specific_modem_setup();
  49:.\modem.c     **** 		
  50:.\modem.c     **** 		if ( modem_connect() ) {
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 4


  51:.\modem.c     **** 			return 1u;
  52:.\modem.c     **** 		}
  53:.\modem.c     **** 		else {
  54:.\modem.c     **** 			modem_reset();
  55:.\modem.c     **** 		}
  56:.\modem.c     **** 		
  57:.\modem.c     **** 		iter++;
  58:.\modem.c     **** 	}
  59:.\modem.c     **** 	
  60:.\modem.c     **** 	// Timed out -- Failed to connect
  61:.\modem.c     **** 	return 0u;
  62:.\modem.c     **** }*/
  63:.\modem.c     **** 
  64:.\modem.c     **** // shutdown sequence to stop modem components
  65:.\modem.c     **** // and power down the modem
  66:.\modem.c     **** uint8 	modem_shutdown() {
 115              		.loc 1 66 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119 0000 80B5     		push	{r7, lr}
 120              		.cfi_def_cfa_offset 8
 121              		.cfi_offset 7, -8
 122              		.cfi_offset 14, -4
 123 0002 00AF     		add	r7, sp, #0
 124              		.cfi_def_cfa_register 7
  67:.\modem.c     **** 	if (modem_power_off()){
 125              		.loc 1 67 0
 126 0004 FFF7FEFF 		bl	modem_power_off
 127 0008 0346     		mov	r3, r0
 128 000a 002B     		cmp	r3, #0
 129 000c 01D0     		beq	.L6
  68:.\modem.c     **** 		return 1u;	
 130              		.loc 1 68 0
 131 000e 0123     		movs	r3, #1
 132 0010 00E0     		b	.L7
 133              	.L6:
  69:.\modem.c     **** 	}
  70:.\modem.c     **** 	
  71:.\modem.c     **** 	return 0u;
 134              		.loc 1 71 0
 135 0012 0023     		movs	r3, #0
 136              	.L7:
  72:.\modem.c     **** }
 137              		.loc 1 72 0
 138 0014 1846     		mov	r0, r3
 139 0016 80BD     		pop	{r7, pc}
 140              		.cfi_endproc
 141              	.LFE57:
 142              		.size	modem_shutdown, .-modem_shutdown
 143              		.section	.text.modem_start,"ax",%progbits
 144              		.align	2
 145              		.global	modem_start
 146              		.thumb
 147              		.thumb_func
 148              		.type	modem_start, %function
 149              	modem_start:
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 5


 150              	.LFB58:
  73:.\modem.c     **** 
  74:.\modem.c     **** // initialize modem
  75:.\modem.c     **** void modem_start(){
 151              		.loc 1 75 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 1, uses_anonymous_args = 0
 155 0000 80B5     		push	{r7, lr}
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 7, -8
 158              		.cfi_offset 14, -4
 159 0002 00AF     		add	r7, sp, #0
 160              		.cfi_def_cfa_register 7
  76:.\modem.c     ****     Telit_UART_Start();
 161              		.loc 1 76 0
 162 0004 FFF7FEFF 		bl	Telit_UART_Start
  77:.\modem.c     ****     //Telit_PWR_Write(0u);        // 0u Enables power to cell module
  78:.\modem.c     **** 	Telit_ON_Write(1u);			// Prep modem for "push button"
 163              		.loc 1 78 0
 164 0008 0120     		movs	r0, #1
 165 000a FFF7FEFF 		bl	Telit_ON_Write
  79:.\modem.c     **** 	Telit_RST_Write(1u);		// Prep modem for "push button"
 166              		.loc 1 79 0
 167 000e 0120     		movs	r0, #1
 168 0010 FFF7FEFF 		bl	Telit_RST_Write
  80:.\modem.c     ****     Telit_isr_rx_StartEx(Telit_isr_rx);
 169              		.loc 1 80 0
 170 0014 0648     		ldr	r0, .L9
 171 0016 FFF7FEFF 		bl	Telit_isr_rx_StartEx
  81:.\modem.c     ****     modem_state = MODEM_STATE_OFF;
 172              		.loc 1 81 0
 173 001a 064B     		ldr	r3, .L9+4
 174 001c 0022     		movs	r2, #0
 175 001e 1A70     		strb	r2, [r3]
  82:.\modem.c     **** 	modem_power_on();
 176              		.loc 1 82 0
 177 0020 FFF7FEFF 		bl	modem_power_on
  83:.\modem.c     **** 	modem_set_flow_control(0u);	
 178              		.loc 1 83 0
 179 0024 0020     		movs	r0, #0
 180 0026 FFF7FEFF 		bl	modem_set_flow_control
  84:.\modem.c     **** 	hardware_specific_modem_setup();
 181              		.loc 1 84 0
 182 002a FFF7FEFF 		bl	hardware_specific_modem_setup
  85:.\modem.c     **** }
 183              		.loc 1 85 0
 184 002e 80BD     		pop	{r7, pc}
 185              	.L10:
 186              		.align	2
 187              	.L9:
 188 0030 00000000 		.word	Telit_isr_rx
 189 0034 00000000 		.word	modem_state
 190              		.cfi_endproc
 191              	.LFE58:
 192              		.size	modem_start, .-modem_start
 193              		.section	.text.modem_stop,"ax",%progbits
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 6


 194              		.align	2
 195              		.global	modem_stop
 196              		.thumb
 197              		.thumb_func
 198              		.type	modem_stop, %function
 199              	modem_stop:
 200              	.LFB59:
  86:.\modem.c     **** 
  87:.\modem.c     **** // deinitialize modem
  88:.\modem.c     **** void modem_stop(){
 201              		.loc 1 88 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 1, uses_anonymous_args = 0
 205 0000 80B5     		push	{r7, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 7, -8
 208              		.cfi_offset 14, -4
 209 0002 00AF     		add	r7, sp, #0
 210              		.cfi_def_cfa_register 7
  89:.\modem.c     ****     Telit_UART_Stop();
 211              		.loc 1 89 0
 212 0004 FFF7FEFF 		bl	Telit_UART_Stop
  90:.\modem.c     ****     //Telit_PWR_Write(0u);        // 0u Enables power to cell module
  91:.\modem.c     **** 	Telit_ON_Write(0u);			// Save energy by pulling down "push button"
 213              		.loc 1 91 0
 214 0008 0020     		movs	r0, #0
 215 000a FFF7FEFF 		bl	Telit_ON_Write
  92:.\modem.c     **** 	Telit_RST_Write(0u);		// Save energy by pulling down "push button"
 216              		.loc 1 92 0
 217 000e 0020     		movs	r0, #0
 218 0010 FFF7FEFF 		bl	Telit_RST_Write
  93:.\modem.c     ****     Telit_isr_rx_Stop();
 219              		.loc 1 93 0
 220 0014 FFF7FEFF 		bl	Telit_isr_rx_Stop
  94:.\modem.c     ****     modem_state = MODEM_STATE_OFF;
 221              		.loc 1 94 0
 222 0018 014B     		ldr	r3, .L12
 223 001a 0022     		movs	r2, #0
 224 001c 1A70     		strb	r2, [r3]
  95:.\modem.c     **** }
 225              		.loc 1 95 0
 226 001e 80BD     		pop	{r7, pc}
 227              	.L13:
 228              		.align	2
 229              	.L12:
 230 0020 00000000 		.word	modem_state
 231              		.cfi_endproc
 232              	.LFE59:
 233              		.size	modem_stop, .-modem_stop
 234              		.section	.text.at_write_command,"ax",%progbits
 235              		.align	2
 236              		.global	at_write_command
 237              		.thumb
 238              		.thumb_func
 239              		.type	at_write_command, %function
 240              	at_write_command:
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 7


 241              	.LFB60:
  96:.\modem.c     **** 
  97:.\modem.c     **** // send at-command to modem
  98:.\modem.c     **** uint8 at_write_command(char* uart_string, char* expected_response, uint32 uart_timeout){
 242              		.loc 1 98 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 40
 245              		@ frame_needed = 1, uses_anonymous_args = 0
 246 0000 80B5     		push	{r7, lr}
 247              		.cfi_def_cfa_offset 8
 248              		.cfi_offset 7, -8
 249              		.cfi_offset 14, -4
 250 0002 8AB0     		sub	sp, sp, #40
 251              		.cfi_def_cfa_offset 48
 252 0004 00AF     		add	r7, sp, #0
 253              		.cfi_def_cfa_register 7
 254 0006 F860     		str	r0, [r7, #12]
 255 0008 B960     		str	r1, [r7, #8]
 256 000a 7A60     		str	r2, [r7, #4]
  99:.\modem.c     ****     uint8 response = 0u;
 257              		.loc 1 99 0
 258 000c 0023     		movs	r3, #0
 259 000e 87F82730 		strb	r3, [r7, #39]
 100:.\modem.c     ****     uint32 i = 0u, delay = 100u, interval = uart_timeout/delay;
 260              		.loc 1 100 0
 261 0012 0023     		movs	r3, #0
 262 0014 3B62     		str	r3, [r7, #32]
 263 0016 6423     		movs	r3, #100
 264 0018 FB61     		str	r3, [r7, #28]
 265 001a 7A68     		ldr	r2, [r7, #4]
 266 001c FB69     		ldr	r3, [r7, #28]
 267 001e B2FBF3F3 		udiv	r3, r2, r3
 268 0022 BB61     		str	r3, [r7, #24]
 101:.\modem.c     ****     
 102:.\modem.c     ****     uart_string_reset();
 269              		.loc 1 102 0
 270 0024 FFF7FEFF 		bl	uart_string_reset
 103:.\modem.c     ****     Telit_UART_PutString(uart_string);//Telit_UART_PutString("AT\r");
 271              		.loc 1 103 0
 272 0028 F868     		ldr	r0, [r7, #12]
 273 002a FFF7FEFF 		bl	Telit_UART_PutString
 104:.\modem.c     ****     
 105:.\modem.c     ****     if( strcmp(expected_response, "") != 0){
 274              		.loc 1 105 0
 275 002e BB68     		ldr	r3, [r7, #8]
 276 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 277 0032 002B     		cmp	r3, #0
 278 0034 18D0     		beq	.L15
 106:.\modem.c     ****         for(i=0;i<interval;i++){
 279              		.loc 1 106 0
 280 0036 0023     		movs	r3, #0
 281 0038 3B62     		str	r3, [r7, #32]
 282 003a 11E0     		b	.L16
 283              	.L18:
 284              	.LBB2:
 107:.\modem.c     ****             char* valid = strstr(uart_received_string, expected_response);
 285              		.loc 1 107 0
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 8


 286 003c 0D48     		ldr	r0, .L20
 287 003e B968     		ldr	r1, [r7, #8]
 288 0040 FFF7FEFF 		bl	strstr
 289 0044 7861     		str	r0, [r7, #20]
 108:.\modem.c     ****             if(valid != NULL){
 290              		.loc 1 108 0
 291 0046 7B69     		ldr	r3, [r7, #20]
 292 0048 002B     		cmp	r3, #0
 293 004a 03D0     		beq	.L17
 109:.\modem.c     ****                 response = 1u;
 294              		.loc 1 109 0
 295 004c 0123     		movs	r3, #1
 296 004e 87F82730 		strb	r3, [r7, #39]
 110:.\modem.c     ****                 break;
 297              		.loc 1 110 0
 298 0052 09E0     		b	.L15
 299              	.L17:
 111:.\modem.c     ****             }
 112:.\modem.c     ****             CyDelay(delay);
 300              		.loc 1 112 0 discriminator 2
 301 0054 F869     		ldr	r0, [r7, #28]
 302 0056 FFF7FEFF 		bl	CyDelay
 303              	.LBE2:
 106:.\modem.c     ****             char* valid = strstr(uart_received_string, expected_response);
 304              		.loc 1 106 0 discriminator 2
 305 005a 3B6A     		ldr	r3, [r7, #32]
 306 005c 0133     		adds	r3, r3, #1
 307 005e 3B62     		str	r3, [r7, #32]
 308              	.L16:
 106:.\modem.c     ****             char* valid = strstr(uart_received_string, expected_response);
 309              		.loc 1 106 0 is_stmt 0 discriminator 1
 310 0060 3A6A     		ldr	r2, [r7, #32]
 311 0062 BB69     		ldr	r3, [r7, #24]
 312 0064 9A42     		cmp	r2, r3
 313 0066 E9D3     		bcc	.L18
 314              	.L15:
 113:.\modem.c     ****         }
 114:.\modem.c     ****     }
 115:.\modem.c     ****     
 116:.\modem.c     ****     return response;
 315              		.loc 1 116 0 is_stmt 1
 316 0068 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 117:.\modem.c     **** }
 317              		.loc 1 117 0
 318 006c 1846     		mov	r0, r3
 319 006e 2837     		adds	r7, r7, #40
 320              		.cfi_def_cfa_offset 8
 321 0070 BD46     		mov	sp, r7
 322              		.cfi_def_cfa_register 13
 323              		@ sp needed
 324 0072 80BD     		pop	{r7, pc}
 325              	.L21:
 326              		.align	2
 327              	.L20:
 328 0074 00000000 		.word	uart_received_string
 329              		.cfi_endproc
 330              	.LFE60:
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 9


 331              		.size	at_write_command, .-at_write_command
 332              		.section	.rodata
 333              		.align	2
 334              	.LC1:
 335 0010 41540D00 		.ascii	"AT\015\000"
 336              		.align	2
 337              	.LC2:
 338 0014 4F4B00   		.ascii	"OK\000"
 339              		.section	.text.modem_power_on,"ax",%progbits
 340              		.align	2
 341              		.global	modem_power_on
 342              		.thumb
 343              		.thumb_func
 344              		.type	modem_power_on, %function
 345              	modem_power_on:
 346              	.LFB61:
 118:.\modem.c     **** 
 119:.\modem.c     **** uint8 modem_power_on(){
 347              		.loc 1 119 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 1, uses_anonymous_args = 0
 351 0000 80B5     		push	{r7, lr}
 352              		.cfi_def_cfa_offset 8
 353              		.cfi_offset 7, -8
 354              		.cfi_offset 14, -4
 355 0002 00AF     		add	r7, sp, #0
 356              		.cfi_def_cfa_register 7
 120:.\modem.c     **** 
 121:.\modem.c     ****     if (modem_state != MODEM_STATE_OFF) {
 357              		.loc 1 121 0
 358 0004 154B     		ldr	r3, .L26
 359 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 360 0008 002B     		cmp	r3, #0
 361 000a 01D0     		beq	.L23
 122:.\modem.c     ****         // Modem is already on
 123:.\modem.c     ****         return 1u;
 362              		.loc 1 123 0
 363 000c 0123     		movs	r3, #1
 364 000e 23E0     		b	.L24
 365              	.L23:
 124:.\modem.c     ****     }
 125:.\modem.c     ****     
 126:.\modem.c     ****     // Set ON, PWR pins low
 127:.\modem.c     ****     Telit_ON_Write(0u); 
 366              		.loc 1 127 0
 367 0010 0020     		movs	r0, #0
 368 0012 FFF7FEFF 		bl	Telit_ON_Write
 128:.\modem.c     ****     Telit_RST_Write(0u);
 369              		.loc 1 128 0
 370 0016 0020     		movs	r0, #0
 371 0018 FFF7FEFF 		bl	Telit_RST_Write
 129:.\modem.c     ****     
 130:.\modem.c     ****     // Provide power to Telit module
 131:.\modem.c     ****     //Telit_PWR_Write(0u); //provide power to modem
 132:.\modem.c     ****     
 133:.\modem.c     ****     // "Push" the ON button for 2 seconds
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 10


 134:.\modem.c     ****     Telit_ON_Write(1u); 
 372              		.loc 1 134 0
 373 001c 0120     		movs	r0, #1
 374 001e FFF7FEFF 		bl	Telit_ON_Write
 135:.\modem.c     ****     CyDelay(2000u);     // the pad ON# must be tied low for at least 1 second and then released.
 375              		.loc 1 135 0
 376 0022 4FF4FA60 		mov	r0, #2000
 377 0026 FFF7FEFF 		bl	CyDelay
 136:.\modem.c     ****     //CyDelay(1500u);     // At least 3 seconds if VBAT < 3.4 for GC 864
 137:.\modem.c     ****     Telit_ON_Write(0u); 
 378              		.loc 1 137 0
 379 002a 0020     		movs	r0, #0
 380 002c FFF7FEFF 		bl	Telit_ON_Write
 138:.\modem.c     ****     
 139:.\modem.c     ****     CyDelay(5000u);  
 381              		.loc 1 139 0
 382 0030 41F28830 		movw	r0, #5000
 383 0034 FFF7FEFF 		bl	CyDelay
 140:.\modem.c     ****     /* NOTE:
 141:.\modem.c     ****         "To get the desirable stability, 
 142:.\modem.c     ****         CC864-DUAL needs at least 10 seconds 
 143:.\modem.c     ****         after the PWRMON goes HIGH.*/
 144:.\modem.c     **** 	
 145:.\modem.c     **** 	if(at_write_command("AT\r","OK",1000u) == 1){    
 384              		.loc 1 145 0
 385 0038 0948     		ldr	r0, .L26+4
 386 003a 0A49     		ldr	r1, .L26+8
 387 003c 4FF47A72 		mov	r2, #1000
 388 0040 FFF7FEFF 		bl	at_write_command
 389 0044 0346     		mov	r3, r0
 390 0046 012B     		cmp	r3, #1
 391 0048 05D1     		bne	.L25
 146:.\modem.c     ****         modem_state = MODEM_STATE_IDLE;
 392              		.loc 1 146 0
 393 004a 044B     		ldr	r3, .L26
 394 004c 0122     		movs	r2, #1
 395 004e 1A70     		strb	r2, [r3]
 147:.\modem.c     ****         return modem_state;
 396              		.loc 1 147 0
 397 0050 024B     		ldr	r3, .L26
 398 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 399 0054 00E0     		b	.L24
 400              	.L25:
 148:.\modem.c     ****     }	
 149:.\modem.c     **** 	
 150:.\modem.c     **** 	// Failed to turn on
 151:.\modem.c     ****     return 0u;
 401              		.loc 1 151 0
 402 0056 0023     		movs	r3, #0
 403              	.L24:
 152:.\modem.c     **** }
 404              		.loc 1 152 0
 405 0058 1846     		mov	r0, r3
 406 005a 80BD     		pop	{r7, pc}
 407              	.L27:
 408              		.align	2
 409              	.L26:
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 11


 410 005c 00000000 		.word	modem_state
 411 0060 10000000 		.word	.LC1
 412 0064 14000000 		.word	.LC2
 413              		.cfi_endproc
 414              	.LFE61:
 415              		.size	modem_power_on, .-modem_power_on
 416              		.section	.text.modem_power_off,"ax",%progbits
 417              		.align	2
 418              		.global	modem_power_off
 419              		.thumb
 420              		.thumb_func
 421              		.type	modem_power_off, %function
 422              	modem_power_off:
 423              	.LFB62:
 153:.\modem.c     **** 
 154:.\modem.c     **** uint8 modem_power_off(){
 424              		.loc 1 154 0
 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 0
 427              		@ frame_needed = 1, uses_anonymous_args = 0
 428 0000 80B5     		push	{r7, lr}
 429              		.cfi_def_cfa_offset 8
 430              		.cfi_offset 7, -8
 431              		.cfi_offset 14, -4
 432 0002 00AF     		add	r7, sp, #0
 433              		.cfi_def_cfa_register 7
 155:.\modem.c     **** 	
 156:.\modem.c     ****     if (modem_state == MODEM_STATE_OFF) {
 434              		.loc 1 156 0
 435 0004 0F4B     		ldr	r3, .L31
 436 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 437 0008 002B     		cmp	r3, #0
 438 000a 01D1     		bne	.L29
 157:.\modem.c     ****         // Modem is already off
 158:.\modem.c     ****         return 1u;
 439              		.loc 1 158 0
 440 000c 0123     		movs	r3, #1
 441 000e 16E0     		b	.L30
 442              	.L29:
 159:.\modem.c     ****     }
 160:.\modem.c     **** 	
 161:.\modem.c     ****     // Try to disconnect the modem.  
 162:.\modem.c     ****     // Continue whether or not disconnect is successful
 163:.\modem.c     ****     modem_disconnect();
 443              		.loc 1 163 0
 444 0010 FFF7FEFF 		bl	modem_disconnect
 164:.\modem.c     ****     
 165:.\modem.c     ****     // "Push" the ON button for 
 166:.\modem.c     ****     Telit_ON_Write(1u);
 445              		.loc 1 166 0
 446 0014 0120     		movs	r0, #1
 447 0016 FFF7FEFF 		bl	Telit_ON_Write
 167:.\modem.c     ****     CyDelay(2500u);  // To turn the CC864-DUAL off, the ON/OFF Pin must be tied low for 2 second an
 448              		.loc 1 167 0
 449 001a 40F6C410 		movw	r0, #2500
 450 001e FFF7FEFF 		bl	CyDelay
 168:.\modem.c     ****     Telit_ON_Write(0u);
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 12


 451              		.loc 1 168 0
 452 0022 0020     		movs	r0, #0
 453 0024 FFF7FEFF 		bl	Telit_ON_Write
 169:.\modem.c     ****     
 170:.\modem.c     ****     CyDelay(5000u); 
 454              		.loc 1 170 0
 455 0028 41F28830 		movw	r0, #5000
 456 002c FFF7FEFF 		bl	CyDelay
 171:.\modem.c     ****     /* CyDelay(5000u); // wait for module to turn off
 172:.\modem.c     ****         "Normally it will be above 10 seconds later from releasing
 173:.\modem.c     ****         ON/OFF# and DTE should monitor the status of PWRMON to see the
 174:.\modem.c     ****         actual power off."  */
 175:.\modem.c     ****     
 176:.\modem.c     ****     // Book keeping 
 177:.\modem.c     ****     //Telit_PWR_Write(1u); // Cut power to modem; 1u Disables power to the modem
 178:.\modem.c     ****     Telit_RST_Write(0u); // Make sure the RESET "button" is not pressed
 457              		.loc 1 178 0
 458 0030 0020     		movs	r0, #0
 459 0032 FFF7FEFF 		bl	Telit_RST_Write
 179:.\modem.c     ****     
 180:.\modem.c     ****     modem_state = MODEM_STATE_OFF;
 460              		.loc 1 180 0
 461 0036 034B     		ldr	r3, .L31
 462 0038 0022     		movs	r2, #0
 463 003a 1A70     		strb	r2, [r3]
 181:.\modem.c     ****     return 1u;
 464              		.loc 1 181 0
 465 003c 0123     		movs	r3, #1
 466              	.L30:
 182:.\modem.c     **** }
 467              		.loc 1 182 0
 468 003e 1846     		mov	r0, r3
 469 0040 80BD     		pop	{r7, pc}
 470              	.L32:
 471 0042 00BF     		.align	2
 472              	.L31:
 473 0044 00000000 		.word	modem_state
 474              		.cfi_endproc
 475              	.LFE62:
 476              		.size	modem_power_off, .-modem_power_off
 477              		.section	.text.modem_reset,"ax",%progbits
 478              		.align	2
 479              		.global	modem_reset
 480              		.thumb
 481              		.thumb_func
 482              		.type	modem_reset, %function
 483              	modem_reset:
 484              	.LFB63:
 183:.\modem.c     **** 
 184:.\modem.c     **** uint8 modem_reset(){
 485              		.loc 1 184 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 1, uses_anonymous_args = 0
 489 0000 80B5     		push	{r7, lr}
 490              		.cfi_def_cfa_offset 8
 491              		.cfi_offset 7, -8
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 13


 492              		.cfi_offset 14, -4
 493 0002 00AF     		add	r7, sp, #0
 494              		.cfi_def_cfa_register 7
 185:.\modem.c     ****     if (modem_state != MODEM_STATE_OFF) { // The modem is idle/ready (powered on)
 495              		.loc 1 185 0
 496 0004 0C4B     		ldr	r3, .L36
 497 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 498 0008 002B     		cmp	r3, #0
 499 000a 10D0     		beq	.L34
 186:.\modem.c     ****         
 187:.\modem.c     ****         Telit_RST_Write(1u);
 500              		.loc 1 187 0
 501 000c 0120     		movs	r0, #1
 502 000e FFF7FEFF 		bl	Telit_RST_Write
 188:.\modem.c     ****         CyDelay(500u);  //   To reset and to reboot the module, 
 503              		.loc 1 188 0
 504 0012 4FF4FA70 		mov	r0, #500
 505 0016 FFF7FEFF 		bl	CyDelay
 189:.\modem.c     ****                         // the RESET pin must be tied low for at least 200 milliseconds and then re
 190:.\modem.c     ****         Telit_RST_Write(0u);
 506              		.loc 1 190 0
 507 001a 0020     		movs	r0, #0
 508 001c FFF7FEFF 		bl	Telit_RST_Write
 191:.\modem.c     ****         
 192:.\modem.c     ****         CyDelay(5000u); //CyDelay(5000u);
 509              		.loc 1 192 0
 510 0020 41F28830 		movw	r0, #5000
 511 0024 FFF7FEFF 		bl	CyDelay
 193:.\modem.c     ****         modem_state = MODEM_STATE_IDLE;
 512              		.loc 1 193 0
 513 0028 034B     		ldr	r3, .L36
 514 002a 0122     		movs	r2, #1
 515 002c 1A70     		strb	r2, [r3]
 516              	.L34:
 194:.\modem.c     ****     }
 195:.\modem.c     ****     return modem_state;
 517              		.loc 1 195 0
 518 002e 024B     		ldr	r3, .L36
 519 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 196:.\modem.c     **** }
 520              		.loc 1 196 0
 521 0032 1846     		mov	r0, r3
 522 0034 80BD     		pop	{r7, pc}
 523              	.L37:
 524 0036 00BF     		.align	2
 525              	.L36:
 526 0038 00000000 		.word	modem_state
 527              		.cfi_endproc
 528              	.LFE63:
 529              		.size	modem_reset, .-modem_reset
 530              		.section	.text.hardware_specific_modem_setup,"ax",%progbits
 531              		.align	2
 532              		.global	hardware_specific_modem_setup
 533              		.thumb
 534              		.thumb_func
 535              		.type	hardware_specific_modem_setup, %function
 536              	hardware_specific_modem_setup:
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 14


 537              	.LFB64:
 197:.\modem.c     **** 
 198:.\modem.c     **** uint8 hardware_specific_modem_setup() {
 538              		.loc 1 198 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 1, uses_anonymous_args = 0
 542 0000 80B5     		push	{r7, lr}
 543              		.cfi_def_cfa_offset 8
 544              		.cfi_offset 7, -8
 545              		.cfi_offset 14, -4
 546 0002 00AF     		add	r7, sp, #0
 547              		.cfi_def_cfa_register 7
 199:.\modem.c     **** /* Initialize configurations for the modem */
 200:.\modem.c     **** 	// Set Error Reports to verbose mode
 201:.\modem.c     **** 	if (modem_set_error_reports(2u) != 1u) {
 548              		.loc 1 201 0
 549 0004 0220     		movs	r0, #2
 550 0006 FFF7FEFF 		bl	modem_set_error_reports
 551 000a 0346     		mov	r3, r0
 552 000c 012B     		cmp	r3, #1
 553 000e 01D0     		beq	.L39
 202:.\modem.c     **** 		return 0u;
 554              		.loc 1 202 0
 555 0010 0023     		movs	r3, #0
 556 0012 00E0     		b	.L40
 557              	.L39:
 203:.\modem.c     **** 	}
 204:.\modem.c     **** 	
 205:.\modem.c     **** 	/* UNCOMMENT when using GC864 instead of CC864
 206:.\modem.c     **** 	// Set the APN for GC864-Dual-V2
 207:.\modem.c     **** 	if (modem_set_apn() != 1u) {
 208:.\modem.c     **** 		return 0u;
 209:.\modem.c     **** 	}
 210:.\modem.c     **** 		
 211:.\modem.c     **** 	// Select the band for GC864-Dual-V2
 212:.\modem.c     **** 	if (modem_set_band(1u) != 1u) {
 213:.\modem.c     **** 		return 0u;
 214:.\modem.c     **** 	}
 215:.\modem.c     **** 	*/
 216:.\modem.c     **** 	
 217:.\modem.c     **** 	return 1u;
 558              		.loc 1 217 0
 559 0014 0123     		movs	r3, #1
 560              	.L40:
 218:.\modem.c     **** }
 561              		.loc 1 218 0
 562 0016 1846     		mov	r0, r3
 563 0018 80BD     		pop	{r7, pc}
 564              		.cfi_endproc
 565              	.LFE64:
 566              		.size	hardware_specific_modem_setup, .-hardware_specific_modem_setup
 567 001a 00BF     		.section	.rodata
 568 0017 00       		.align	2
 569              	.LC3:
 570 0018 41542353 		.ascii	"AT#SGACT=1,1\015\000"
 570      47414354 
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 15


 570      3D312C31 
 570      0D00
 571              		.section	.text.modem_connect,"ax",%progbits
 572              		.align	2
 573              		.global	modem_connect
 574              		.thumb
 575              		.thumb_func
 576              		.type	modem_connect, %function
 577              	modem_connect:
 578              	.LFB65:
 219:.\modem.c     **** 
 220:.\modem.c     **** uint8 modem_connect(){
 579              		.loc 1 220 0
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 8
 582              		@ frame_needed = 1, uses_anonymous_args = 0
 583 0000 80B5     		push	{r7, lr}
 584              		.cfi_def_cfa_offset 8
 585              		.cfi_offset 7, -8
 586              		.cfi_offset 14, -4
 587 0002 82B0     		sub	sp, sp, #8
 588              		.cfi_def_cfa_offset 16
 589 0004 00AF     		add	r7, sp, #0
 590              		.cfi_def_cfa_register 7
 221:.\modem.c     **** /* Establish modem connection with the network */	
 222:.\modem.c     **** 	uint8 count = 0u, network_status = 0u;
 591              		.loc 1 222 0
 592 0006 0023     		movs	r3, #0
 593 0008 FB71     		strb	r3, [r7, #7]
 594 000a 0023     		movs	r3, #0
 595 000c BB71     		strb	r3, [r7, #6]
 223:.\modem.c     **** 	
 224:.\modem.c     **** 	// Check if modem is registered on home network
 225:.\modem.c     **** 	// Buffer should return +CREG: 0,1
 226:.\modem.c     **** 	// modem_check_network returns 1u if buffer contains ",1"
 227:.\modem.c     **** 	network_status = modem_check_network();
 596              		.loc 1 227 0
 597 000e FFF7FEFF 		bl	modem_check_network
 598 0012 0346     		mov	r3, r0
 599 0014 BB71     		strb	r3, [r7, #6]
 228:.\modem.c     **** 	while(network_status == 0u && count < MAX_CONN_ATTEMPTS) {
 600              		.loc 1 228 0
 601 0016 0AE0     		b	.L42
 602              	.L44:
 229:.\modem.c     **** 
 230:.\modem.c     **** 		network_status = modem_check_network();
 603              		.loc 1 230 0
 604 0018 FFF7FEFF 		bl	modem_check_network
 605 001c 0346     		mov	r3, r0
 606 001e BB71     		strb	r3, [r7, #6]
 231:.\modem.c     **** 		CyDelay(3000u);
 607              		.loc 1 231 0
 608 0020 40F6B830 		movw	r0, #3000
 609 0024 FFF7FEFF 		bl	CyDelay
 232:.\modem.c     **** 		count++;
 610              		.loc 1 232 0
 611 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 16


 612 002a 0133     		adds	r3, r3, #1
 613 002c FB71     		strb	r3, [r7, #7]
 614              	.L42:
 228:.\modem.c     **** 
 615              		.loc 1 228 0
 616 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 617 0030 002B     		cmp	r3, #0
 618 0032 02D1     		bne	.L43
 228:.\modem.c     **** 
 619              		.loc 1 228 0 is_stmt 0 discriminator 1
 620 0034 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 621 0036 042B     		cmp	r3, #4
 622 0038 EED9     		bls	.L44
 623              	.L43:
 233:.\modem.c     **** 	}
 234:.\modem.c     **** 	
 235:.\modem.c     **** 	if (network_status == 1u) {		
 624              		.loc 1 235 0 is_stmt 1
 625 003a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 626 003c 012B     		cmp	r3, #1
 627 003e 0ED1     		bne	.L45
 236:.\modem.c     **** 		// Try to activate network context
 237:.\modem.c     **** 		// #SGACT1,<0,1> is for multisocket
 238:.\modem.c     **** 		// For now, use #GPRS, which is from Enhanced Easy IP commands
 239:.\modem.c     **** 	    if(at_write_command("AT#SGACT=1,1\r","OK",5000u) == 1){    
 628              		.loc 1 239 0
 629 0040 0A48     		ldr	r0, .L47
 630 0042 0B49     		ldr	r1, .L47+4
 631 0044 41F28832 		movw	r2, #5000
 632 0048 FFF7FEFF 		bl	at_write_command
 633 004c 0346     		mov	r3, r0
 634 004e 012B     		cmp	r3, #1
 635 0050 05D1     		bne	.L45
 240:.\modem.c     **** 		//if(at_write_command("AT#GPRS=1\r","OK",5000u) == 1){    // Used for GSM (ATT, TMobile)
 241:.\modem.c     **** 	        modem_state = MODEM_STATE_READY;
 636              		.loc 1 241 0
 637 0052 084B     		ldr	r3, .L47+8
 638 0054 0322     		movs	r2, #3
 639 0056 1A70     		strb	r2, [r3]
 242:.\modem.c     **** 	        return modem_state;
 640              		.loc 1 242 0
 641 0058 064B     		ldr	r3, .L47+8
 642 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 643 005c 01E0     		b	.L46
 644              	.L45:
 243:.\modem.c     **** 	    }		
 244:.\modem.c     **** 	}
 245:.\modem.c     **** 	
 246:.\modem.c     ****     /* Write to SD Card debugger
 247:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 248:.\modem.c     ****     */
 249:.\modem.c     **** 
 250:.\modem.c     ****     return modem_state;
 645              		.loc 1 250 0
 646 005e 054B     		ldr	r3, .L47+8
 647 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 648              	.L46:
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 17


 251:.\modem.c     ****     
 252:.\modem.c     **** /*
 253:.\modem.c     ****     if(at_write_command("AT+CREG=1\r","OK",5000u)){
 254:.\modem.c     ****         if(at_write_command("AT+CREG?\r","OK",5000u)){
 255:.\modem.c     ****         //if(!at_write_command("AT#CGPADDR=1\r","\"",5000u)){
 256:.\modem.c     ****             if(at_write_command("AT#SGACT=1,1\r","OK",30000u)){
 257:.\modem.c     ****                 modem_state = MODEM_STATE_READY;
 258:.\modem.c     ****                 //return 1u; // connected to network
 259:.\modem.c     ****             }
 260:.\modem.c     ****             else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 261:.\modem.c     ****         }
 262:.\modem.c     ****        else debug_write("(AT#CGPADDR=1) No IP Address Exists.");   Returns IP address.. should be c
 263:.\modem.c     ****     }
 264:.\modem.c     ****     else debug_write("(AT+CREG=1) Could not register to network."); CREG reports registration statu
 265:.\modem.c     ****     
 266:.\modem.c     ****     return 0u;
 267:.\modem.c     **** */
 268:.\modem.c     **** /*
 269:.\modem.c     ****     at_write_command("AT+CSQ\r","OK",5000u); // get signal strength
 270:.\modem.c     ****     
 271:.\modem.c     ****     if (!at_write_command("AT+CREG=1\r","OK",5000u)) { // look for network
 272:.\modem.c     ****         debug_write("(AT+CREG=1) Could not register to network.");
 273:.\modem.c     ****     }
 274:.\modem.c     ****     
 275:.\modem.c     ****     at_write_command("AT#SCFG=1,1,0,0,1200,0\r","OK",5000u); // config parameter
 276:.\modem.c     ****     
 277:.\modem.c     ****     if (at_write_command("AT#CGPADDR=1\r","OK",5000u)) {// check if ip address exists
 278:.\modem.c     ****         debug_write("(AT#CGPADDR=1) No IP Address Exists.");    
 279:.\modem.c     ****     }
 280:.\modem.c     ****     
 281:.\modem.c     ****     at_write_command("AT#SGACT?","OK",30000u);
 282:.\modem.c     ****     
 283:.\modem.c     ****     uint8 success  = at_write_command("AT#SGACT=1,1\r","OK",30000u); // This command should return 
 284:.\modem.c     ****     //success = at_write_command("AT#SD=1,0,50000,\"141.212.136.222\",0,0,1\r","OK",5000u); // conn
 285:.\modem.c     ****     
 286:.\modem.c     ****     if (!success) {
 287:.\modem.c     ****         debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 288:.\modem.c     ****     }
 289:.\modem.c     ****     
 290:.\modem.c     ****     return success;
 291:.\modem.c     ****     */
 292:.\modem.c     ****     
 293:.\modem.c     **** }
 649              		.loc 1 293 0
 650 0062 1846     		mov	r0, r3
 651 0064 0837     		adds	r7, r7, #8
 652              		.cfi_def_cfa_offset 8
 653 0066 BD46     		mov	sp, r7
 654              		.cfi_def_cfa_register 13
 655              		@ sp needed
 656 0068 80BD     		pop	{r7, pc}
 657              	.L48:
 658 006a 00BF     		.align	2
 659              	.L47:
 660 006c 18000000 		.word	.LC3
 661 0070 14000000 		.word	.LC2
 662 0074 00000000 		.word	modem_state
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 18


 663              		.cfi_endproc
 664              	.LFE65:
 665              		.size	modem_connect, .-modem_connect
 666              		.section	.rodata
 667 0026 0000     		.align	2
 668              	.LC4:
 669 0028 41542353 		.ascii	"AT#SGACT=1,0\015\000"
 669      47414354 
 669      3D312C30 
 669      0D00
 670              		.section	.text.modem_disconnect,"ax",%progbits
 671              		.align	2
 672              		.global	modem_disconnect
 673              		.thumb
 674              		.thumb_func
 675              		.type	modem_disconnect, %function
 676              	modem_disconnect:
 677              	.LFB66:
 294:.\modem.c     **** 
 295:.\modem.c     **** uint8 modem_disconnect(){
 678              		.loc 1 295 0
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 0
 681              		@ frame_needed = 1, uses_anonymous_args = 0
 682 0000 80B5     		push	{r7, lr}
 683              		.cfi_def_cfa_offset 8
 684              		.cfi_offset 7, -8
 685              		.cfi_offset 14, -4
 686 0002 00AF     		add	r7, sp, #0
 687              		.cfi_def_cfa_register 7
 296:.\modem.c     **** /* Close modem connection to network */
 297:.\modem.c     **** 	
 298:.\modem.c     ****     // Proceed if modem is not connected to network.  Otherwise, try to disconnect from the network
 299:.\modem.c     ****     if(modem_state != MODEM_STATE_READY) {
 688              		.loc 1 299 0
 689 0004 094B     		ldr	r3, .L52
 690 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 691 0008 032B     		cmp	r3, #3
 692 000a 0CD0     		beq	.L50
 300:.\modem.c     ****         /* Can use this statement instead for GSM (ATT, TMobile)
 301:.\modem.c     **** 		return (at_write_command("AT#GPRS=0\r","OK",5000u) == 1u);
 302:.\modem.c     **** 		*/
 303:.\modem.c     **** 		return (at_write_command("AT#SGACT=1,0\r","OK",5000u) == 1u);
 693              		.loc 1 303 0
 694 000c 0848     		ldr	r0, .L52+4
 695 000e 0949     		ldr	r1, .L52+8
 696 0010 41F28832 		movw	r2, #5000
 697 0014 FFF7FEFF 		bl	at_write_command
 698 0018 0346     		mov	r3, r0
 699 001a 012B     		cmp	r3, #1
 700 001c 0CBF     		ite	eq
 701 001e 0123     		moveq	r3, #1
 702 0020 0023     		movne	r3, #0
 703 0022 DBB2     		uxtb	r3, r3
 704 0024 00E0     		b	.L51
 705              	.L50:
 304:.\modem.c     **** 			
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 19


 305:.\modem.c     **** 		/*
 306:.\modem.c     **** 		if(at_write_command("AT#SH=1","OK",10000u) == 1){
 307:.\modem.c     ****             if(at_write_command("AT#SGACT=1,0","OK",10000u) == 1){
 308:.\modem.c     ****                 modem_state = MODEM_STATE_IDLE;
 309:.\modem.c     ****                 return 1u;
 310:.\modem.c     ****             }
 311:.\modem.c     ****             // Write to SD Card debugger
 312:.\modem.c     ****             else {
 313:.\modem.c     ****                 debug_write("(AT#SGACT=1,0) Could not disconnect.");
 314:.\modem.c     ****             }
 315:.\modem.c     ****             
 316:.\modem.c     ****         }
 317:.\modem.c     ****         Write to SD Card debugger
 318:.\modem.c     ****         else {
 319:.\modem.c     ****             debug_write("(AT#SH=1) Could not close socket.");
 320:.\modem.c     ****         }
 321:.\modem.c     ****         */
 322:.\modem.c     ****     }
 323:.\modem.c     ****     /* Write to SD Card debugger
 324:.\modem.c     ****     else {
 325:.\modem.c     ****         if (modem_state == MODEM_STATE_OFF) {
 326:.\modem.c     ****             debug_write( "(modem_state != MODEM_STATE_READY) modem_state = MODEM_STATE_OFF" );
 327:.\modem.c     ****         }
 328:.\modem.c     ****         else if (modem_state == MODEM_STATE_IDLE) {
 329:.\modem.c     ****             debug_write( "(modem_state != MODEM_STATE_READY) modem_state = MODEM_STATE_IDLE" );
 330:.\modem.c     ****         }
 331:.\modem.c     ****     }
 332:.\modem.c     ****     */
 333:.\modem.c     ****     return 0u; // failed to disconnect
 706              		.loc 1 333 0
 707 0026 0023     		movs	r3, #0
 708              	.L51:
 334:.\modem.c     **** }
 709              		.loc 1 334 0
 710 0028 1846     		mov	r0, r3
 711 002a 80BD     		pop	{r7, pc}
 712              	.L53:
 713              		.align	2
 714              	.L52:
 715 002c 00000000 		.word	modem_state
 716 0030 28000000 		.word	.LC4
 717 0034 14000000 		.word	.LC2
 718              		.cfi_endproc
 719              	.LFE66:
 720              		.size	modem_disconnect, .-modem_disconnect
 721              		.section	.rodata
 722 0036 0000     		.align	2
 723              	.LC5:
 724 0038 41542B43 		.ascii	"AT+CGDCONT=1,\"IP\",\"%s\"\015\000"
 724      4744434F 
 724      4E543D31 
 724      2C224950 
 724      222C2225 
 725              		.section	.text.modem_set_apn,"ax",%progbits
 726              		.align	2
 727              		.global	modem_set_apn
 728              		.thumb
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 20


 729              		.thumb_func
 730              		.type	modem_set_apn, %function
 731              	modem_set_apn:
 732              	.LFB67:
 335:.\modem.c     **** 
 336:.\modem.c     **** uint8 modem_set_apn() {
 733              		.loc 1 336 0
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 104
 736              		@ frame_needed = 1, uses_anonymous_args = 0
 737 0000 80B5     		push	{r7, lr}
 738              		.cfi_def_cfa_offset 8
 739              		.cfi_offset 7, -8
 740              		.cfi_offset 14, -4
 741 0002 9AB0     		sub	sp, sp, #104
 742              		.cfi_def_cfa_offset 112
 743 0004 00AF     		add	r7, sp, #0
 744              		.cfi_def_cfa_register 7
 337:.\modem.c     **** /* 
 338:.\modem.c     **** 	Set the access point that the modem connects to.
 339:.\modem.c     **** 	The APN is defined in "modem_apn" at the
 340:.\modem.c     **** 	top of this file 
 341:.\modem.c     **** */
 342:.\modem.c     ****     char cmd[100];
 343:.\modem.c     ****     sprintf(cmd,"AT+CGDCONT=1,\"IP\",\"%s\"\r",modem_apn);
 745              		.loc 1 343 0
 746 0006 0C4B     		ldr	r3, .L58
 747 0008 1B68     		ldr	r3, [r3]
 748 000a 3A1D     		adds	r2, r7, #4
 749 000c 1046     		mov	r0, r2
 750 000e 0B49     		ldr	r1, .L58+4
 751 0010 1A46     		mov	r2, r3
 752 0012 FFF7FEFF 		bl	sprintf
 344:.\modem.c     ****     if(at_write_command(cmd,"OK",2000u) == 1u){      
 753              		.loc 1 344 0
 754 0016 3B1D     		adds	r3, r7, #4
 755 0018 1846     		mov	r0, r3
 756 001a 0949     		ldr	r1, .L58+8
 757 001c 4FF4FA62 		mov	r2, #2000
 758 0020 FFF7FEFF 		bl	at_write_command
 759 0024 0346     		mov	r3, r0
 760 0026 012B     		cmp	r3, #1
 761 0028 01D1     		bne	.L55
 345:.\modem.c     ****         return 1u;
 762              		.loc 1 345 0
 763 002a 0123     		movs	r3, #1
 764 002c 00E0     		b	.L57
 765              	.L55:
 346:.\modem.c     ****     }
 347:.\modem.c     ****     /* Write to SD Card debugger
 348:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 349:.\modem.c     ****     */
 350:.\modem.c     **** 
 351:.\modem.c     ****     return 0u; 
 766              		.loc 1 351 0
 767 002e 0023     		movs	r3, #0
 768              	.L57:
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 21


 352:.\modem.c     **** }
 769              		.loc 1 352 0 discriminator 1
 770 0030 1846     		mov	r0, r3
 771 0032 6837     		adds	r7, r7, #104
 772              		.cfi_def_cfa_offset 8
 773 0034 BD46     		mov	sp, r7
 774              		.cfi_def_cfa_register 13
 775              		@ sp needed
 776 0036 80BD     		pop	{r7, pc}
 777              	.L59:
 778              		.align	2
 779              	.L58:
 780 0038 00000000 		.word	modem_apn
 781 003c 38000000 		.word	.LC5
 782 0040 14000000 		.word	.LC2
 783              		.cfi_endproc
 784              	.LFE67:
 785              		.size	modem_set_apn, .-modem_set_apn
 786              		.section	.rodata
 787              		.align	2
 788              	.LC6:
 789 0050 41542342 		.ascii	"AT#BND=%d\015\000"
 789      4E443D25 
 789      640D00
 790              		.section	.text.modem_set_band,"ax",%progbits
 791              		.align	2
 792              		.global	modem_set_band
 793              		.thumb
 794              		.thumb_func
 795              		.type	modem_set_band, %function
 796              	modem_set_band:
 797              	.LFB68:
 353:.\modem.c     **** 
 354:.\modem.c     **** uint8 modem_set_band(uint8 band) {
 798              		.loc 1 354 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 112
 801              		@ frame_needed = 1, uses_anonymous_args = 0
 802 0000 80B5     		push	{r7, lr}
 803              		.cfi_def_cfa_offset 8
 804              		.cfi_offset 7, -8
 805              		.cfi_offset 14, -4
 806 0002 9CB0     		sub	sp, sp, #112
 807              		.cfi_def_cfa_offset 120
 808 0004 00AF     		add	r7, sp, #0
 809              		.cfi_def_cfa_register 7
 810 0006 0346     		mov	r3, r0
 811 0008 FB71     		strb	r3, [r7, #7]
 355:.\modem.c     **** /* 
 356:.\modem.c     **** 	Set the band on which the modem should communicate on
 357:.\modem.c     **** 	Band ranges from <0,3>
 358:.\modem.c     **** 	"epc.tmobile.com" uses band 1
 359:.\modem.c     **** */
 360:.\modem.c     ****     char cmd[100];
 361:.\modem.c     ****     sprintf(cmd,"AT#BND=%d\r",band);
 812              		.loc 1 361 0
 813 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 22


 814 000c 07F10C02 		add	r2, r7, #12
 815 0010 1046     		mov	r0, r2
 816 0012 0B49     		ldr	r1, .L64
 817 0014 1A46     		mov	r2, r3
 818 0016 FFF7FEFF 		bl	sprintf
 362:.\modem.c     ****     if(at_write_command(cmd,"OK",2000u) == 1u){      
 819              		.loc 1 362 0
 820 001a 07F10C03 		add	r3, r7, #12
 821 001e 1846     		mov	r0, r3
 822 0020 0849     		ldr	r1, .L64+4
 823 0022 4FF4FA62 		mov	r2, #2000
 824 0026 FFF7FEFF 		bl	at_write_command
 825 002a 0346     		mov	r3, r0
 826 002c 012B     		cmp	r3, #1
 827 002e 01D1     		bne	.L61
 363:.\modem.c     ****         return 1u;
 828              		.loc 1 363 0
 829 0030 0123     		movs	r3, #1
 830 0032 00E0     		b	.L63
 831              	.L61:
 364:.\modem.c     ****     }
 365:.\modem.c     ****     /* Write to SD Card debugger
 366:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 367:.\modem.c     ****     */
 368:.\modem.c     **** 
 369:.\modem.c     ****     return 0u; 
 832              		.loc 1 369 0
 833 0034 0023     		movs	r3, #0
 834              	.L63:
 370:.\modem.c     **** }
 835              		.loc 1 370 0 discriminator 1
 836 0036 1846     		mov	r0, r3
 837 0038 7037     		adds	r7, r7, #112
 838              		.cfi_def_cfa_offset 8
 839 003a BD46     		mov	sp, r7
 840              		.cfi_def_cfa_register 13
 841              		@ sp needed
 842 003c 80BD     		pop	{r7, pc}
 843              	.L65:
 844 003e 00BF     		.align	2
 845              	.L64:
 846 0040 50000000 		.word	.LC6
 847 0044 14000000 		.word	.LC2
 848              		.cfi_endproc
 849              	.LFE68:
 850              		.size	modem_set_band, .-modem_set_band
 851              		.section	.rodata
 852 005b 00       		.align	2
 853              	.LC7:
 854 005c 41542B43 		.ascii	"AT+CCLK?\015\000"
 854      434C4B3F 
 854      0D00
 855              		.section	.text.modem_get_rtc_time,"ax",%progbits
 856              		.align	2
 857              		.global	modem_get_rtc_time
 858              		.thumb
 859              		.thumb_func
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 23


 860              		.type	modem_get_rtc_time, %function
 861              	modem_get_rtc_time:
 862              	.LFB69:
 371:.\modem.c     **** 
 372:.\modem.c     **** uint8 modem_get_rtc_time(){
 863              		.loc 1 372 0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
 866              		@ frame_needed = 1, uses_anonymous_args = 0
 867 0000 80B5     		push	{r7, lr}
 868              		.cfi_def_cfa_offset 8
 869              		.cfi_offset 7, -8
 870              		.cfi_offset 14, -4
 871 0002 00AF     		add	r7, sp, #0
 872              		.cfi_def_cfa_register 7
 373:.\modem.c     ****     if(at_write_command("AT+CCLK?\r","OK",1000u) == 1u){      
 873              		.loc 1 373 0
 874 0004 0648     		ldr	r0, .L69
 875 0006 0749     		ldr	r1, .L69+4
 876 0008 4FF47A72 		mov	r2, #1000
 877 000c FFF7FEFF 		bl	at_write_command
 878 0010 0346     		mov	r3, r0
 879 0012 012B     		cmp	r3, #1
 880 0014 01D1     		bne	.L67
 374:.\modem.c     ****         return 1u;
 881              		.loc 1 374 0
 882 0016 0123     		movs	r3, #1
 883 0018 00E0     		b	.L68
 884              	.L67:
 375:.\modem.c     ****     }
 376:.\modem.c     ****     /* Write to SD Card debugger
 377:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 378:.\modem.c     ****     */
 379:.\modem.c     ****     
 380:.\modem.c     ****     /* Parse Time from data packet */
 381:.\modem.c     **** 
 382:.\modem.c     ****     return 0u;  
 885              		.loc 1 382 0
 886 001a 0023     		movs	r3, #0
 887              	.L68:
 383:.\modem.c     **** }
 888              		.loc 1 383 0
 889 001c 1846     		mov	r0, r3
 890 001e 80BD     		pop	{r7, pc}
 891              	.L70:
 892              		.align	2
 893              	.L69:
 894 0020 5C000000 		.word	.LC7
 895 0024 14000000 		.word	.LC2
 896              		.cfi_endproc
 897              	.LFE69:
 898              		.size	modem_get_rtc_time, .-modem_get_rtc_time
 899              		.section	.rodata
 900 0066 0000     		.align	2
 901              	.LC8:
 902 0068 4154234E 		.ascii	"AT#NITZ?\015\000"
 902      49545A3F 
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 24


 902      0D00
 903              		.section	.text.modem_get_nertwork_time,"ax",%progbits
 904              		.align	2
 905              		.global	modem_get_nertwork_time
 906              		.thumb
 907              		.thumb_func
 908              		.type	modem_get_nertwork_time, %function
 909              	modem_get_nertwork_time:
 910              	.LFB70:
 384:.\modem.c     **** 
 385:.\modem.c     **** uint8 modem_get_nertwork_time(){
 911              		.loc 1 385 0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 0
 914              		@ frame_needed = 1, uses_anonymous_args = 0
 915 0000 80B5     		push	{r7, lr}
 916              		.cfi_def_cfa_offset 8
 917              		.cfi_offset 7, -8
 918              		.cfi_offset 14, -4
 919 0002 00AF     		add	r7, sp, #0
 920              		.cfi_def_cfa_register 7
 386:.\modem.c     ****     if(at_write_command("AT#NITZ?\r","OK",1000u) == 1u){      
 921              		.loc 1 386 0
 922 0004 0648     		ldr	r0, .L74
 923 0006 0749     		ldr	r1, .L74+4
 924 0008 4FF47A72 		mov	r2, #1000
 925 000c FFF7FEFF 		bl	at_write_command
 926 0010 0346     		mov	r3, r0
 927 0012 012B     		cmp	r3, #1
 928 0014 01D1     		bne	.L72
 387:.\modem.c     ****         return 1u;
 929              		.loc 1 387 0
 930 0016 0123     		movs	r3, #1
 931 0018 00E0     		b	.L73
 932              	.L72:
 388:.\modem.c     ****     }
 389:.\modem.c     ****     /* Write to SD Card debugger
 390:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 391:.\modem.c     ****     */
 392:.\modem.c     ****     
 393:.\modem.c     ****     /* Parse Time from data packet */
 394:.\modem.c     **** 
 395:.\modem.c     ****     return 0u;  
 933              		.loc 1 395 0
 934 001a 0023     		movs	r3, #0
 935              	.L73:
 396:.\modem.c     **** }
 936              		.loc 1 396 0
 937 001c 1846     		mov	r0, r3
 938 001e 80BD     		pop	{r7, pc}
 939              	.L75:
 940              		.align	2
 941              	.L74:
 942 0020 68000000 		.word	.LC8
 943 0024 14000000 		.word	.LC2
 944              		.cfi_endproc
 945              	.LFE70:
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 25


 946              		.size	modem_get_nertwork_time, .-modem_get_nertwork_time
 947              		.section	.rodata
 948 0072 0000     		.align	2
 949              	.LC9:
 950 0074 41542B43 		.ascii	"AT+CREG?\015\000"
 950      5245473F 
 950      0D00
 951 007e 0000     		.align	2
 952              	.LC10:
 953 0080 2C3100   		.ascii	",1\000"
 954              		.section	.text.modem_check_network,"ax",%progbits
 955              		.align	2
 956              		.global	modem_check_network
 957              		.thumb
 958              		.thumb_func
 959              		.type	modem_check_network, %function
 960              	modem_check_network:
 961              	.LFB71:
 397:.\modem.c     **** 
 398:.\modem.c     **** uint8 modem_check_network() {
 962              		.loc 1 398 0
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 0
 965              		@ frame_needed = 1, uses_anonymous_args = 0
 966 0000 80B5     		push	{r7, lr}
 967              		.cfi_def_cfa_offset 8
 968              		.cfi_offset 7, -8
 969              		.cfi_offset 14, -4
 970 0002 00AF     		add	r7, sp, #0
 971              		.cfi_def_cfa_register 7
 399:.\modem.c     ****     if(at_write_command("AT+CREG?\r",",1",1000u) == 1u){      
 972              		.loc 1 399 0
 973 0004 0648     		ldr	r0, .L79
 974 0006 0749     		ldr	r1, .L79+4
 975 0008 4FF47A72 		mov	r2, #1000
 976 000c FFF7FEFF 		bl	at_write_command
 977 0010 0346     		mov	r3, r0
 978 0012 012B     		cmp	r3, #1
 979 0014 01D1     		bne	.L77
 400:.\modem.c     ****         return 1u;
 980              		.loc 1 400 0
 981 0016 0123     		movs	r3, #1
 982 0018 00E0     		b	.L78
 983              	.L77:
 401:.\modem.c     ****     }
 402:.\modem.c     ****     /* Write to SD Card debugger
 403:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 404:.\modem.c     ****     */
 405:.\modem.c     ****     
 406:.\modem.c     ****     /* Parse Time from data packet */
 407:.\modem.c     **** 
 408:.\modem.c     ****     return 0u;      
 984              		.loc 1 408 0
 985 001a 0023     		movs	r3, #0
 986              	.L78:
 409:.\modem.c     **** }
 987              		.loc 1 409 0
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 26


 988 001c 1846     		mov	r0, r3
 989 001e 80BD     		pop	{r7, pc}
 990              	.L80:
 991              		.align	2
 992              	.L79:
 993 0020 74000000 		.word	.LC9
 994 0024 80000000 		.word	.LC10
 995              		.cfi_endproc
 996              	.LFE71:
 997              		.size	modem_check_network, .-modem_check_network
 998              		.section	.rodata
 999 0083 00       		.align	2
 1000              	.LC11:
 1001 0084 41542B43 		.ascii	"AT+CSQ\015\000"
 1001      53510D00 
 1002              		.section	.text.modem_get_signal_quality,"ax",%progbits
 1003              		.align	2
 1004              		.global	modem_get_signal_quality
 1005              		.thumb
 1006              		.thumb_func
 1007              		.type	modem_get_signal_quality, %function
 1008              	modem_get_signal_quality:
 1009              	.LFB72:
 410:.\modem.c     **** uint8 modem_get_signal_quality(){
 1010              		.loc 1 410 0
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 0
 1013              		@ frame_needed = 1, uses_anonymous_args = 0
 1014 0000 80B5     		push	{r7, lr}
 1015              		.cfi_def_cfa_offset 8
 1016              		.cfi_offset 7, -8
 1017              		.cfi_offset 14, -4
 1018 0002 00AF     		add	r7, sp, #0
 1019              		.cfi_def_cfa_register 7
 411:.\modem.c     ****     if(at_write_command("AT+CSQ\r","OK",1000u) == 1u){      
 1020              		.loc 1 411 0
 1021 0004 0648     		ldr	r0, .L84
 1022 0006 0749     		ldr	r1, .L84+4
 1023 0008 4FF47A72 		mov	r2, #1000
 1024 000c FFF7FEFF 		bl	at_write_command
 1025 0010 0346     		mov	r3, r0
 1026 0012 012B     		cmp	r3, #1
 1027 0014 01D1     		bne	.L82
 412:.\modem.c     ****         return 1u;
 1028              		.loc 1 412 0
 1029 0016 0123     		movs	r3, #1
 1030 0018 00E0     		b	.L83
 1031              	.L82:
 413:.\modem.c     ****     }
 414:.\modem.c     ****     /* Write to SD Card debugger
 415:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 416:.\modem.c     ****     */
 417:.\modem.c     ****     
 418:.\modem.c     ****     /* Parse Time from data packet */
 419:.\modem.c     **** 
 420:.\modem.c     ****     return 0u;  
 1032              		.loc 1 420 0
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 27


 1033 001a 0023     		movs	r3, #0
 1034              	.L83:
 421:.\modem.c     **** }
 1035              		.loc 1 421 0
 1036 001c 1846     		mov	r0, r3
 1037 001e 80BD     		pop	{r7, pc}
 1038              	.L85:
 1039              		.align	2
 1040              	.L84:
 1041 0020 84000000 		.word	.LC11
 1042 0024 14000000 		.word	.LC2
 1043              		.cfi_endproc
 1044              	.LFE72:
 1045              		.size	modem_get_signal_quality, .-modem_get_signal_quality
 1046              		.section	.rodata
 1047              		.align	2
 1048              	.LC12:
 1049 008c 41542B43 		.ascii	"AT+CGSN\015\000"
 1049      47534E0D 
 1049      00
 1050              		.section	.text.modem_get_serial_number,"ax",%progbits
 1051              		.align	2
 1052              		.global	modem_get_serial_number
 1053              		.thumb
 1054              		.thumb_func
 1055              		.type	modem_get_serial_number, %function
 1056              	modem_get_serial_number:
 1057              	.LFB73:
 422:.\modem.c     **** 
 423:.\modem.c     **** uint8 modem_get_serial_number(){
 1058              		.loc 1 423 0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 8
 1061              		@ frame_needed = 1, uses_anonymous_args = 0
 1062 0000 80B5     		push	{r7, lr}
 1063              		.cfi_def_cfa_offset 8
 1064              		.cfi_offset 7, -8
 1065              		.cfi_offset 14, -4
 1066 0002 82B0     		sub	sp, sp, #8
 1067              		.cfi_def_cfa_offset 16
 1068 0004 00AF     		add	r7, sp, #0
 1069              		.cfi_def_cfa_register 7
 424:.\modem.c     ****     if(at_write_command("AT+CGSN\r","OK",1000u) == 1u){      
 1070              		.loc 1 424 0
 1071 0006 0948     		ldr	r0, .L89
 1072 0008 0949     		ldr	r1, .L89+4
 1073 000a 4FF47A72 		mov	r2, #1000
 1074 000e FFF7FEFF 		bl	at_write_command
 1075 0012 0346     		mov	r3, r0
 1076 0014 012B     		cmp	r3, #1
 1077 0016 01D1     		bne	.L87
 425:.\modem.c     ****         return 1u;
 1078              		.loc 1 425 0
 1079 0018 0123     		movs	r3, #1
 1080 001a 02E0     		b	.L88
 1081              	.L87:
 426:.\modem.c     ****     }
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 28


 427:.\modem.c     ****     /* Write to SD Card debugger
 428:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 429:.\modem.c     ****     */
 430:.\modem.c     **** 	uint8 x = 0;
 1082              		.loc 1 430 0
 1083 001c 0023     		movs	r3, #0
 1084 001e FB71     		strb	r3, [r7, #7]
 431:.\modem.c     ****     return 0u;  
 1085              		.loc 1 431 0
 1086 0020 0023     		movs	r3, #0
 1087              	.L88:
 432:.\modem.c     **** }
 1088              		.loc 1 432 0
 1089 0022 1846     		mov	r0, r3
 1090 0024 0837     		adds	r7, r7, #8
 1091              		.cfi_def_cfa_offset 8
 1092 0026 BD46     		mov	sp, r7
 1093              		.cfi_def_cfa_register 13
 1094              		@ sp needed
 1095 0028 80BD     		pop	{r7, pc}
 1096              	.L90:
 1097 002a 00BF     		.align	2
 1098              	.L89:
 1099 002c 8C000000 		.word	.LC12
 1100 0030 14000000 		.word	.LC2
 1101              		.cfi_endproc
 1102              	.LFE73:
 1103              		.size	modem_get_serial_number, .-modem_get_serial_number
 1104              		.section	.rodata
 1105 0095 000000   		.align	2
 1106              	.LC13:
 1107 0098 41542656 		.ascii	"AT&V\015\000"
 1107      0D00
 1108              		.section	.text.modem_get_profile,"ax",%progbits
 1109              		.align	2
 1110              		.global	modem_get_profile
 1111              		.thumb
 1112              		.thumb_func
 1113              		.type	modem_get_profile, %function
 1114              	modem_get_profile:
 1115              	.LFB74:
 433:.\modem.c     **** 
 434:.\modem.c     **** 
 435:.\modem.c     **** uint8 modem_get_profile(){
 1116              		.loc 1 435 0
 1117              		.cfi_startproc
 1118              		@ args = 0, pretend = 0, frame = 0
 1119              		@ frame_needed = 1, uses_anonymous_args = 0
 1120 0000 80B5     		push	{r7, lr}
 1121              		.cfi_def_cfa_offset 8
 1122              		.cfi_offset 7, -8
 1123              		.cfi_offset 14, -4
 1124 0002 00AF     		add	r7, sp, #0
 1125              		.cfi_def_cfa_register 7
 436:.\modem.c     ****     if(at_write_command("AT&V\r","OK",1000u) == 1u){      
 1126              		.loc 1 436 0
 1127 0004 0648     		ldr	r0, .L94
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 29


 1128 0006 0749     		ldr	r1, .L94+4
 1129 0008 4FF47A72 		mov	r2, #1000
 1130 000c FFF7FEFF 		bl	at_write_command
 1131 0010 0346     		mov	r3, r0
 1132 0012 012B     		cmp	r3, #1
 1133 0014 01D1     		bne	.L92
 437:.\modem.c     ****         return 1u;
 1134              		.loc 1 437 0
 1135 0016 0123     		movs	r3, #1
 1136 0018 00E0     		b	.L93
 1137              	.L92:
 438:.\modem.c     ****     }
 439:.\modem.c     ****     /* Write to SD Card debugger
 440:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 441:.\modem.c     ****     */
 442:.\modem.c     **** 
 443:.\modem.c     ****     return 0u;  
 1138              		.loc 1 443 0
 1139 001a 0023     		movs	r3, #0
 1140              	.L93:
 444:.\modem.c     **** }
 1141              		.loc 1 444 0
 1142 001c 1846     		mov	r0, r3
 1143 001e 80BD     		pop	{r7, pc}
 1144              	.L95:
 1145              		.align	2
 1146              	.L94:
 1147 0020 98000000 		.word	.LC13
 1148 0024 14000000 		.word	.LC2
 1149              		.cfi_endproc
 1150              	.LFE74:
 1151              		.size	modem_get_profile, .-modem_get_profile
 1152              		.section	.rodata
 1153 009e 0000     		.align	2
 1154              	.LC14:
 1155 00a0 4154264B 		.ascii	"AT&K%u\015\000"
 1155      25750D00 
 1156              		.section	.text.modem_set_flow_control,"ax",%progbits
 1157              		.align	2
 1158              		.global	modem_set_flow_control
 1159              		.thumb
 1160              		.thumb_func
 1161              		.type	modem_set_flow_control, %function
 1162              	modem_set_flow_control:
 1163              	.LFB75:
 445:.\modem.c     **** 
 446:.\modem.c     **** uint8 modem_set_flow_control(uint8 param){
 1164              		.loc 1 446 0
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 112
 1167              		@ frame_needed = 1, uses_anonymous_args = 0
 1168 0000 80B5     		push	{r7, lr}
 1169              		.cfi_def_cfa_offset 8
 1170              		.cfi_offset 7, -8
 1171              		.cfi_offset 14, -4
 1172 0002 9CB0     		sub	sp, sp, #112
 1173              		.cfi_def_cfa_offset 120
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 30


 1174 0004 00AF     		add	r7, sp, #0
 1175              		.cfi_def_cfa_register 7
 1176 0006 0346     		mov	r3, r0
 1177 0008 FB71     		strb	r3, [r7, #7]
 447:.\modem.c     ****     char cmd[100];
 448:.\modem.c     ****     sprintf(cmd,"AT&K%u\r",param);
 1178              		.loc 1 448 0
 1179 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1180 000c 07F10C02 		add	r2, r7, #12
 1181 0010 1046     		mov	r0, r2
 1182 0012 0B49     		ldr	r1, .L100
 1183 0014 1A46     		mov	r2, r3
 1184 0016 FFF7FEFF 		bl	sprintf
 449:.\modem.c     ****     if(at_write_command(cmd,"OK",1000u) == 1u){      
 1185              		.loc 1 449 0
 1186 001a 07F10C03 		add	r3, r7, #12
 1187 001e 1846     		mov	r0, r3
 1188 0020 0849     		ldr	r1, .L100+4
 1189 0022 4FF47A72 		mov	r2, #1000
 1190 0026 FFF7FEFF 		bl	at_write_command
 1191 002a 0346     		mov	r3, r0
 1192 002c 012B     		cmp	r3, #1
 1193 002e 01D1     		bne	.L97
 450:.\modem.c     ****         return 1u;
 1194              		.loc 1 450 0
 1195 0030 0123     		movs	r3, #1
 1196 0032 00E0     		b	.L99
 1197              	.L97:
 451:.\modem.c     ****     }
 452:.\modem.c     ****     /* Write to SD Card debugger
 453:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 454:.\modem.c     ****     */
 455:.\modem.c     **** 
 456:.\modem.c     ****     return 0u;  
 1198              		.loc 1 456 0
 1199 0034 0023     		movs	r3, #0
 1200              	.L99:
 457:.\modem.c     **** }
 1201              		.loc 1 457 0 discriminator 1
 1202 0036 1846     		mov	r0, r3
 1203 0038 7037     		adds	r7, r7, #112
 1204              		.cfi_def_cfa_offset 8
 1205 003a BD46     		mov	sp, r7
 1206              		.cfi_def_cfa_register 13
 1207              		@ sp needed
 1208 003c 80BD     		pop	{r7, pc}
 1209              	.L101:
 1210 003e 00BF     		.align	2
 1211              	.L100:
 1212 0040 A0000000 		.word	.LC14
 1213 0044 14000000 		.word	.LC2
 1214              		.cfi_endproc
 1215              	.LFE75:
 1216              		.size	modem_set_flow_control, .-modem_set_flow_control
 1217              		.section	.rodata
 1218              		.align	2
 1219              	.LC15:
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 31


 1220 00a8 41542B43 		.ascii	"AT+CMEE=%u\015\000"
 1220      4D45453D 
 1220      25750D00 
 1221              		.section	.text.modem_set_error_reports,"ax",%progbits
 1222              		.align	2
 1223              		.global	modem_set_error_reports
 1224              		.thumb
 1225              		.thumb_func
 1226              		.type	modem_set_error_reports, %function
 1227              	modem_set_error_reports:
 1228              	.LFB76:
 458:.\modem.c     **** 
 459:.\modem.c     **** uint8 modem_set_error_reports(uint8 param){
 1229              		.loc 1 459 0
 1230              		.cfi_startproc
 1231              		@ args = 0, pretend = 0, frame = 112
 1232              		@ frame_needed = 1, uses_anonymous_args = 0
 1233 0000 80B5     		push	{r7, lr}
 1234              		.cfi_def_cfa_offset 8
 1235              		.cfi_offset 7, -8
 1236              		.cfi_offset 14, -4
 1237 0002 9CB0     		sub	sp, sp, #112
 1238              		.cfi_def_cfa_offset 120
 1239 0004 00AF     		add	r7, sp, #0
 1240              		.cfi_def_cfa_register 7
 1241 0006 0346     		mov	r3, r0
 1242 0008 FB71     		strb	r3, [r7, #7]
 460:.\modem.c     **** 	/*
 461:.\modem.c     **** 	2.4. Enable Extended Error Result codes
 462:.\modem.c     **** 	Disable the Error Report in numerical and verbose format:
 463:.\modem.c     **** 	AT+CMEE=0
 464:.\modem.c     **** 	OK
 465:.\modem.c     **** 	Enable the Error Report in numerical format:
 466:.\modem.c     **** 	AT+CMEE=1
 467:.\modem.c     **** 	OK
 468:.\modem.c     **** 	Enable the Error Report in verbose format:
 469:.\modem.c     **** 	AT+CMEE=2
 470:.\modem.c     **** 	OK
 471:.\modem.c     **** 	*/
 472:.\modem.c     **** 	
 473:.\modem.c     ****     char cmd[100];
 474:.\modem.c     ****     sprintf(cmd,"AT+CMEE=%u\r",param);
 1243              		.loc 1 474 0
 1244 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1245 000c 07F10C02 		add	r2, r7, #12
 1246 0010 1046     		mov	r0, r2
 1247 0012 0B49     		ldr	r1, .L106
 1248 0014 1A46     		mov	r2, r3
 1249 0016 FFF7FEFF 		bl	sprintf
 475:.\modem.c     ****     if(at_write_command(cmd,"OK",1000u) == 1u){      
 1250              		.loc 1 475 0
 1251 001a 07F10C03 		add	r3, r7, #12
 1252 001e 1846     		mov	r0, r3
 1253 0020 0849     		ldr	r1, .L106+4
 1254 0022 4FF47A72 		mov	r2, #1000
 1255 0026 FFF7FEFF 		bl	at_write_command
 1256 002a 0346     		mov	r3, r0
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 32


 1257 002c 012B     		cmp	r3, #1
 1258 002e 01D1     		bne	.L103
 476:.\modem.c     ****         return 1u;
 1259              		.loc 1 476 0
 1260 0030 0123     		movs	r3, #1
 1261 0032 00E0     		b	.L105
 1262              	.L103:
 477:.\modem.c     ****     }
 478:.\modem.c     ****     /* Write to SD Card debugger
 479:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 480:.\modem.c     ****     */
 481:.\modem.c     **** 
 482:.\modem.c     ****     return 0u;  
 1263              		.loc 1 482 0
 1264 0034 0023     		movs	r3, #0
 1265              	.L105:
 483:.\modem.c     **** }
 1266              		.loc 1 483 0 discriminator 1
 1267 0036 1846     		mov	r0, r3
 1268 0038 7037     		adds	r7, r7, #112
 1269              		.cfi_def_cfa_offset 8
 1270 003a BD46     		mov	sp, r7
 1271              		.cfi_def_cfa_register 13
 1272              		@ sp needed
 1273 003c 80BD     		pop	{r7, pc}
 1274              	.L107:
 1275 003e 00BF     		.align	2
 1276              	.L106:
 1277 0040 A8000000 		.word	.LC15
 1278 0044 14000000 		.word	.LC2
 1279              		.cfi_endproc
 1280              	.LFE76:
 1281              		.size	modem_set_error_reports, .-modem_set_error_reports
 1282              		.section	.rodata
 1283              		.align	2
 1284              	.LC16:
 1285 00b4 41542B43 		.ascii	"AT+CGMR\015\000"
 1285      474D520D 
 1285      00
 1286              		.section	.text.modem_get_sw_version,"ax",%progbits
 1287              		.align	2
 1288              		.global	modem_get_sw_version
 1289              		.thumb
 1290              		.thumb_func
 1291              		.type	modem_get_sw_version, %function
 1292              	modem_get_sw_version:
 1293              	.LFB77:
 484:.\modem.c     **** 
 485:.\modem.c     **** uint8 modem_get_sw_version(){
 1294              		.loc 1 485 0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 0
 1297              		@ frame_needed = 1, uses_anonymous_args = 0
 1298 0000 80B5     		push	{r7, lr}
 1299              		.cfi_def_cfa_offset 8
 1300              		.cfi_offset 7, -8
 1301              		.cfi_offset 14, -4
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 33


 1302 0002 00AF     		add	r7, sp, #0
 1303              		.cfi_def_cfa_register 7
 486:.\modem.c     ****     if(at_write_command("AT+CGMR\r","OK",1000u) == 1u){      
 1304              		.loc 1 486 0
 1305 0004 0648     		ldr	r0, .L111
 1306 0006 0749     		ldr	r1, .L111+4
 1307 0008 4FF47A72 		mov	r2, #1000
 1308 000c FFF7FEFF 		bl	at_write_command
 1309 0010 0346     		mov	r3, r0
 1310 0012 012B     		cmp	r3, #1
 1311 0014 01D1     		bne	.L109
 487:.\modem.c     ****         return 1u;
 1312              		.loc 1 487 0
 1313 0016 0123     		movs	r3, #1
 1314 0018 00E0     		b	.L110
 1315              	.L109:
 488:.\modem.c     ****     }
 489:.\modem.c     ****     /* Write to SD Card debugger
 490:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 491:.\modem.c     ****     */
 492:.\modem.c     **** 
 493:.\modem.c     ****     return 0u;  
 1316              		.loc 1 493 0
 1317 001a 0023     		movs	r3, #0
 1318              	.L110:
 494:.\modem.c     **** }
 1319              		.loc 1 494 0
 1320 001c 1846     		mov	r0, r3
 1321 001e 80BD     		pop	{r7, pc}
 1322              	.L112:
 1323              		.align	2
 1324              	.L111:
 1325 0020 B4000000 		.word	.LC16
 1326 0024 14000000 		.word	.LC2
 1327              		.cfi_endproc
 1328              	.LFE77:
 1329              		.size	modem_get_sw_version, .-modem_get_sw_version
 1330              		.section	.rodata
 1331 00bd 000000   		.align	2
 1332              	.LC17:
 1333 00c0 41542343 		.ascii	"AT#CDMADC=%u\015\000"
 1333      444D4144 
 1333      433D2575 
 1333      0D00
 1334              		.section	.text.modem_enable_CDMA_data,"ax",%progbits
 1335              		.align	2
 1336              		.global	modem_enable_CDMA_data
 1337              		.thumb
 1338              		.thumb_func
 1339              		.type	modem_enable_CDMA_data, %function
 1340              	modem_enable_CDMA_data:
 1341              	.LFB78:
 495:.\modem.c     **** 
 496:.\modem.c     **** uint8 modem_enable_CDMA_data(uint8 param){
 1342              		.loc 1 496 0
 1343              		.cfi_startproc
 1344              		@ args = 0, pretend = 0, frame = 112
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 34


 1345              		@ frame_needed = 1, uses_anonymous_args = 0
 1346 0000 80B5     		push	{r7, lr}
 1347              		.cfi_def_cfa_offset 8
 1348              		.cfi_offset 7, -8
 1349              		.cfi_offset 14, -4
 1350 0002 9CB0     		sub	sp, sp, #112
 1351              		.cfi_def_cfa_offset 120
 1352 0004 00AF     		add	r7, sp, #0
 1353              		.cfi_def_cfa_register 7
 1354 0006 0346     		mov	r3, r0
 1355 0008 FB71     		strb	r3, [r7, #7]
 497:.\modem.c     **** 	/*
 498:.\modem.c     **** 	4.2.12 CDMA Data Connection
 499:.\modem.c     **** 	0 - CDMA Data connection deactivation request
 500:.\modem.c     **** 	1 - CDMA Data connection activation request
 501:.\modem.c     **** 	*/
 502:.\modem.c     **** 	
 503:.\modem.c     ****     char cmd[100];
 504:.\modem.c     ****     sprintf(cmd,"AT#CDMADC=%u\r",param);
 1356              		.loc 1 504 0
 1357 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1358 000c 07F10C02 		add	r2, r7, #12
 1359 0010 1046     		mov	r0, r2
 1360 0012 0B49     		ldr	r1, .L117
 1361 0014 1A46     		mov	r2, r3
 1362 0016 FFF7FEFF 		bl	sprintf
 505:.\modem.c     ****     if(at_write_command(cmd,"OK",5000u) == 1u){      
 1363              		.loc 1 505 0
 1364 001a 07F10C03 		add	r3, r7, #12
 1365 001e 1846     		mov	r0, r3
 1366 0020 0849     		ldr	r1, .L117+4
 1367 0022 41F28832 		movw	r2, #5000
 1368 0026 FFF7FEFF 		bl	at_write_command
 1369 002a 0346     		mov	r3, r0
 1370 002c 012B     		cmp	r3, #1
 1371 002e 01D1     		bne	.L114
 506:.\modem.c     ****         return 1u;
 1372              		.loc 1 506 0
 1373 0030 0123     		movs	r3, #1
 1374 0032 00E0     		b	.L116
 1375              	.L114:
 507:.\modem.c     ****     }
 508:.\modem.c     ****     /* Write to SD Card debugger
 509:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 510:.\modem.c     ****     */
 511:.\modem.c     **** 
 512:.\modem.c     ****     return 0u;  
 1376              		.loc 1 512 0
 1377 0034 0023     		movs	r3, #0
 1378              	.L116:
 513:.\modem.c     **** }
 1379              		.loc 1 513 0 discriminator 1
 1380 0036 1846     		mov	r0, r3
 1381 0038 7037     		adds	r7, r7, #112
 1382              		.cfi_def_cfa_offset 8
 1383 003a BD46     		mov	sp, r7
 1384              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 35


 1385              		@ sp needed
 1386 003c 80BD     		pop	{r7, pc}
 1387              	.L118:
 1388 003e 00BF     		.align	2
 1389              	.L117:
 1390 0040 C0000000 		.word	.LC17
 1391 0044 14000000 		.word	.LC2
 1392              		.cfi_endproc
 1393              	.LFE78:
 1394              		.size	modem_enable_CDMA_data, .-modem_enable_CDMA_data
 1395              		.section	.rodata
 1396 00ce 0000     		.align	2
 1397              	.LC18:
 1398 00d0 41542343 		.ascii	"AT#CDMADC?\015\000"
 1398      444D4144 
 1398      433F0D00 
 1399              		.section	.text.modem_test_CDMA_data,"ax",%progbits
 1400              		.align	2
 1401              		.global	modem_test_CDMA_data
 1402              		.thumb
 1403              		.thumb_func
 1404              		.type	modem_test_CDMA_data, %function
 1405              	modem_test_CDMA_data:
 1406              	.LFB79:
 514:.\modem.c     **** 
 515:.\modem.c     **** uint8 modem_test_CDMA_data(){
 1407              		.loc 1 515 0
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 0
 1410              		@ frame_needed = 1, uses_anonymous_args = 0
 1411 0000 80B5     		push	{r7, lr}
 1412              		.cfi_def_cfa_offset 8
 1413              		.cfi_offset 7, -8
 1414              		.cfi_offset 14, -4
 1415 0002 00AF     		add	r7, sp, #0
 1416              		.cfi_def_cfa_register 7
 516:.\modem.c     **** 	
 517:.\modem.c     ****     if(at_write_command("AT#CDMADC?\r","OK",1000u) == 1u){      
 1417              		.loc 1 517 0
 1418 0004 0648     		ldr	r0, .L122
 1419 0006 0749     		ldr	r1, .L122+4
 1420 0008 4FF47A72 		mov	r2, #1000
 1421 000c FFF7FEFF 		bl	at_write_command
 1422 0010 0346     		mov	r3, r0
 1423 0012 012B     		cmp	r3, #1
 1424 0014 01D1     		bne	.L120
 518:.\modem.c     ****         return 1u;
 1425              		.loc 1 518 0
 1426 0016 0123     		movs	r3, #1
 1427 0018 00E0     		b	.L121
 1428              	.L120:
 519:.\modem.c     ****     }
 520:.\modem.c     ****     /* Write to SD Card debugger
 521:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 522:.\modem.c     ****     */
 523:.\modem.c     **** 
 524:.\modem.c     ****     return 0u;	
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 36


 1429              		.loc 1 524 0
 1430 001a 0023     		movs	r3, #0
 1431              	.L121:
 525:.\modem.c     **** }
 1432              		.loc 1 525 0
 1433 001c 1846     		mov	r0, r3
 1434 001e 80BD     		pop	{r7, pc}
 1435              	.L123:
 1436              		.align	2
 1437              	.L122:
 1438 0020 D0000000 		.word	.LC18
 1439 0024 14000000 		.word	.LC2
 1440              		.cfi_endproc
 1441              	.LFE79:
 1442              		.size	modem_test_CDMA_data, .-modem_test_CDMA_data
 1443              		.section	.rodata
 1444              		.align	2
 1445              	.LC19:
 1446 00dc 41542355 		.ascii	"AT#USERID=\"%s\"\015\000"
 1446      53455249 
 1446      443D2225 
 1446      73220D00 
 1447              		.section	.text.modem_set_user,"ax",%progbits
 1448              		.align	2
 1449              		.global	modem_set_user
 1450              		.thumb
 1451              		.thumb_func
 1452              		.type	modem_set_user, %function
 1453              	modem_set_user:
 1454              	.LFB80:
 526:.\modem.c     **** 
 527:.\modem.c     **** uint8 modem_set_user(char* user) {
 1455              		.loc 1 527 0
 1456              		.cfi_startproc
 1457              		@ args = 0, pretend = 0, frame = 112
 1458              		@ frame_needed = 1, uses_anonymous_args = 0
 1459 0000 80B5     		push	{r7, lr}
 1460              		.cfi_def_cfa_offset 8
 1461              		.cfi_offset 7, -8
 1462              		.cfi_offset 14, -4
 1463 0002 9CB0     		sub	sp, sp, #112
 1464              		.cfi_def_cfa_offset 120
 1465 0004 00AF     		add	r7, sp, #0
 1466              		.cfi_def_cfa_register 7
 1467 0006 7860     		str	r0, [r7, #4]
 528:.\modem.c     **** 	
 529:.\modem.c     ****     char cmd[100];
 530:.\modem.c     ****     sprintf(cmd,"AT#USERID=\"%s\"\r",user);		
 1468              		.loc 1 530 0
 1469 0008 07F10C03 		add	r3, r7, #12
 1470 000c 1846     		mov	r0, r3
 1471 000e 0B49     		ldr	r1, .L128
 1472 0010 7A68     		ldr	r2, [r7, #4]
 1473 0012 FFF7FEFF 		bl	sprintf
 531:.\modem.c     **** 	
 532:.\modem.c     ****     if(at_write_command(cmd,"OK",1000u) == 1u){      
 1474              		.loc 1 532 0
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 37


 1475 0016 07F10C03 		add	r3, r7, #12
 1476 001a 1846     		mov	r0, r3
 1477 001c 0849     		ldr	r1, .L128+4
 1478 001e 4FF47A72 		mov	r2, #1000
 1479 0022 FFF7FEFF 		bl	at_write_command
 1480 0026 0346     		mov	r3, r0
 1481 0028 012B     		cmp	r3, #1
 1482 002a 01D1     		bne	.L125
 533:.\modem.c     ****         return 1u;
 1483              		.loc 1 533 0
 1484 002c 0123     		movs	r3, #1
 1485 002e 00E0     		b	.L127
 1486              	.L125:
 534:.\modem.c     ****     }
 535:.\modem.c     ****     /* Write to SD Card debugger
 536:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 537:.\modem.c     ****     */
 538:.\modem.c     **** 	
 539:.\modem.c     **** 	return 0u;	
 1487              		.loc 1 539 0
 1488 0030 0023     		movs	r3, #0
 1489              	.L127:
 540:.\modem.c     **** }
 1490              		.loc 1 540 0 discriminator 1
 1491 0032 1846     		mov	r0, r3
 1492 0034 7037     		adds	r7, r7, #112
 1493              		.cfi_def_cfa_offset 8
 1494 0036 BD46     		mov	sp, r7
 1495              		.cfi_def_cfa_register 13
 1496              		@ sp needed
 1497 0038 80BD     		pop	{r7, pc}
 1498              	.L129:
 1499 003a 00BF     		.align	2
 1500              	.L128:
 1501 003c DC000000 		.word	.LC19
 1502 0040 14000000 		.word	.LC2
 1503              		.cfi_endproc
 1504              	.LFE80:
 1505              		.size	modem_set_user, .-modem_set_user
 1506              		.section	.rodata
 1507              		.align	2
 1508              	.LC20:
 1509 00ec 41542350 		.ascii	"AT#PASSW=\"%s\"\015\000"
 1509      41535357 
 1509      3D222573 
 1509      220D00
 1510              		.section	.text.modem_set_password,"ax",%progbits
 1511              		.align	2
 1512              		.global	modem_set_password
 1513              		.thumb
 1514              		.thumb_func
 1515              		.type	modem_set_password, %function
 1516              	modem_set_password:
 1517              	.LFB81:
 541:.\modem.c     **** 
 542:.\modem.c     **** uint8 modem_set_password(char* pass) {
 1518              		.loc 1 542 0
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 38


 1519              		.cfi_startproc
 1520              		@ args = 0, pretend = 0, frame = 112
 1521              		@ frame_needed = 1, uses_anonymous_args = 0
 1522 0000 80B5     		push	{r7, lr}
 1523              		.cfi_def_cfa_offset 8
 1524              		.cfi_offset 7, -8
 1525              		.cfi_offset 14, -4
 1526 0002 9CB0     		sub	sp, sp, #112
 1527              		.cfi_def_cfa_offset 120
 1528 0004 00AF     		add	r7, sp, #0
 1529              		.cfi_def_cfa_register 7
 1530 0006 7860     		str	r0, [r7, #4]
 543:.\modem.c     **** 	
 544:.\modem.c     ****     char cmd[100];
 545:.\modem.c     ****     sprintf(cmd,"AT#PASSW=\"%s\"\r",pass);		
 1531              		.loc 1 545 0
 1532 0008 07F10C03 		add	r3, r7, #12
 1533 000c 1846     		mov	r0, r3
 1534 000e 0B49     		ldr	r1, .L134
 1535 0010 7A68     		ldr	r2, [r7, #4]
 1536 0012 FFF7FEFF 		bl	sprintf
 546:.\modem.c     **** 	
 547:.\modem.c     ****     if(at_write_command(cmd,"OK",1000u) == 1u){      
 1537              		.loc 1 547 0
 1538 0016 07F10C03 		add	r3, r7, #12
 1539 001a 1846     		mov	r0, r3
 1540 001c 0849     		ldr	r1, .L134+4
 1541 001e 4FF47A72 		mov	r2, #1000
 1542 0022 FFF7FEFF 		bl	at_write_command
 1543 0026 0346     		mov	r3, r0
 1544 0028 012B     		cmp	r3, #1
 1545 002a 01D1     		bne	.L131
 548:.\modem.c     ****         return 1u;
 1546              		.loc 1 548 0
 1547 002c 0123     		movs	r3, #1
 1548 002e 00E0     		b	.L133
 1549              	.L131:
 549:.\modem.c     ****     }
 550:.\modem.c     ****     /* Write to SD Card debugger
 551:.\modem.c     ****     else debug_write("(AT#SGACT=1,1) No IP Address Assigned.");
 552:.\modem.c     ****     */
 553:.\modem.c     **** 	
 554:.\modem.c     **** 	return 0u;	
 1550              		.loc 1 554 0
 1551 0030 0023     		movs	r3, #0
 1552              	.L133:
 555:.\modem.c     **** }
 1553              		.loc 1 555 0 discriminator 1
 1554 0032 1846     		mov	r0, r3
 1555 0034 7037     		adds	r7, r7, #112
 1556              		.cfi_def_cfa_offset 8
 1557 0036 BD46     		mov	sp, r7
 1558              		.cfi_def_cfa_register 13
 1559              		@ sp needed
 1560 0038 80BD     		pop	{r7, pc}
 1561              	.L135:
 1562 003a 00BF     		.align	2
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 39


 1563              	.L134:
 1564 003c EC000000 		.word	.LC20
 1565 0040 14000000 		.word	.LC2
 1566              		.cfi_endproc
 1567              	.LFE81:
 1568              		.size	modem_set_password, .-modem_set_password
 1569              		.section	.rodata
 1570 00fb 00       		.align	2
 1571              	.LC21:
 1572 00fc 41542353 		.ascii	"AT#SKTD=0,80,\"www.google.com\"\015\012\000"
 1572      4B54443D 
 1572      302C3830 
 1572      2C227777 
 1572      772E676F 
 1573              		.align	2
 1574              	.LC22:
 1575 011c 434F4E4E 		.ascii	"CONNECT\000"
 1575      45435400 
 1576              		.align	2
 1577              	.LC23:
 1578 0124 47455420 		.ascii	"GET /get_status/ HTTP/1.0\015\012\000"
 1578      2F676574 
 1578      5F737461 
 1578      7475732F 
 1578      20485454 
 1579              		.align	2
 1580              	.LC24:
 1581 0140 00       		.ascii	"\000"
 1582 0141 000000   		.align	2
 1583              	.LC25:
 1584 0144 0D0A00   		.ascii	"\015\012\000"
 1585              		.section	.text.modem_get_google,"ax",%progbits
 1586              		.align	2
 1587              		.global	modem_get_google
 1588              		.thumb
 1589              		.thumb_func
 1590              		.type	modem_get_google, %function
 1591              	modem_get_google:
 1592              	.LFB82:
 556:.\modem.c     **** uint8 modem_get_google(){
 1593              		.loc 1 556 0
 1594              		.cfi_startproc
 1595              		@ args = 0, pretend = 0, frame = 0
 1596              		@ frame_needed = 1, uses_anonymous_args = 0
 1597 0000 80B5     		push	{r7, lr}
 1598              		.cfi_def_cfa_offset 8
 1599              		.cfi_offset 7, -8
 1600              		.cfi_offset 14, -4
 1601 0002 00AF     		add	r7, sp, #0
 1602              		.cfi_def_cfa_register 7
 557:.\modem.c     **** 
 558:.\modem.c     ****     // Proceed if modem is already connected.  Otherwise, try to join the network and proceed
 559:.\modem.c     ****     if( modem_state == MODEM_STATE_READY || modem_connect() != 0 ){ 
 1603              		.loc 1 559 0
 1604 0004 1C4B     		ldr	r3, .L140
 1605 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1606 0008 032B     		cmp	r3, #3
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 40


 1607 000a 04D0     		beq	.L137
 1608              		.loc 1 559 0 is_stmt 0 discriminator 1
 1609 000c FFF7FEFF 		bl	modem_connect
 1610 0010 0346     		mov	r3, r0
 1611 0012 002B     		cmp	r3, #0
 1612 0014 2AD0     		beq	.L138
 1613              	.L137:
 560:.\modem.c     ****         
 561:.\modem.c     ****         if(at_write_command("AT#SKTD=0,80,\"www.google.com\"\r\n","CONNECT",10000u) != 0){
 1614              		.loc 1 561 0 is_stmt 1
 1615 0016 1948     		ldr	r0, .L140+4
 1616 0018 1949     		ldr	r1, .L140+8
 1617 001a 42F21072 		movw	r2, #10000
 1618 001e FFF7FEFF 		bl	at_write_command
 1619 0022 0346     		mov	r3, r0
 1620 0024 002B     		cmp	r3, #0
 1621 0026 21D0     		beq	.L138
 562:.\modem.c     ****             
 563:.\modem.c     ****             //char get_str[MAX_PACKET_LENGTH], key_str[100];
 564:.\modem.c     ****             
 565:.\modem.c     ****             //sprintf(get_str,"GET / HTTP/1.0\r\n");
 566:.\modem.c     ****             //sprintf(key_str,"Host: www.google.com\r\n");
 567:.\modem.c     ****             //sprintf(get_str,"GET /\r\n");
 568:.\modem.c     ****             //sprintf(get_str,"%s%s",
 569:.\modem.c     ****             //    get_str,
 570:.\modem.c     ****             //    "\r\n");
 571:.\modem.c     ****             
 572:.\modem.c     ****             uart_string_reset();
 1622              		.loc 1 572 0
 1623 0028 FFF7FEFF 		bl	uart_string_reset
 573:.\modem.c     ****             
 574:.\modem.c     ****             //at_write_command(get_str,"",15000u);
 575:.\modem.c     **** 			
 576:.\modem.c     **** 			at_write_command("GET /get_status/ HTTP/1.0\r\n","",15000u);
 1624              		.loc 1 576 0
 1625 002c 1548     		ldr	r0, .L140+12
 1626 002e 1649     		ldr	r1, .L140+16
 1627 0030 43F69822 		movw	r2, #15000
 1628 0034 FFF7FEFF 		bl	at_write_command
 577:.\modem.c     **** 			//CyDelay(1000u);
 578:.\modem.c     **** 			//at_write_command("Host: www.google.com\r\n","",15000u);
 579:.\modem.c     **** 			CyDelay(1000u);
 1629              		.loc 1 579 0
 1630 0038 4FF47A70 		mov	r0, #1000
 1631 003c FFF7FEFF 		bl	CyDelay
 580:.\modem.c     **** 			at_write_command("\r\n","",15000u);
 1632              		.loc 1 580 0
 1633 0040 1248     		ldr	r0, .L140+20
 1634 0042 1149     		ldr	r1, .L140+16
 1635 0044 43F69822 		movw	r2, #15000
 1636 0048 FFF7FEFF 		bl	at_write_command
 581:.\modem.c     **** 			CyDelay(1000u);
 1637              		.loc 1 581 0
 1638 004c 4FF47A70 		mov	r0, #1000
 1639 0050 FFF7FEFF 		bl	CyDelay
 582:.\modem.c     **** 			at_write_command("\r\n","",15000u);
 1640              		.loc 1 582 0
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 41


 1641 0054 0D48     		ldr	r0, .L140+20
 1642 0056 0C49     		ldr	r1, .L140+16
 1643 0058 43F69822 		movw	r2, #15000
 1644 005c FFF7FEFF 		bl	at_write_command
 583:.\modem.c     **** 			
 584:.\modem.c     **** 			CyDelay(15000u);
 1645              		.loc 1 584 0
 1646 0060 43F69820 		movw	r0, #15000
 1647 0064 FFF7FEFF 		bl	CyDelay
 585:.\modem.c     ****             
 586:.\modem.c     **** 			// Just return regardless
 587:.\modem.c     **** 			return 1u;
 1648              		.loc 1 587 0
 1649 0068 0123     		movs	r3, #1
 1650 006a 02E0     		b	.L139
 1651              	.L138:
 588:.\modem.c     ****             /*
 589:.\modem.c     ****             if(at_write_command(get_str,"SRING: 1",15000u) != 0){
 590:.\modem.c     ****                 // Read GET response from the buffer
 591:.\modem.c     ****                 uart_string_reset();
 592:.\modem.c     ****                 //CyDelay(5000u);
 593:.\modem.c     ****                 at_write_command("AT#SRECV=1,700\r","OK",15000u);
 594:.\modem.c     ****                 //strcpy(packet, uart_received_string);
 595:.\modem.c     ****                 strcpy(packet, strstr(uart_received_string, "\r\n\r\n")+strlen("\r\n\r\n"));
 596:.\modem.c     ****                 
 597:.\modem.c     ****                 CyDelay(1000u); //debug_write("Packet received successfully.");
 598:.\modem.c     ****                 return 1u;   // return 1 if succesfully sent sms
 599:.\modem.c     **** 
 600:.\modem.c     ****             }
 601:.\modem.c     ****             */
 602:.\modem.c     ****         }
 603:.\modem.c     ****         
 604:.\modem.c     ****     }
 605:.\modem.c     ****     
 606:.\modem.c     ****     //debug_write("MAX_GET_ATTEMPTS Exceeded.");
 607:.\modem.c     ****     modem_disconnect();
 1652              		.loc 1 607 0
 1653 006c FFF7FEFF 		bl	modem_disconnect
 608:.\modem.c     ****     return 0u;   // return 0 if failure to send sms
 1654              		.loc 1 608 0
 1655 0070 0023     		movs	r3, #0
 1656              	.L139:
 609:.\modem.c     **** }
 1657              		.loc 1 609 0
 1658 0072 1846     		mov	r0, r3
 1659 0074 80BD     		pop	{r7, pc}
 1660              	.L141:
 1661 0076 00BF     		.align	2
 1662              	.L140:
 1663 0078 00000000 		.word	modem_state
 1664 007c FC000000 		.word	.LC21
 1665 0080 1C010000 		.word	.LC22
 1666 0084 24010000 		.word	.LC23
 1667 0088 40010000 		.word	.LC24
 1668 008c 44010000 		.word	.LC25
 1669              		.cfi_endproc
 1670              	.LFE82:
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 42


 1671              		.size	modem_get_google, .-modem_get_google
 1672              		.section	.rodata
 1673 0147 00       		.align	2
 1674              	.LC26:
 1675 0148 41542353 		.ascii	"AT#SD=1,0,8086,\"ec2-54-148-229-234.us-west-2.compu"
 1675      443D312C 
 1675      302C3830 
 1675      38362C22 
 1675      6563322D 
 1676 017a 74652E61 		.ascii	"te.amazonaws.com\",0,0,1\015\000"
 1676      6D617A6F 
 1676      6E617773 
 1676      2E636F6D 
 1676      222C302C 
 1677 0193 00       		.align	2
 1678              	.LC27:
 1679 0194 41542353 		.ascii	"AT#SSEND=1\015\000"
 1679      53454E44 
 1679      3D310D00 
 1680              		.align	2
 1681              	.LC28:
 1682 01a0 3E00     		.ascii	">\000"
 1683 01a2 0000     		.align	2
 1684              	.LC29:
 1685 01a4 504F5354 		.ascii	"POST /write?db=cellBoard_test HTTP/1.0\015\012\000"
 1685      202F7772 
 1685      6974653F 
 1685      64623D63 
 1685      656C6C42 
 1686 01cd 000000   		.align	2
 1687              	.LC30:
 1688 01d0 25732573 		.ascii	"%s%s%s%d%s%s%s\000"
 1688      25732564 
 1688      25732573 
 1688      257300
 1689 01df 00       		.align	2
 1690              	.LC31:
 1691 01e0 486F7374 		.ascii	"Host: ec2-54-148-229-234.us-west-2.compute.amazonaw"
 1691      3A206563 
 1691      322D3534 
 1691      2D313438 
 1691      2D323239 
 1692 0213 732E636F 		.ascii	"s.com:8086\015\012\000"
 1692      6D3A3830 
 1692      38360D0A 
 1692      00
 1693              		.align	2
 1694              	.LC32:
 1695 0220 436F6E74 		.ascii	"Content-Length: \000"
 1695      656E742D 
 1695      4C656E67 
 1695      74683A20 
 1695      00
 1696 0231 000000   		.align	2
 1697              	.LC33:
 1698 0234 0D0A0D0A 		.ascii	"\015\012\015\012\000"
 1698      00
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 43


 1699 0239 000000   		.align	2
 1700              	.LC34:
 1701 023c 0D0A1A00 		.ascii	"\015\012\032\000"
 1702              		.align	2
 1703              	.LC35:
 1704 0240 5352494E 		.ascii	"SRING: 1\000"
 1704      473A2031 
 1704      00
 1705 0249 000000   		.align	2
 1706              	.LC36:
 1707 024c 41542353 		.ascii	"AT#SRECV=1,1000\015\000"
 1707      52454356 
 1707      3D312C31 
 1707      3030300D 
 1707      00
 1708 025d 000000   		.align	2
 1709              	.LC37:
 1710 0260 32303020 		.ascii	"200 OK\000"
 1710      4F4B00
 1711              		.section	.text.modem_send_packet,"ax",%progbits
 1712              		.align	2
 1713              		.global	modem_send_packet
 1714              		.thumb
 1715              		.thumb_func
 1716              		.type	modem_send_packet, %function
 1717              	modem_send_packet:
 1718              	.LFB83:
 610:.\modem.c     **** 
 611:.\modem.c     **** // send packet to Xively server
 612:.\modem.c     **** uint8 modem_send_packet(char* body){
 1719              		.loc 1 612 0
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 1008
 1722              		@ frame_needed = 1, uses_anonymous_args = 0
 1723 0000 B0B5     		push	{r4, r5, r7, lr}
 1724              		.cfi_def_cfa_offset 16
 1725              		.cfi_offset 4, -16
 1726              		.cfi_offset 5, -12
 1727              		.cfi_offset 7, -8
 1728              		.cfi_offset 14, -4
 1729 0002 ADF5816D 		sub	sp, sp, #1032
 1730              		.cfi_def_cfa_offset 1048
 1731 0006 06AF     		add	r7, sp, #24
 1732              		.cfi_def_cfa 7, 1024
 1733 0008 3B1D     		adds	r3, r7, #4
 1734 000a 1860     		str	r0, [r3]
 613:.\modem.c     **** 
 614:.\modem.c     **** 	// Handle retries in main()
 615:.\modem.c     ****     //uint8 attempts = 0;
 616:.\modem.c     ****     //for(attempts = 0; attempts < MAX_SEND_ATTEMPTS; attempts++) {
 617:.\modem.c     ****         
 618:.\modem.c     ****     // Proceed if modem is already connected.
 619:.\modem.c     ****     if( modem_state == MODEM_STATE_READY ){ 
 1735              		.loc 1 619 0
 1736 000c 2C4B     		ldr	r3, .L146
 1737 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1738 0010 032B     		cmp	r3, #3
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 44


 1739 0012 4ED1     		bne	.L143
 620:.\modem.c     **** 		// Reset uart for incoming data from modem
 621:.\modem.c     ****         uart_string_reset();
 1740              		.loc 1 621 0
 1741 0014 FFF7FEFF 		bl	uart_string_reset
 622:.\modem.c     **** 			
 623:.\modem.c     **** 		// Connect to web server
 624:.\modem.c     ****         //if(at_write_command("AT#SKTD=1,80,\"api.xively.com\",0,0\r","CONNECT",5000u) != 0){
 625:.\modem.c     **** 		if(at_write_command("AT#SD=1,0,8086,\"ec2-54-148-229-234.us-west-2.compute.amazonaws.com\",0,0,1\
 1742              		.loc 1 625 0
 1743 0018 2A48     		ldr	r0, .L146+4
 1744 001a 2B49     		ldr	r1, .L146+8
 1745 001c 43F69822 		movw	r2, #15000
 1746 0020 FFF7FEFF 		bl	at_write_command
 1747 0024 0346     		mov	r3, r0
 1748 0026 002B     		cmp	r3, #0
 1749 0028 43D0     		beq	.L143
 626:.\modem.c     **** 		//if(at_write_command("AT#SD=1,0,80,\"www.google.com\",0,0\r\n","CONNECT",15000u) != 0){
 627:.\modem.c     **** 			
 628:.\modem.c     **** 			if(at_write_command("AT#SSEND=1\r",">",10000u) != 0){
 1750              		.loc 1 628 0
 1751 002a 2848     		ldr	r0, .L146+12
 1752 002c 2849     		ldr	r1, .L146+16
 1753 002e 42F21072 		movw	r2, #10000
 1754 0032 FFF7FEFF 		bl	at_write_command
 1755 0036 0346     		mov	r3, r0
 1756 0038 002B     		cmp	r3, #0
 1757 003a 3AD0     		beq	.L143
 1758              	.LBB3:
 629:.\modem.c     **** 			// Write packet information to serial and send
 630:.\modem.c     **** 	            char put_str[MAX_PACKET_LENGTH];
 631:.\modem.c     **** 	            
 632:.\modem.c     **** 	            sprintf(put_str,"POST /write?db=cellBoard_test HTTP/1.0\r\n");
 1759              		.loc 1 632 0
 1760 003c 07F10803 		add	r3, r7, #8
 1761 0040 244A     		ldr	r2, .L146+20
 1762 0042 1C46     		mov	r4, r3
 1763 0044 1546     		mov	r5, r2
 1764 0046 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1765 0048 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1766 004a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1767 004c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1768 004e 95E80700 		ldmia	r5, {r0, r1, r2}
 1769 0052 03C4     		stmia	r4!, {r0, r1}
 1770 0054 2270     		strb	r2, [r4]
 633:.\modem.c     **** 	            sprintf(put_str,"%s%s%s%d%s%s%s",
 1771              		.loc 1 633 0
 1772 0056 3B1D     		adds	r3, r7, #4
 1773 0058 1868     		ldr	r0, [r3]
 1774 005a FFF7FEFF 		bl	strlen
 1775 005e 07F10801 		add	r1, r7, #8
 1776 0062 07F10802 		add	r2, r7, #8
 1777 0066 1C4B     		ldr	r3, .L146+24
 1778 0068 0093     		str	r3, [sp]
 1779 006a 0190     		str	r0, [sp, #4]
 1780 006c 1B4B     		ldr	r3, .L146+28
 1781 006e 0293     		str	r3, [sp, #8]
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 45


 1782 0070 3B1D     		adds	r3, r7, #4
 1783 0072 1B68     		ldr	r3, [r3]
 1784 0074 0393     		str	r3, [sp, #12]
 1785 0076 1A4B     		ldr	r3, .L146+32
 1786 0078 0493     		str	r3, [sp, #16]
 1787 007a 0846     		mov	r0, r1
 1788 007c 1949     		ldr	r1, .L146+36
 1789 007e 1A4B     		ldr	r3, .L146+40
 1790 0080 FFF7FEFF 		bl	sprintf
 634:.\modem.c     **** 	                put_str,
 635:.\modem.c     **** 	                "Host: ec2-54-148-229-234.us-west-2.compute.amazonaws.com:8086\r\n",
 636:.\modem.c     **** 	                "Content-Length: ", strlen(body),
 637:.\modem.c     **** 	                "\r\n\r\n", body, "\r\n\032");
 638:.\modem.c     **** 	                // change second from last back to body
 639:.\modem.c     **** 				// Reset uart for incoming data from modem
 640:.\modem.c     **** 	            uart_string_reset();
 1791              		.loc 1 640 0
 1792 0084 FFF7FEFF 		bl	uart_string_reset
 641:.\modem.c     **** 
 642:.\modem.c     **** 				if(at_write_command(put_str,"SRING: 1",10000u) != 0){
 1793              		.loc 1 642 0
 1794 0088 07F10803 		add	r3, r7, #8
 1795 008c 1846     		mov	r0, r3
 1796 008e 1749     		ldr	r1, .L146+44
 1797 0090 42F21072 		movw	r2, #10000
 1798 0094 FFF7FEFF 		bl	at_write_command
 1799 0098 0346     		mov	r3, r0
 1800 009a 002B     		cmp	r3, #0
 1801 009c 09D0     		beq	.L143
 643:.\modem.c     ****                     // Read GET response from the buffer
 644:.\modem.c     ****                     uart_string_reset();
 1802              		.loc 1 644 0
 1803 009e FFF7FEFF 		bl	uart_string_reset
 645:.\modem.c     ****                     //CyDelay(5000u);
 646:.\modem.c     ****                     at_write_command("AT#SRECV=1,1000\r","200 OK",10000u);
 1804              		.loc 1 646 0
 1805 00a2 1348     		ldr	r0, .L146+48
 1806 00a4 1349     		ldr	r1, .L146+52
 1807 00a6 42F21072 		movw	r2, #10000
 1808 00aa FFF7FEFF 		bl	at_write_command
 647:.\modem.c     **** 					
 648:.\modem.c     ****                     return 1u;   // return 1 if succesfully sent sms
 1809              		.loc 1 648 0
 1810 00ae 0123     		movs	r3, #1
 1811 00b0 00E0     		b	.L145
 1812              	.L143:
 1813              	.LBE3:
 649:.\modem.c     **** 
 650:.\modem.c     ****                 }
 651:.\modem.c     **** 				/* GC 864
 652:.\modem.c     **** 	            if(at_write_command(put_str,"200 OK",15000u) != 0){
 653:.\modem.c     **** 	                return 1u;   // return 1 if HTTP request was successful
 654:.\modem.c     **** 	            }
 655:.\modem.c     **** 				*/
 656:.\modem.c     ****             }
 657:.\modem.c     ****             /* Write to SD Card debugger
 658:.\modem.c     ****             else {
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 46


 659:.\modem.c     ****                 debug_write("(AT#SSEND=1) Could not send data through connected socket.");
 660:.\modem.c     ****             }
 661:.\modem.c     ****             */
 662:.\modem.c     ****         }
 663:.\modem.c     ****         /* Write to SD Card debugger
 664:.\modem.c     ****         else {
 665:.\modem.c     ****             debug_write("(AT#SD=1,0,8081,\"api.xively.com\",0,0,1\r) Could not connect to server.")
 666:.\modem.c     ****         }
 667:.\modem.c     ****         */
 668:.\modem.c     ****     }        
 669:.\modem.c     ****     //}  
 670:.\modem.c     **** 	//modem_reset();
 671:.\modem.c     ****     return 0u;   // return 0 if failure to send sms
 1814              		.loc 1 671 0
 1815 00b2 0023     		movs	r3, #0
 1816              	.L145:
 672:.\modem.c     **** }
 1817              		.loc 1 672 0
 1818 00b4 1846     		mov	r0, r3
 1819 00b6 07F57C77 		add	r7, r7, #1008
 1820              		.cfi_def_cfa_offset 16
 1821 00ba BD46     		mov	sp, r7
 1822              		.cfi_def_cfa_register 13
 1823              		@ sp needed
 1824 00bc B0BD     		pop	{r4, r5, r7, pc}
 1825              	.L147:
 1826 00be 00BF     		.align	2
 1827              	.L146:
 1828 00c0 00000000 		.word	modem_state
 1829 00c4 48010000 		.word	.LC26
 1830 00c8 14000000 		.word	.LC2
 1831 00cc 94010000 		.word	.LC27
 1832 00d0 A0010000 		.word	.LC28
 1833 00d4 A4010000 		.word	.LC29
 1834 00d8 20020000 		.word	.LC32
 1835 00dc 34020000 		.word	.LC33
 1836 00e0 3C020000 		.word	.LC34
 1837 00e4 D0010000 		.word	.LC30
 1838 00e8 E0010000 		.word	.LC31
 1839 00ec 40020000 		.word	.LC35
 1840 00f0 4C020000 		.word	.LC36
 1841 00f4 60020000 		.word	.LC37
 1842              		.cfi_endproc
 1843              	.LFE83:
 1844              		.size	modem_send_packet, .-modem_send_packet
 1845              		.section	.rodata
 1846 0267 00       		.align	2
 1847              	.LC38:
 1848 0268 41542353 		.ascii	"AT#SD=1,0,80,\"api.xively.com\",0,0,1\015\012\000"
 1848      443D312C 
 1848      302C3830 
 1848      2C226170 
 1848      692E7869 
 1849 028e 0000     		.align	2
 1850              	.LC39:
 1851 0290 47455420 		.ascii	"GET /v2/feeds/%lu.csv?datastreams=%s HTTP/1.0\015\012"
 1851      2F76322F 
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 47


 1851      66656564 
 1851      732F256C 
 1851      752E6373 
 1852 02bf 00       		.ascii	"\000"
 1853              		.align	2
 1854              	.LC40:
 1855 02c0 582D4170 		.ascii	"X-ApiKey: %s\015\012\000"
 1855      694B6579 
 1855      3A202573 
 1855      0D0A00
 1856 02cf 00       		.align	2
 1857              	.LC41:
 1858 02d0 25732573 		.ascii	"%s%s%s%s%s\000"
 1858      25732573 
 1858      257300
 1859 02db 00       		.align	2
 1860              	.LC42:
 1861 02dc 486F7374 		.ascii	"Host: api.xively.com\015\012\000"
 1861      3A206170 
 1861      692E7869 
 1861      76656C79 
 1861      2E636F6D 
 1862 02f3 00       		.align	2
 1863              	.LC43:
 1864 02f4 41636365 		.ascii	"Accept: text/csv\015\012\000"
 1864      70743A20 
 1864      74657874 
 1864      2F637376 
 1864      0D0A00
 1865 0307 00       		.align	2
 1866              	.LC44:
 1867 0308 0D0A1A0D 		.ascii	"\015\012\032\015\000"
 1867      00
 1868              		.section	.text.modem_get_packet,"ax",%progbits
 1869              		.align	2
 1870              		.global	modem_get_packet
 1871              		.thumb
 1872              		.thumb_func
 1873              		.type	modem_get_packet, %function
 1874              	modem_get_packet:
 1875              	.LFB84:
 673:.\modem.c     **** 
 674:.\modem.c     **** 
 675:.\modem.c     **** // read packet from Xively server
 676:.\modem.c     **** uint8 modem_get_packet(char* packet, char* csv){    
 1876              		.loc 1 676 0
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 1112
 1879              		@ frame_needed = 1, uses_anonymous_args = 0
 1880 0000 90B5     		push	{r4, r7, lr}
 1881              		.cfi_def_cfa_offset 12
 1882              		.cfi_offset 4, -12
 1883              		.cfi_offset 7, -8
 1884              		.cfi_offset 14, -4
 1885 0002 ADF26C4D 		subw	sp, sp, #1132
 1886              		.cfi_def_cfa_offset 1144
 1887 0006 04AF     		add	r7, sp, #16
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 48


 1888              		.cfi_def_cfa 7, 1128
 1889 0008 3B1D     		adds	r3, r7, #4
 1890 000a 1860     		str	r0, [r3]
 1891 000c 3B46     		mov	r3, r7
 1892 000e 1960     		str	r1, [r3]
 677:.\modem.c     **** 
 678:.\modem.c     **** 	// Check if request is too long
 679:.\modem.c     ****     if (strlen(csv) > 125) {
 1893              		.loc 1 679 0
 1894 0010 3B46     		mov	r3, r7
 1895 0012 1868     		ldr	r0, [r3]
 1896 0014 FFF7FEFF 		bl	strlen
 1897 0018 0346     		mov	r3, r0
 1898 001a 7D2B     		cmp	r3, #125
 1899 001c 01D9     		bls	.L149
 680:.\modem.c     ****         /* Write to SD Card debugger
 681:.\modem.c     ****         debug_write("modem_get_packet(): csv length > 100");
 682:.\modem.c     ****         */
 683:.\modem.c     ****         return 0u;
 1900              		.loc 1 683 0
 1901 001e 0023     		movs	r3, #0
 1902 0020 5CE0     		b	.L150
 1903              	.L149:
 684:.\modem.c     ****     }
 685:.\modem.c     **** 	
 686:.\modem.c     **** 	// Changed to handle looping in main()
 687:.\modem.c     ****     //uint8 attempts = 0;            
 688:.\modem.c     ****     //for(attempts = 0; attempts < MAX_GET_ATTEMPTS; attempts++) {
 689:.\modem.c     ****         // Proceed if modem is already connected.  Otherwise, try to join the network and proceed
 690:.\modem.c     ****     if( modem_state == MODEM_STATE_READY ){ 
 1904              		.loc 1 690 0
 1905 0022 314B     		ldr	r3, .L153
 1906 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1907 0026 032B     		cmp	r3, #3
 1908 0028 57D1     		bne	.L151
 691:.\modem.c     **** 		// Connect to server
 692:.\modem.c     ****         if(at_write_command("AT#SD=1,0,80,\"api.xively.com\",0,0,1\r\n","OK",20000u) != 0){
 1909              		.loc 1 692 0
 1910 002a 3048     		ldr	r0, .L153+4
 1911 002c 3049     		ldr	r1, .L153+8
 1912 002e 44F62062 		movw	r2, #20000
 1913 0032 FFF7FEFF 		bl	at_write_command
 1914 0036 0346     		mov	r3, r0
 1915 0038 002B     		cmp	r3, #0
 1916 003a 4ED0     		beq	.L151
 693:.\modem.c     **** 			
 694:.\modem.c     **** 			if(at_write_command("AT#SSEND=1\r",">",10000u) != 0){
 1917              		.loc 1 694 0
 1918 003c 2D48     		ldr	r0, .L153+12
 1919 003e 2E49     		ldr	r1, .L153+16
 1920 0040 42F21072 		movw	r2, #10000
 1921 0044 FFF7FEFF 		bl	at_write_command
 1922 0048 0346     		mov	r3, r0
 1923 004a 002B     		cmp	r3, #0
 1924 004c 45D0     		beq	.L151
 1925              	.LBB4:
 695:.\modem.c     **** 				// Write packet information to serial and send
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 49


 696:.\modem.c     **** 	            char get_str[MAX_PACKET_LENGTH], key_str[100];
 697:.\modem.c     **** 				
 698:.\modem.c     **** 	            sprintf(get_str,"GET /v2/feeds/%lu.csv?datastreams=%s HTTP/1.0\r\n", feed_id, csv);
 1926              		.loc 1 698 0
 1927 004e 2B4B     		ldr	r3, .L153+20
 1928 0050 1A68     		ldr	r2, [r3]
 1929 0052 07F17001 		add	r1, r7, #112
 1930 0056 3B46     		mov	r3, r7
 1931 0058 0846     		mov	r0, r1
 1932 005a 2949     		ldr	r1, .L153+24
 1933 005c 1B68     		ldr	r3, [r3]
 1934 005e FFF7FEFF 		bl	sprintf
 699:.\modem.c     **** 	            sprintf(key_str,"X-ApiKey: %s\r\n", api_key);
 1935              		.loc 1 699 0
 1936 0062 284B     		ldr	r3, .L153+28
 1937 0064 1B68     		ldr	r3, [r3]
 1938 0066 07F10C02 		add	r2, r7, #12
 1939 006a 1046     		mov	r0, r2
 1940 006c 2649     		ldr	r1, .L153+32
 1941 006e 1A46     		mov	r2, r3
 1942 0070 FFF7FEFF 		bl	sprintf
 700:.\modem.c     **** 	            sprintf(get_str,"%s%s%s%s%s",
 1943              		.loc 1 700 0
 1944 0074 07F17001 		add	r1, r7, #112
 1945 0078 07F17002 		add	r2, r7, #112
 1946 007c 07F10C04 		add	r4, r7, #12
 1947 0080 224B     		ldr	r3, .L153+36
 1948 0082 0093     		str	r3, [sp]
 1949 0084 224B     		ldr	r3, .L153+40
 1950 0086 0193     		str	r3, [sp, #4]
 1951 0088 224B     		ldr	r3, .L153+44
 1952 008a 0293     		str	r3, [sp, #8]
 1953 008c 0846     		mov	r0, r1
 1954 008e 2249     		ldr	r1, .L153+48
 1955 0090 2346     		mov	r3, r4
 1956 0092 FFF7FEFF 		bl	sprintf
 701:.\modem.c     **** 	                get_str,
 702:.\modem.c     **** 	                key_str,
 703:.\modem.c     **** 	                "Host: api.xively.com\r\n",
 704:.\modem.c     **** 	                "Accept: text/csv\r\n",
 705:.\modem.c     **** 	                "\r\n\032\r");
 706:.\modem.c     **** 	            
 707:.\modem.c     **** 				// Reset uart for incoming data from modem
 708:.\modem.c     **** 	            uart_string_reset();
 1957              		.loc 1 708 0
 1958 0096 FFF7FEFF 		bl	uart_string_reset
 709:.\modem.c     **** 				
 710:.\modem.c     **** 			    if(at_write_command(get_str,"SRING: 1",10000u) != 0){
 1959              		.loc 1 710 0
 1960 009a 07F17003 		add	r3, r7, #112
 1961 009e 1846     		mov	r0, r3
 1962 00a0 1E49     		ldr	r1, .L153+52
 1963 00a2 42F21072 		movw	r2, #10000
 1964 00a6 FFF7FEFF 		bl	at_write_command
 1965 00aa 0346     		mov	r3, r0
 1966 00ac 002B     		cmp	r3, #0
 1967 00ae 14D0     		beq	.L151
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 50


 711:.\modem.c     ****                     // Read GET response from the buffer
 712:.\modem.c     ****                     uart_string_reset();
 1968              		.loc 1 712 0
 1969 00b0 FFF7FEFF 		bl	uart_string_reset
 713:.\modem.c     ****                     //CyDelay(5000u);
 714:.\modem.c     ****                     at_write_command("AT#SRECV=1,1000\r","OK",10000u);
 1970              		.loc 1 714 0
 1971 00b4 1A48     		ldr	r0, .L153+56
 1972 00b6 0E49     		ldr	r1, .L153+8
 1973 00b8 42F21072 		movw	r2, #10000
 1974 00bc FFF7FEFF 		bl	at_write_command
 715:.\modem.c     ****                     //strcpy(packet, uart_received_string);
 716:.\modem.c     ****                     strcpy(packet, strstr(uart_received_string, "\r\n\r\n")+strlen("\r\n\r\n"));
 1975              		.loc 1 716 0
 1976 00c0 1848     		ldr	r0, .L153+60
 1977 00c2 1949     		ldr	r1, .L153+64
 1978 00c4 FFF7FEFF 		bl	strstr
 1979 00c8 0346     		mov	r3, r0
 1980 00ca 1A1D     		adds	r2, r3, #4
 1981 00cc 3B1D     		adds	r3, r7, #4
 1982 00ce 1868     		ldr	r0, [r3]
 1983 00d0 1146     		mov	r1, r2
 1984 00d2 FFF7FEFF 		bl	strcpy
 717:.\modem.c     ****                     
 718:.\modem.c     ****                     //debug_write("Packet received successfully.");
 719:.\modem.c     ****                     return 1u;   // return 1 if successful
 1985              		.loc 1 719 0
 1986 00d6 0123     		movs	r3, #1
 1987 00d8 00E0     		b	.L150
 1988              	.L151:
 1989              	.LBE4:
 720:.\modem.c     **** 
 721:.\modem.c     ****                 }
 722:.\modem.c     **** 				
 723:.\modem.c     **** 				/* GC864
 724:.\modem.c     **** 	            if(at_write_command(get_str,"200 OK",15000u) != 0){
 725:.\modem.c     **** 					strcpy(packet, strstr(uart_received_string, "\r\n\r\n")+strlen("\r\n\r\n"));
 726:.\modem.c     **** 	                return 1u;   // return 1 if HTTP request was successful
 727:.\modem.c     **** 	            }
 728:.\modem.c     **** 				*/
 729:.\modem.c     ****             }
 730:.\modem.c     **** 			/* OLD, method used AT#SD=1,0,80,\"api.xively.com\",0,0,1 combined with SSEND
 731:.\modem.c     ****             if(at_write_command(get_str,"SRING: 1",15000u) != 0){
 732:.\modem.c     ****                 // Read GET response from the buffer
 733:.\modem.c     ****                 uart_string_reset();
 734:.\modem.c     ****                 //CyDelay(5000u);
 735:.\modem.c     ****                 at_write_command("AT#SRECV=1,700\r","OK",15000u);
 736:.\modem.c     ****                 //strcpy(packet, uart_received_string);
 737:.\modem.c     ****                 strcpy(packet, strstr(uart_received_string, "\r\n\r\n")+strlen("\r\n\r\n"));
 738:.\modem.c     ****                 
 739:.\modem.c     ****                 CyDelay(1000u); //debug_write("Packet received successfully.");
 740:.\modem.c     ****                 return 1u;   // return 1 if succesfully sent sms
 741:.\modem.c     **** 
 742:.\modem.c     ****             }
 743:.\modem.c     **** 			*/
 744:.\modem.c     **** 			
 745:.\modem.c     ****             /* Write to SD Card debugger
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 51


 746:.\modem.c     ****             else {
 747:.\modem.c     ****                 debug_write("(at_write_command(sendBuffer,\"OK\"...) Data sent unsuccessfully.");
 748:.\modem.c     ****             }
 749:.\modem.c     ****             */
 750:.\modem.c     **** 
 751:.\modem.c     ****             //uint8 disconnected = modem_disconnect();
 752:.\modem.c     ****         }
 753:.\modem.c     ****             /* Write to SD Card debugger
 754:.\modem.c     ****             else {
 755:.\modem.c     ****                 debug_write("(AT#SD=1,0,80,\"api.xively.com\",0,0,1) Could not connect to server.")
 756:.\modem.c     ****             }
 757:.\modem.c     ****             */
 758:.\modem.c     ****         /*}
 759:.\modem.c     ****         
 760:.\modem.c     ****         if (attempts < MAX_GET_ATTEMPTS-1) { // Don't reset the modem on the last attempt since it 
 761:.\modem.c     ****             modem_reset();
 762:.\modem.c     ****         }
 763:.\modem.c     ****         */
 764:.\modem.c     ****     }
 765:.\modem.c     ****     //modem_disconnect();
 766:.\modem.c     ****     return 0u;   // return 0 if failure to send sms
 1990              		.loc 1 766 0
 1991 00da 0023     		movs	r3, #0
 1992              	.L150:
 767:.\modem.c     **** }
 1993              		.loc 1 767 0
 1994 00dc 1846     		mov	r0, r3
 1995 00de 07F25C47 		addw	r7, r7, #1116
 1996              		.cfi_def_cfa_offset 12
 1997 00e2 BD46     		mov	sp, r7
 1998              		.cfi_def_cfa_register 13
 1999              		@ sp needed
 2000 00e4 90BD     		pop	{r4, r7, pc}
 2001              	.L154:
 2002 00e6 00BF     		.align	2
 2003              	.L153:
 2004 00e8 00000000 		.word	modem_state
 2005 00ec 68020000 		.word	.LC38
 2006 00f0 14000000 		.word	.LC2
 2007 00f4 94010000 		.word	.LC27
 2008 00f8 A0010000 		.word	.LC28
 2009 00fc 00000000 		.word	feed_id
 2010 0100 90020000 		.word	.LC39
 2011 0104 00000000 		.word	api_key
 2012 0108 C0020000 		.word	.LC40
 2013 010c DC020000 		.word	.LC42
 2014 0110 F4020000 		.word	.LC43
 2015 0114 08030000 		.word	.LC44
 2016 0118 D0020000 		.word	.LC41
 2017 011c 40020000 		.word	.LC35
 2018 0120 4C020000 		.word	.LC36
 2019 0124 00000000 		.word	uart_received_string
 2020 0128 34020000 		.word	.LC33
 2021              		.cfi_endproc
 2022              	.LFE84:
 2023              		.size	modem_get_packet, .-modem_get_packet
 2024              		.section	.rodata
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 52


 2025 030d 000000   		.align	2
 2026              	.LC45:
 2027 0310 6C6F636B 		.ascii	"lock\000"
 2027      00
 2028 0315 000000   		.align	2
 2029              	.LC46:
 2030 0318 7B226D65 		.ascii	"{\"method\":\"put\",\"resource\":\"/feeds/%lu\",\"h"
 2030      74686F64 
 2030      223A2270 
 2030      7574222C 
 2030      22726573 
 2031 0342 65616465 		.ascii	"eaders\":{\"X-ApiKey\":\"%s\"},\"body\":{\"version\""
 2031      7273223A 
 2031      7B22582D 
 2031      4170694B 
 2031      6579223A 
 2032 036d 3A22312E 		.ascii	":\"1.0.0\",\"datastreams\":[{ \"id\" : \"lock\", \""
 2032      302E3022 
 2032      2C226461 
 2032      74617374 
 2032      7265616D 
 2033 0397 63757272 		.ascii	"current_value\" : \"%u\"}]}}\000"
 2033      656E745F 
 2033      76616C75 
 2033      6522203A 
 2033      20222575 
 2034 03b1 000000   		.section	.text.modem_acquire_lock,"ax",%progbits
 2035              		.align	2
 2036              		.global	modem_acquire_lock
 2037              		.thumb
 2038              		.thumb_func
 2039              		.type	modem_acquire_lock, %function
 2040              	modem_acquire_lock:
 2041              	.LFB85:
 768:.\modem.c     **** 
 769:.\modem.c     **** uint8 modem_acquire_lock(){
 2042              		.loc 1 769 0
 2043              		.cfi_startproc
 2044              		@ args = 0, pretend = 0, frame = 320
 2045              		@ frame_needed = 1, uses_anonymous_args = 0
 2046 0000 90B5     		push	{r4, r7, lr}
 2047              		.cfi_def_cfa_offset 12
 2048              		.cfi_offset 4, -12
 2049              		.cfi_offset 7, -8
 2050              		.cfi_offset 14, -4
 2051 0002 D3B0     		sub	sp, sp, #332
 2052              		.cfi_def_cfa_offset 344
 2053 0004 02AF     		add	r7, sp, #8
 2054              		.cfi_def_cfa 7, 336
 770:.\modem.c     ****     
 771:.\modem.c     ****     /*
 772:.\modem.c     ****     if (lock_acquired == 1u) {
 773:.\modem.c     ****         return 1u;
 774:.\modem.c     ****     }
 775:.\modem.c     ****     */
 776:.\modem.c     ****     
 777:.\modem.c     ****     uint8 lock = 0u;
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 53


 2055              		.loc 1 777 0
 2056 0006 0023     		movs	r3, #0
 2057 0008 87F83331 		strb	r3, [r7, #307]
 778:.\modem.c     ****     uint32 i = 0u, delay = 100u, lock_attempts = 2u;    
 2058              		.loc 1 778 0
 2059 000c 0023     		movs	r3, #0
 2060 000e C7F83C31 		str	r3, [r7, #316]
 2061 0012 6423     		movs	r3, #100
 2062 0014 C7F83831 		str	r3, [r7, #312]
 2063 0018 0223     		movs	r3, #2
 2064 001a C7F83431 		str	r3, [r7, #308]
 779:.\modem.c     ****     char data_packet[300] = {0};
 2065              		.loc 1 779 0
 2066 001e 3B1D     		adds	r3, r7, #4
 2067 0020 1A46     		mov	r2, r3
 2068 0022 4FF49673 		mov	r3, #300
 2069 0026 1046     		mov	r0, r2
 2070 0028 0021     		movs	r1, #0
 2071 002a 1A46     		mov	r2, r3
 2072 002c FFF7FEFF 		bl	memset
 780:.\modem.c     ****             
 781:.\modem.c     ****     for(i=0u; i < lock_attempts; i++) {
 2073              		.loc 1 781 0
 2074 0030 0023     		movs	r3, #0
 2075 0032 C7F83C31 		str	r3, [r7, #316]
 2076 0036 3EE0     		b	.L156
 2077              	.L159:
 782:.\modem.c     ****         if(modem_get_packet(data_packet,"lock")){
 2078              		.loc 1 782 0
 2079 0038 3B1D     		adds	r3, r7, #4
 2080 003a 1846     		mov	r0, r3
 2081 003c 2449     		ldr	r1, .L161
 2082 003e FFF7FEFF 		bl	modem_get_packet
 2083 0042 0346     		mov	r3, r0
 2084 0044 002B     		cmp	r3, #0
 2085 0046 2DD0     		beq	.L157
 783:.\modem.c     ****             if(packet_get_uint8(data_packet, "lock", &lock) && lock == 0u){
 2086              		.loc 1 783 0
 2087 0048 3A1D     		adds	r2, r7, #4
 2088 004a 07F23313 		addw	r3, r7, #307
 2089 004e 1046     		mov	r0, r2
 2090 0050 1F49     		ldr	r1, .L161
 2091 0052 1A46     		mov	r2, r3
 2092 0054 FFF7FEFF 		bl	packet_get_uint8
 2093 0058 0346     		mov	r3, r0
 2094 005a 002B     		cmp	r3, #0
 2095 005c 22D0     		beq	.L157
 2096              		.loc 1 783 0 is_stmt 0 discriminator 1
 2097 005e 97F83331 		ldrb	r3, [r7, #307]	@ zero_extendqisi2
 2098 0062 002B     		cmp	r3, #0
 2099 0064 1ED1     		bne	.L157
 784:.\modem.c     ****             
 785:.\modem.c     ****                 memset(&data_packet[0],0,sizeof(data_packet));
 2100              		.loc 1 785 0 is_stmt 1
 2101 0066 3B1D     		adds	r3, r7, #4
 2102 0068 1846     		mov	r0, r3
 2103 006a 0021     		movs	r1, #0
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 54


 2104 006c 4FF49672 		mov	r2, #300
 2105 0070 FFF7FEFF 		bl	memset
 786:.\modem.c     ****                 sprintf(data_packet, "{"
 2106              		.loc 1 786 0
 2107 0074 174B     		ldr	r3, .L161+4
 2108 0076 1A68     		ldr	r2, [r3]
 2109 0078 174B     		ldr	r3, .L161+8
 2110 007a 1C68     		ldr	r4, [r3]
 2111 007c 391D     		adds	r1, r7, #4
 2112 007e 0123     		movs	r3, #1
 2113 0080 0093     		str	r3, [sp]
 2114 0082 0846     		mov	r0, r1
 2115 0084 1549     		ldr	r1, .L161+12
 2116 0086 2346     		mov	r3, r4
 2117 0088 FFF7FEFF 		bl	sprintf
 787:.\modem.c     ****                       "\"method\":\"put\","
 788:.\modem.c     ****                       "\"resource\":\"/feeds/%lu\","
 789:.\modem.c     ****                       "\"headers\":{\"X-ApiKey\":\"%s\"},"
 790:.\modem.c     ****                       "\"body\":{\"version\":\"1.0.0\",\"datastreams\":["
 791:.\modem.c     ****                             "{ \"id\" : \"lock\", \"current_value\" : \"%u\"}"
 792:.\modem.c     ****                       "]}}",
 793:.\modem.c     ****                       feed_id,api_key,1u);
 794:.\modem.c     ****                       
 795:.\modem.c     ****                 if(modem_send_packet(data_packet)) {
 2118              		.loc 1 795 0
 2119 008c 3B1D     		adds	r3, r7, #4
 2120 008e 1846     		mov	r0, r3
 2121 0090 FFF7FEFF 		bl	modem_send_packet
 2122 0094 0346     		mov	r3, r0
 2123 0096 002B     		cmp	r3, #0
 2124 0098 04D0     		beq	.L157
 796:.\modem.c     ****                     lock_acquired = 1u;
 2125              		.loc 1 796 0
 2126 009a 114B     		ldr	r3, .L161+16
 2127 009c 0122     		movs	r2, #1
 2128 009e 1A70     		strb	r2, [r3]
 797:.\modem.c     ****                     return 1u;
 2129              		.loc 1 797 0
 2130 00a0 0123     		movs	r3, #1
 2131 00a2 0FE0     		b	.L160
 2132              	.L157:
 798:.\modem.c     ****                 }
 799:.\modem.c     ****             }  
 800:.\modem.c     ****         }
 801:.\modem.c     ****         CyDelay(delay);
 2133              		.loc 1 801 0 discriminator 2
 2134 00a4 D7F83801 		ldr	r0, [r7, #312]
 2135 00a8 FFF7FEFF 		bl	CyDelay
 781:.\modem.c     ****         if(modem_get_packet(data_packet,"lock")){
 2136              		.loc 1 781 0 discriminator 2
 2137 00ac D7F83C31 		ldr	r3, [r7, #316]
 2138 00b0 0133     		adds	r3, r3, #1
 2139 00b2 C7F83C31 		str	r3, [r7, #316]
 2140              	.L156:
 781:.\modem.c     ****         if(modem_get_packet(data_packet,"lock")){
 2141              		.loc 1 781 0 is_stmt 0 discriminator 1
 2142 00b6 D7F83C21 		ldr	r2, [r7, #316]
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 55


 2143 00ba D7F83431 		ldr	r3, [r7, #308]
 2144 00be 9A42     		cmp	r2, r3
 2145 00c0 BAD3     		bcc	.L159
 802:.\modem.c     ****     }
 803:.\modem.c     ****          
 804:.\modem.c     ****     return 0u;
 2146              		.loc 1 804 0 is_stmt 1
 2147 00c2 0023     		movs	r3, #0
 2148              	.L160:
 805:.\modem.c     **** }
 2149              		.loc 1 805 0 discriminator 1
 2150 00c4 1846     		mov	r0, r3
 2151 00c6 07F5A277 		add	r7, r7, #324
 2152              		.cfi_def_cfa_offset 12
 2153 00ca BD46     		mov	sp, r7
 2154              		.cfi_def_cfa_register 13
 2155              		@ sp needed
 2156 00cc 90BD     		pop	{r4, r7, pc}
 2157              	.L162:
 2158 00ce 00BF     		.align	2
 2159              	.L161:
 2160 00d0 10030000 		.word	.LC45
 2161 00d4 00000000 		.word	feed_id
 2162 00d8 00000000 		.word	api_key
 2163 00dc 18030000 		.word	.LC46
 2164 00e0 00000000 		.word	lock_acquired
 2165              		.cfi_endproc
 2166              	.LFE85:
 2167              		.size	modem_acquire_lock, .-modem_acquire_lock
 2168              		.section	.text.modem_release_lock,"ax",%progbits
 2169              		.align	2
 2170              		.global	modem_release_lock
 2171              		.thumb
 2172              		.thumb_func
 2173              		.type	modem_release_lock, %function
 2174              	modem_release_lock:
 2175              	.LFB86:
 806:.\modem.c     **** 
 807:.\modem.c     **** uint8 modem_release_lock(){
 2176              		.loc 1 807 0
 2177              		.cfi_startproc
 2178              		@ args = 0, pretend = 0, frame = 312
 2179              		@ frame_needed = 1, uses_anonymous_args = 0
 2180 0000 90B5     		push	{r4, r7, lr}
 2181              		.cfi_def_cfa_offset 12
 2182              		.cfi_offset 4, -12
 2183              		.cfi_offset 7, -8
 2184              		.cfi_offset 14, -4
 2185 0002 D1B0     		sub	sp, sp, #324
 2186              		.cfi_def_cfa_offset 336
 2187 0004 02AF     		add	r7, sp, #8
 2188              		.cfi_def_cfa 7, 328
 808:.\modem.c     ****     /*
 809:.\modem.c     ****     if (lock_acquired == 0u) {
 810:.\modem.c     ****         return 1u;
 811:.\modem.c     ****     }
 812:.\modem.c     ****     */
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 56


 813:.\modem.c     ****     
 814:.\modem.c     ****     uint32 i = 0u, delay = 100u, lock_attempts = 2u;    
 2189              		.loc 1 814 0
 2190 0006 0023     		movs	r3, #0
 2191 0008 C7F83431 		str	r3, [r7, #308]
 2192 000c 6423     		movs	r3, #100
 2193 000e C7F83031 		str	r3, [r7, #304]
 2194 0012 0223     		movs	r3, #2
 2195 0014 C7F82C31 		str	r3, [r7, #300]
 815:.\modem.c     ****     char data_packet[300] = {0};
 2196              		.loc 1 815 0
 2197 0018 3B46     		mov	r3, r7
 2198 001a 1A46     		mov	r2, r3
 2199 001c 4FF49673 		mov	r3, #300
 2200 0020 1046     		mov	r0, r2
 2201 0022 0021     		movs	r1, #0
 2202 0024 1A46     		mov	r2, r3
 2203 0026 FFF7FEFF 		bl	memset
 816:.\modem.c     ****     
 817:.\modem.c     ****     sprintf(data_packet, "{"
 2204              		.loc 1 817 0
 2205 002a 184B     		ldr	r3, .L169
 2206 002c 1A68     		ldr	r2, [r3]
 2207 002e 184B     		ldr	r3, .L169+4
 2208 0030 1C68     		ldr	r4, [r3]
 2209 0032 3946     		mov	r1, r7
 2210 0034 0023     		movs	r3, #0
 2211 0036 0093     		str	r3, [sp]
 2212 0038 0846     		mov	r0, r1
 2213 003a 1649     		ldr	r1, .L169+8
 2214 003c 2346     		mov	r3, r4
 2215 003e FFF7FEFF 		bl	sprintf
 818:.\modem.c     ****           "\"method\":\"put\","
 819:.\modem.c     ****           "\"resource\":\"/feeds/%lu\","
 820:.\modem.c     ****           "\"headers\":{\"X-ApiKey\":\"%s\"},"
 821:.\modem.c     ****           "\"body\":{\"version\":\"1.0.0\",\"datastreams\":["
 822:.\modem.c     ****                 "{ \"id\" : \"lock\", \"current_value\" : \"%u\"}"
 823:.\modem.c     ****           "]}}",
 824:.\modem.c     ****           feed_id, api_key, 0u);
 825:.\modem.c     ****         
 826:.\modem.c     ****     for(i=0u; i < lock_attempts; i++) {
 2216              		.loc 1 826 0
 2217 0042 0023     		movs	r3, #0
 2218 0044 C7F83431 		str	r3, [r7, #308]
 2219 0048 14E0     		b	.L164
 2220              	.L167:
 827:.\modem.c     **** 
 828:.\modem.c     ****         if(modem_send_packet(data_packet)) {
 2221              		.loc 1 828 0
 2222 004a 3B46     		mov	r3, r7
 2223 004c 1846     		mov	r0, r3
 2224 004e FFF7FEFF 		bl	modem_send_packet
 2225 0052 0346     		mov	r3, r0
 2226 0054 002B     		cmp	r3, #0
 2227 0056 04D0     		beq	.L165
 829:.\modem.c     ****             lock_acquired = 0u;
 2228              		.loc 1 829 0
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 57


 2229 0058 0F4B     		ldr	r3, .L169+12
 2230 005a 0022     		movs	r2, #0
 2231 005c 1A70     		strb	r2, [r3]
 830:.\modem.c     ****             return 1u;
 2232              		.loc 1 830 0
 2233 005e 0123     		movs	r3, #1
 2234 0060 0FE0     		b	.L168
 2235              	.L165:
 831:.\modem.c     ****         }
 832:.\modem.c     ****         
 833:.\modem.c     ****         CyDelay(delay);
 2236              		.loc 1 833 0 discriminator 2
 2237 0062 D7F83001 		ldr	r0, [r7, #304]
 2238 0066 FFF7FEFF 		bl	CyDelay
 826:.\modem.c     **** 
 2239              		.loc 1 826 0 discriminator 2
 2240 006a D7F83431 		ldr	r3, [r7, #308]
 2241 006e 0133     		adds	r3, r3, #1
 2242 0070 C7F83431 		str	r3, [r7, #308]
 2243              	.L164:
 826:.\modem.c     **** 
 2244              		.loc 1 826 0 is_stmt 0 discriminator 1
 2245 0074 D7F83421 		ldr	r2, [r7, #308]
 2246 0078 D7F82C31 		ldr	r3, [r7, #300]
 2247 007c 9A42     		cmp	r2, r3
 2248 007e E4D3     		bcc	.L167
 834:.\modem.c     ****     }
 835:.\modem.c     ****          
 836:.\modem.c     ****     return 0u;
 2249              		.loc 1 836 0 is_stmt 1
 2250 0080 0023     		movs	r3, #0
 2251              	.L168:
 837:.\modem.c     **** }
 2252              		.loc 1 837 0 discriminator 1
 2253 0082 1846     		mov	r0, r3
 2254 0084 07F59E77 		add	r7, r7, #316
 2255              		.cfi_def_cfa_offset 12
 2256 0088 BD46     		mov	sp, r7
 2257              		.cfi_def_cfa_register 13
 2258              		@ sp needed
 2259 008a 90BD     		pop	{r4, r7, pc}
 2260              	.L170:
 2261              		.align	2
 2262              	.L169:
 2263 008c 00000000 		.word	feed_id
 2264 0090 00000000 		.word	api_key
 2265 0094 18030000 		.word	.LC46
 2266 0098 00000000 		.word	lock_acquired
 2267              		.cfi_endproc
 2268              	.LFE86:
 2269              		.size	modem_release_lock, .-modem_release_lock
 2270              		.section	.text.uart_string_reset,"ax",%progbits
 2271              		.align	2
 2272              		.global	uart_string_reset
 2273              		.thumb
 2274              		.thumb_func
 2275              		.type	uart_string_reset, %function
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 58


 2276              	uart_string_reset:
 2277              	.LFB87:
 838:.\modem.c     **** 
 839:.\modem.c     **** void uart_string_reset(){
 2278              		.loc 1 839 0
 2279              		.cfi_startproc
 2280              		@ args = 0, pretend = 0, frame = 0
 2281              		@ frame_needed = 1, uses_anonymous_args = 0
 2282 0000 80B5     		push	{r7, lr}
 2283              		.cfi_def_cfa_offset 8
 2284              		.cfi_offset 7, -8
 2285              		.cfi_offset 14, -4
 2286 0002 00AF     		add	r7, sp, #0
 2287              		.cfi_def_cfa_register 7
 840:.\modem.c     ****     // reset uart_received_string to zero
 841:.\modem.c     ****     /*
 842:.\modem.c     ****     uint16 i = 0;
 843:.\modem.c     ****     
 844:.\modem.c     ****     for(i = 0; i < 700; i++){
 845:.\modem.c     ****         uart_received_string[i] = 0;
 846:.\modem.c     ****     }
 847:.\modem.c     ****     */
 848:.\modem.c     ****     memset(&uart_received_string[0],0,sizeof(uart_received_string));
 2288              		.loc 1 848 0
 2289 0004 0548     		ldr	r0, .L172
 2290 0006 0021     		movs	r1, #0
 2291 0008 4FF47A72 		mov	r2, #1000
 2292 000c FFF7FEFF 		bl	memset
 849:.\modem.c     ****     uart_string_index = 0;
 2293              		.loc 1 849 0
 2294 0010 034B     		ldr	r3, .L172+4
 2295 0012 0022     		movs	r2, #0
 2296 0014 1A80     		strh	r2, [r3]	@ movhi
 850:.\modem.c     ****     Telit_UART_ClearRxBuffer();
 2297              		.loc 1 850 0
 2298 0016 FFF7FEFF 		bl	Telit_UART_ClearRxBuffer
 851:.\modem.c     **** //    uart_ClearTxBuffer();
 852:.\modem.c     **** }
 2299              		.loc 1 852 0
 2300 001a 80BD     		pop	{r7, pc}
 2301              	.L173:
 2302              		.align	2
 2303              	.L172:
 2304 001c 00000000 		.word	uart_received_string
 2305 0020 00000000 		.word	uart_string_index
 2306              		.cfi_endproc
 2307              	.LFE87:
 2308              		.size	uart_string_reset, .-uart_string_reset
 2309              		.section	.text.modem_sleep,"ax",%progbits
 2310              		.align	2
 2311              		.global	modem_sleep
 2312              		.thumb
 2313              		.thumb_func
 2314              		.type	modem_sleep, %function
 2315              	modem_sleep:
 2316              	.LFB88:
 853:.\modem.c     **** 
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 59


 854:.\modem.c     **** void modem_sleep(){
 2317              		.loc 1 854 0
 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 0
 2320              		@ frame_needed = 1, uses_anonymous_args = 0
 2321 0000 80B5     		push	{r7, lr}
 2322              		.cfi_def_cfa_offset 8
 2323              		.cfi_offset 7, -8
 2324              		.cfi_offset 14, -4
 2325 0002 00AF     		add	r7, sp, #0
 2326              		.cfi_def_cfa_register 7
 855:.\modem.c     **** 	Telit_UART_Sleep();
 2327              		.loc 1 855 0
 2328 0004 FFF7FEFF 		bl	Telit_UART_Sleep
 856:.\modem.c     **** }
 2329              		.loc 1 856 0
 2330 0008 80BD     		pop	{r7, pc}
 2331              		.cfi_endproc
 2332              	.LFE88:
 2333              		.size	modem_sleep, .-modem_sleep
 2334 000a 00BF     		.section	.text.modem_wakeup,"ax",%progbits
 2335              		.align	2
 2336              		.global	modem_wakeup
 2337              		.thumb
 2338              		.thumb_func
 2339              		.type	modem_wakeup, %function
 2340              	modem_wakeup:
 2341              	.LFB89:
 857:.\modem.c     **** 
 858:.\modem.c     **** void modem_wakeup(){
 2342              		.loc 1 858 0
 2343              		.cfi_startproc
 2344              		@ args = 0, pretend = 0, frame = 0
 2345              		@ frame_needed = 1, uses_anonymous_args = 0
 2346 0000 80B5     		push	{r7, lr}
 2347              		.cfi_def_cfa_offset 8
 2348              		.cfi_offset 7, -8
 2349              		.cfi_offset 14, -4
 2350 0002 00AF     		add	r7, sp, #0
 2351              		.cfi_def_cfa_register 7
 859:.\modem.c     **** 	Telit_UART_Wakeup();
 2352              		.loc 1 859 0
 2353 0004 FFF7FEFF 		bl	Telit_UART_Wakeup
 860:.\modem.c     **** }
 2354              		.loc 1 860 0
 2355 0008 80BD     		pop	{r7, pc}
 2356              		.cfi_endproc
 2357              	.LFE89:
 2358              		.size	modem_wakeup, .-modem_wakeup
 2359 000a 00BF     		.section	.text.Telit_isr_rx,"ax",%progbits
 2360              		.align	2
 2361              		.global	Telit_isr_rx
 2362              		.thumb
 2363              		.thumb_func
 2364              		.type	Telit_isr_rx, %function
 2365              	Telit_isr_rx:
 2366              	.LFB90:
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 60


 861:.\modem.c     **** 
 862:.\modem.c     **** // this function fires when uart rx receives bytes (when modem is sending bytes)
 863:.\modem.c     **** CY_ISR(Telit_isr_rx){
 2367              		.loc 1 863 0
 2368              		.cfi_startproc
 2369              		@ args = 0, pretend = 0, frame = 8
 2370              		@ frame_needed = 1, uses_anonymous_args = 0
 2371 0000 80B5     		push	{r7, lr}
 2372              		.cfi_def_cfa_offset 8
 2373              		.cfi_offset 7, -8
 2374              		.cfi_offset 14, -4
 2375 0002 82B0     		sub	sp, sp, #8
 2376              		.cfi_def_cfa_offset 16
 2377 0004 00AF     		add	r7, sp, #0
 2378              		.cfi_def_cfa_register 7
 864:.\modem.c     ****     while (Telit_UART_GetRxBufferSize()){
 2379              		.loc 1 864 0
 2380 0006 12E0     		b	.L177
 2381              	.L178:
 2382              	.LBB5:
 865:.\modem.c     ****         // hold the next char in the rx register as a temporary variable
 866:.\modem.c     ****         char rx_char_hold = Telit_UART_GetChar();
 2383              		.loc 1 866 0
 2384 0008 FFF7FEFF 		bl	Telit_UART_GetChar
 2385 000c 0346     		mov	r3, r0
 2386 000e FB71     		strb	r3, [r7, #7]
 867:.\modem.c     ****         
 868:.\modem.c     ****         // store the char in uart_received_string
 869:.\modem.c     ****         if(rx_char_hold){
 2387              		.loc 1 869 0
 2388 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2389 0012 002B     		cmp	r3, #0
 2390 0014 0BD0     		beq	.L177
 870:.\modem.c     ****             uart_received_string[uart_string_index] = rx_char_hold;
 2391              		.loc 1 870 0
 2392 0016 0A4B     		ldr	r3, .L179
 2393 0018 1B88     		ldrh	r3, [r3]
 2394 001a 1946     		mov	r1, r3
 2395 001c 094A     		ldr	r2, .L179+4
 2396 001e FB79     		ldrb	r3, [r7, #7]
 2397 0020 5354     		strb	r3, [r2, r1]
 871:.\modem.c     ****             uart_string_index++;
 2398              		.loc 1 871 0
 2399 0022 074B     		ldr	r3, .L179
 2400 0024 1B88     		ldrh	r3, [r3]
 2401 0026 0133     		adds	r3, r3, #1
 2402 0028 9AB2     		uxth	r2, r3
 2403 002a 054B     		ldr	r3, .L179
 2404 002c 1A80     		strh	r2, [r3]	@ movhi
 2405              	.L177:
 2406              	.LBE5:
 864:.\modem.c     ****         // hold the next char in the rx register as a temporary variable
 2407              		.loc 1 864 0
 2408 002e FFF7FEFF 		bl	Telit_UART_GetRxBufferSize
 2409 0032 0346     		mov	r3, r0
 2410 0034 002B     		cmp	r3, #0
 2411 0036 E7D1     		bne	.L178
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 61


 872:.\modem.c     ****         }
 873:.\modem.c     ****     }
 874:.\modem.c     **** }
 2412              		.loc 1 874 0
 2413 0038 0837     		adds	r7, r7, #8
 2414              		.cfi_def_cfa_offset 8
 2415 003a BD46     		mov	sp, r7
 2416              		.cfi_def_cfa_register 13
 2417              		@ sp needed
 2418 003c 80BD     		pop	{r7, pc}
 2419              	.L180:
 2420 003e 00BF     		.align	2
 2421              	.L179:
 2422 0040 00000000 		.word	uart_string_index
 2423 0044 00000000 		.word	uart_received_string
 2424              		.cfi_endproc
 2425              	.LFE90:
 2426              		.size	Telit_isr_rx, .-Telit_isr_rx
 2427              		.text
 2428              	.Letext0:
 2429              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 2430              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 2431              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2432              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 2433              		.section	.debug_info,"",%progbits
 2434              	.Ldebug_info0:
 2435 0000 5A070000 		.4byte	0x75a
 2436 0004 0400     		.2byte	0x4
 2437 0006 00000000 		.4byte	.Ldebug_abbrev0
 2438 000a 04       		.byte	0x4
 2439 000b 01       		.uleb128 0x1
 2440 000c A7010000 		.4byte	.LASF84
 2441 0010 01       		.byte	0x1
 2442 0011 91000000 		.4byte	.LASF85
 2443 0015 A8020000 		.4byte	.LASF86
 2444 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2445 001d 00000000 		.4byte	0
 2446 0021 00000000 		.4byte	.Ldebug_line0
 2447 0025 02       		.uleb128 0x2
 2448 0026 01       		.byte	0x1
 2449 0027 06       		.byte	0x6
 2450 0028 2B030000 		.4byte	.LASF0
 2451 002c 02       		.uleb128 0x2
 2452 002d 01       		.byte	0x1
 2453 002e 08       		.byte	0x8
 2454 002f 05030000 		.4byte	.LASF1
 2455 0033 02       		.uleb128 0x2
 2456 0034 02       		.byte	0x2
 2457 0035 05       		.byte	0x5
 2458 0036 EA000000 		.4byte	.LASF2
 2459 003a 02       		.uleb128 0x2
 2460 003b 02       		.byte	0x2
 2461 003c 07       		.byte	0x7
 2462 003d 6B030000 		.4byte	.LASF3
 2463 0041 03       		.uleb128 0x3
 2464 0042 60040000 		.4byte	.LASF9
 2465 0046 02       		.byte	0x2
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 62


 2466 0047 3F       		.byte	0x3f
 2467 0048 4C000000 		.4byte	0x4c
 2468 004c 02       		.uleb128 0x2
 2469 004d 04       		.byte	0x4
 2470 004e 05       		.byte	0x5
 2471 004f 9F030000 		.4byte	.LASF4
 2472 0053 02       		.uleb128 0x2
 2473 0054 04       		.byte	0x4
 2474 0055 07       		.byte	0x7
 2475 0056 06040000 		.4byte	.LASF5
 2476 005a 02       		.uleb128 0x2
 2477 005b 08       		.byte	0x8
 2478 005c 05       		.byte	0x5
 2479 005d D6000000 		.4byte	.LASF6
 2480 0061 02       		.uleb128 0x2
 2481 0062 08       		.byte	0x8
 2482 0063 07       		.byte	0x7
 2483 0064 37030000 		.4byte	.LASF7
 2484 0068 04       		.uleb128 0x4
 2485 0069 04       		.byte	0x4
 2486 006a 05       		.byte	0x5
 2487 006b 696E7400 		.ascii	"int\000"
 2488 006f 02       		.uleb128 0x2
 2489 0070 04       		.byte	0x4
 2490 0071 07       		.byte	0x7
 2491 0072 4E030000 		.4byte	.LASF8
 2492 0076 03       		.uleb128 0x3
 2493 0077 AE030000 		.4byte	.LASF10
 2494 007b 03       		.byte	0x3
 2495 007c 2C       		.byte	0x2c
 2496 007d 41000000 		.4byte	0x41
 2497 0081 03       		.uleb128 0x3
 2498 0082 E2030000 		.4byte	.LASF11
 2499 0086 04       		.byte	0x4
 2500 0087 A1       		.byte	0xa1
 2501 0088 2C000000 		.4byte	0x2c
 2502 008c 03       		.uleb128 0x3
 2503 008d 13010000 		.4byte	.LASF12
 2504 0091 04       		.byte	0x4
 2505 0092 A2       		.byte	0xa2
 2506 0093 3A000000 		.4byte	0x3a
 2507 0097 03       		.uleb128 0x3
 2508 0098 FF030000 		.4byte	.LASF13
 2509 009c 04       		.byte	0x4
 2510 009d A3       		.byte	0xa3
 2511 009e 53000000 		.4byte	0x53
 2512 00a2 02       		.uleb128 0x2
 2513 00a3 04       		.byte	0x4
 2514 00a4 04       		.byte	0x4
 2515 00a5 59010000 		.4byte	.LASF14
 2516 00a9 02       		.uleb128 0x2
 2517 00aa 08       		.byte	0x8
 2518 00ab 04       		.byte	0x4
 2519 00ac 26040000 		.4byte	.LASF15
 2520 00b0 02       		.uleb128 0x2
 2521 00b1 01       		.byte	0x1
 2522 00b2 08       		.byte	0x8
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 63


 2523 00b3 8D030000 		.4byte	.LASF16
 2524 00b7 02       		.uleb128 0x2
 2525 00b8 04       		.byte	0x4
 2526 00b9 07       		.byte	0x7
 2527 00ba 35020000 		.4byte	.LASF17
 2528 00be 05       		.uleb128 0x5
 2529 00bf 04       		.byte	0x4
 2530 00c0 B0000000 		.4byte	0xb0
 2531 00c4 06       		.uleb128 0x6
 2532 00c5 7D020000 		.4byte	.LASF20
 2533 00c9 01       		.byte	0x1
 2534 00ca 22       		.byte	0x22
 2535 00cb 81000000 		.4byte	0x81
 2536 00cf 00000000 		.4byte	.LFB56
 2537 00d3 2C000000 		.4byte	.LFE56-.LFB56
 2538 00d7 01       		.uleb128 0x1
 2539 00d8 9C       		.byte	0x9c
 2540 00d9 F9000000 		.4byte	0xf9
 2541 00dd 07       		.uleb128 0x7
 2542 00de 696400   		.ascii	"id\000"
 2543 00e1 01       		.byte	0x1
 2544 00e2 22       		.byte	0x22
 2545 00e3 97000000 		.4byte	0x97
 2546 00e7 02       		.uleb128 0x2
 2547 00e8 91       		.byte	0x91
 2548 00e9 74       		.sleb128 -12
 2549 00ea 07       		.uleb128 0x7
 2550 00eb 6B657900 		.ascii	"key\000"
 2551 00ef 01       		.byte	0x1
 2552 00f0 22       		.byte	0x22
 2553 00f1 BE000000 		.4byte	0xbe
 2554 00f5 02       		.uleb128 0x2
 2555 00f6 91       		.byte	0x91
 2556 00f7 70       		.sleb128 -16
 2557 00f8 00       		.byte	0
 2558 00f9 08       		.uleb128 0x8
 2559 00fa 3F040000 		.4byte	.LASF29
 2560 00fe 01       		.byte	0x1
 2561 00ff 42       		.byte	0x42
 2562 0100 81000000 		.4byte	0x81
 2563 0104 00000000 		.4byte	.LFB57
 2564 0108 18000000 		.4byte	.LFE57-.LFB57
 2565 010c 01       		.uleb128 0x1
 2566 010d 9C       		.byte	0x9c
 2567 010e 09       		.uleb128 0x9
 2568 010f F3030000 		.4byte	.LASF18
 2569 0113 01       		.byte	0x1
 2570 0114 4B       		.byte	0x4b
 2571 0115 00000000 		.4byte	.LFB58
 2572 0119 38000000 		.4byte	.LFE58-.LFB58
 2573 011d 01       		.uleb128 0x1
 2574 011e 9C       		.byte	0x9c
 2575 011f 09       		.uleb128 0x9
 2576 0120 E8030000 		.4byte	.LASF19
 2577 0124 01       		.byte	0x1
 2578 0125 58       		.byte	0x58
 2579 0126 00000000 		.4byte	.LFB59
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 64


 2580 012a 24000000 		.4byte	.LFE59-.LFB59
 2581 012e 01       		.uleb128 0x1
 2582 012f 9C       		.byte	0x9c
 2583 0130 0A       		.uleb128 0xa
 2584 0131 43020000 		.4byte	.LASF21
 2585 0135 01       		.byte	0x1
 2586 0136 62       		.byte	0x62
 2587 0137 81000000 		.4byte	0x81
 2588 013b 00000000 		.4byte	.LFB60
 2589 013f 78000000 		.4byte	.LFE60-.LFB60
 2590 0143 01       		.uleb128 0x1
 2591 0144 9C       		.byte	0x9c
 2592 0145 C2010000 		.4byte	0x1c2
 2593 0149 0B       		.uleb128 0xb
 2594 014a 8E040000 		.4byte	.LASF22
 2595 014e 01       		.byte	0x1
 2596 014f 62       		.byte	0x62
 2597 0150 BE000000 		.4byte	0xbe
 2598 0154 02       		.uleb128 0x2
 2599 0155 91       		.byte	0x91
 2600 0156 5C       		.sleb128 -36
 2601 0157 0B       		.uleb128 0xb
 2602 0158 30000000 		.4byte	.LASF23
 2603 015c 01       		.byte	0x1
 2604 015d 62       		.byte	0x62
 2605 015e BE000000 		.4byte	0xbe
 2606 0162 02       		.uleb128 0x2
 2607 0163 91       		.byte	0x91
 2608 0164 58       		.sleb128 -40
 2609 0165 0B       		.uleb128 0xb
 2610 0166 31050000 		.4byte	.LASF24
 2611 016a 01       		.byte	0x1
 2612 016b 62       		.byte	0x62
 2613 016c 97000000 		.4byte	0x97
 2614 0170 02       		.uleb128 0x2
 2615 0171 91       		.byte	0x91
 2616 0172 54       		.sleb128 -44
 2617 0173 0C       		.uleb128 0xc
 2618 0174 36040000 		.4byte	.LASF25
 2619 0178 01       		.byte	0x1
 2620 0179 63       		.byte	0x63
 2621 017a 81000000 		.4byte	0x81
 2622 017e 02       		.uleb128 0x2
 2623 017f 91       		.byte	0x91
 2624 0180 77       		.sleb128 -9
 2625 0181 0D       		.uleb128 0xd
 2626 0182 6900     		.ascii	"i\000"
 2627 0184 01       		.byte	0x1
 2628 0185 64       		.byte	0x64
 2629 0186 97000000 		.4byte	0x97
 2630 018a 02       		.uleb128 0x2
 2631 018b 91       		.byte	0x91
 2632 018c 70       		.sleb128 -16
 2633 018d 0C       		.uleb128 0xc
 2634 018e E4000000 		.4byte	.LASF26
 2635 0192 01       		.byte	0x1
 2636 0193 64       		.byte	0x64
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 65


 2637 0194 97000000 		.4byte	0x97
 2638 0198 02       		.uleb128 0x2
 2639 0199 91       		.byte	0x91
 2640 019a 6C       		.sleb128 -20
 2641 019b 0C       		.uleb128 0xc
 2642 019c 2D040000 		.4byte	.LASF27
 2643 01a0 01       		.byte	0x1
 2644 01a1 64       		.byte	0x64
 2645 01a2 97000000 		.4byte	0x97
 2646 01a6 02       		.uleb128 0x2
 2647 01a7 91       		.byte	0x91
 2648 01a8 68       		.sleb128 -24
 2649 01a9 0E       		.uleb128 0xe
 2650 01aa 3C000000 		.4byte	.LBB2
 2651 01ae 1E000000 		.4byte	.LBE2-.LBB2
 2652 01b2 0C       		.uleb128 0xc
 2653 01b3 00000000 		.4byte	.LASF28
 2654 01b7 01       		.byte	0x1
 2655 01b8 6B       		.byte	0x6b
 2656 01b9 BE000000 		.4byte	0xbe
 2657 01bd 02       		.uleb128 0x2
 2658 01be 91       		.byte	0x91
 2659 01bf 64       		.sleb128 -28
 2660 01c0 00       		.byte	0
 2661 01c1 00       		.byte	0
 2662 01c2 08       		.uleb128 0x8
 2663 01c3 7E030000 		.4byte	.LASF30
 2664 01c7 01       		.byte	0x1
 2665 01c8 77       		.byte	0x77
 2666 01c9 81000000 		.4byte	0x81
 2667 01cd 00000000 		.4byte	.LFB61
 2668 01d1 68000000 		.4byte	.LFE61-.LFB61
 2669 01d5 01       		.uleb128 0x1
 2670 01d6 9C       		.byte	0x9c
 2671 01d7 08       		.uleb128 0x8
 2672 01d8 5F010000 		.4byte	.LASF31
 2673 01dc 01       		.byte	0x1
 2674 01dd 9A       		.byte	0x9a
 2675 01de 81000000 		.4byte	0x81
 2676 01e2 00000000 		.4byte	.LFB62
 2677 01e6 48000000 		.4byte	.LFE62-.LFB62
 2678 01ea 01       		.uleb128 0x1
 2679 01eb 9C       		.byte	0x9c
 2680 01ec 08       		.uleb128 0x8
 2681 01ed 13030000 		.4byte	.LASF32
 2682 01f1 01       		.byte	0x1
 2683 01f2 B8       		.byte	0xb8
 2684 01f3 81000000 		.4byte	0x81
 2685 01f7 00000000 		.4byte	.LFB63
 2686 01fb 3C000000 		.4byte	.LFE63-.LFB63
 2687 01ff 01       		.uleb128 0x1
 2688 0200 9C       		.byte	0x9c
 2689 0201 08       		.uleb128 0x8
 2690 0202 73000000 		.4byte	.LASF33
 2691 0206 01       		.byte	0x1
 2692 0207 C6       		.byte	0xc6
 2693 0208 81000000 		.4byte	0x81
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 66


 2694 020c 00000000 		.4byte	.LFB64
 2695 0210 1A000000 		.4byte	.LFE64-.LFB64
 2696 0214 01       		.uleb128 0x1
 2697 0215 9C       		.byte	0x9c
 2698 0216 0F       		.uleb128 0xf
 2699 0217 E3020000 		.4byte	.LASF37
 2700 021b 01       		.byte	0x1
 2701 021c DC       		.byte	0xdc
 2702 021d 81000000 		.4byte	0x81
 2703 0221 00000000 		.4byte	.LFB65
 2704 0225 78000000 		.4byte	.LFE65-.LFB65
 2705 0229 01       		.uleb128 0x1
 2706 022a 9C       		.byte	0x9c
 2707 022b 4C020000 		.4byte	0x24c
 2708 022f 0C       		.uleb128 0xc
 2709 0230 2F010000 		.4byte	.LASF34
 2710 0234 01       		.byte	0x1
 2711 0235 DE       		.byte	0xde
 2712 0236 81000000 		.4byte	0x81
 2713 023a 02       		.uleb128 0x2
 2714 023b 91       		.byte	0x91
 2715 023c 77       		.sleb128 -9
 2716 023d 0C       		.uleb128 0xc
 2717 023e 87010000 		.4byte	.LASF35
 2718 0242 01       		.byte	0x1
 2719 0243 DE       		.byte	0xde
 2720 0244 81000000 		.4byte	0x81
 2721 0248 02       		.uleb128 0x2
 2722 0249 91       		.byte	0x91
 2723 024a 76       		.sleb128 -10
 2724 024b 00       		.byte	0
 2725 024c 10       		.uleb128 0x10
 2726 024d 6A040000 		.4byte	.LASF36
 2727 0251 01       		.byte	0x1
 2728 0252 2701     		.2byte	0x127
 2729 0254 81000000 		.4byte	0x81
 2730 0258 00000000 		.4byte	.LFB66
 2731 025c 38000000 		.4byte	.LFE66-.LFB66
 2732 0260 01       		.uleb128 0x1
 2733 0261 9C       		.byte	0x9c
 2734 0262 11       		.uleb128 0x11
 2735 0263 9B000000 		.4byte	.LASF38
 2736 0267 01       		.byte	0x1
 2737 0268 5001     		.2byte	0x150
 2738 026a 81000000 		.4byte	0x81
 2739 026e 00000000 		.4byte	.LFB67
 2740 0272 44000000 		.4byte	.LFE67-.LFB67
 2741 0276 01       		.uleb128 0x1
 2742 0277 9C       		.byte	0x9c
 2743 0278 8D020000 		.4byte	0x28d
 2744 027c 12       		.uleb128 0x12
 2745 027d 636D6400 		.ascii	"cmd\000"
 2746 0281 01       		.byte	0x1
 2747 0282 5601     		.2byte	0x156
 2748 0284 8D020000 		.4byte	0x28d
 2749 0288 03       		.uleb128 0x3
 2750 0289 91       		.byte	0x91
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 67


 2751 028a 947F     		.sleb128 -108
 2752 028c 00       		.byte	0
 2753 028d 13       		.uleb128 0x13
 2754 028e B0000000 		.4byte	0xb0
 2755 0292 9D020000 		.4byte	0x29d
 2756 0296 14       		.uleb128 0x14
 2757 0297 B7000000 		.4byte	0xb7
 2758 029b 63       		.byte	0x63
 2759 029c 00       		.byte	0
 2760 029d 15       		.uleb128 0x15
 2761 029e F1020000 		.4byte	.LASF39
 2762 02a2 01       		.byte	0x1
 2763 02a3 6201     		.2byte	0x162
 2764 02a5 81000000 		.4byte	0x81
 2765 02a9 00000000 		.4byte	.LFB68
 2766 02ad 48000000 		.4byte	.LFE68-.LFB68
 2767 02b1 01       		.uleb128 0x1
 2768 02b2 9C       		.byte	0x9c
 2769 02b3 D8020000 		.4byte	0x2d8
 2770 02b7 16       		.uleb128 0x16
 2771 02b8 61030000 		.4byte	.LASF40
 2772 02bc 01       		.byte	0x1
 2773 02bd 6201     		.2byte	0x162
 2774 02bf 81000000 		.4byte	0x81
 2775 02c3 03       		.uleb128 0x3
 2776 02c4 91       		.byte	0x91
 2777 02c5 8F7F     		.sleb128 -113
 2778 02c7 12       		.uleb128 0x12
 2779 02c8 636D6400 		.ascii	"cmd\000"
 2780 02cc 01       		.byte	0x1
 2781 02cd 6801     		.2byte	0x168
 2782 02cf 8D020000 		.4byte	0x28d
 2783 02d3 03       		.uleb128 0x3
 2784 02d4 91       		.byte	0x91
 2785 02d5 947F     		.sleb128 -108
 2786 02d7 00       		.byte	0
 2787 02d8 10       		.uleb128 0x10
 2788 02d9 A2040000 		.4byte	.LASF41
 2789 02dd 01       		.byte	0x1
 2790 02de 7401     		.2byte	0x174
 2791 02e0 81000000 		.4byte	0x81
 2792 02e4 00000000 		.4byte	.LFB69
 2793 02e8 28000000 		.4byte	.LFE69-.LFB69
 2794 02ec 01       		.uleb128 0x1
 2795 02ed 9C       		.byte	0x9c
 2796 02ee 10       		.uleb128 0x10
 2797 02ef 90020000 		.4byte	.LASF42
 2798 02f3 01       		.byte	0x1
 2799 02f4 8101     		.2byte	0x181
 2800 02f6 81000000 		.4byte	0x81
 2801 02fa 00000000 		.4byte	.LFB70
 2802 02fe 28000000 		.4byte	.LFE70-.LFB70
 2803 0302 01       		.uleb128 0x1
 2804 0303 9C       		.byte	0x9c
 2805 0304 10       		.uleb128 0x10
 2806 0305 FB040000 		.4byte	.LASF43
 2807 0309 01       		.byte	0x1
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 68


 2808 030a 8E01     		.2byte	0x18e
 2809 030c 81000000 		.4byte	0x81
 2810 0310 00000000 		.4byte	.LFB71
 2811 0314 28000000 		.4byte	.LFE71-.LFB71
 2812 0318 01       		.uleb128 0x1
 2813 0319 9C       		.byte	0x9c
 2814 031a 10       		.uleb128 0x10
 2815 031b BB030000 		.4byte	.LASF44
 2816 031f 01       		.byte	0x1
 2817 0320 9A01     		.2byte	0x19a
 2818 0322 81000000 		.4byte	0x81
 2819 0326 00000000 		.4byte	.LFB72
 2820 032a 28000000 		.4byte	.LFE72-.LFB72
 2821 032e 01       		.uleb128 0x1
 2822 032f 9C       		.byte	0x9c
 2823 0330 11       		.uleb128 0x11
 2824 0331 6F010000 		.4byte	.LASF45
 2825 0335 01       		.byte	0x1
 2826 0336 A701     		.2byte	0x1a7
 2827 0338 81000000 		.4byte	0x81
 2828 033c 00000000 		.4byte	.LFB73
 2829 0340 34000000 		.4byte	.LFE73-.LFB73
 2830 0344 01       		.uleb128 0x1
 2831 0345 9C       		.byte	0x9c
 2832 0346 58030000 		.4byte	0x358
 2833 034a 12       		.uleb128 0x12
 2834 034b 7800     		.ascii	"x\000"
 2835 034d 01       		.byte	0x1
 2836 034e AE01     		.2byte	0x1ae
 2837 0350 81000000 		.4byte	0x81
 2838 0354 02       		.uleb128 0x2
 2839 0355 91       		.byte	0x91
 2840 0356 77       		.sleb128 -9
 2841 0357 00       		.byte	0
 2842 0358 10       		.uleb128 0x10
 2843 0359 BD040000 		.4byte	.LASF46
 2844 035d 01       		.byte	0x1
 2845 035e B301     		.2byte	0x1b3
 2846 0360 81000000 		.4byte	0x81
 2847 0364 00000000 		.4byte	.LFB74
 2848 0368 28000000 		.4byte	.LFE74-.LFB74
 2849 036c 01       		.uleb128 0x1
 2850 036d 9C       		.byte	0x9c
 2851 036e 15       		.uleb128 0x15
 2852 036f 54020000 		.4byte	.LASF47
 2853 0373 01       		.byte	0x1
 2854 0374 BE01     		.2byte	0x1be
 2855 0376 81000000 		.4byte	0x81
 2856 037a 00000000 		.4byte	.LFB75
 2857 037e 48000000 		.4byte	.LFE75-.LFB75
 2858 0382 01       		.uleb128 0x1
 2859 0383 9C       		.byte	0x9c
 2860 0384 A9030000 		.4byte	0x3a9
 2861 0388 16       		.uleb128 0x16
 2862 0389 5B030000 		.4byte	.LASF48
 2863 038d 01       		.byte	0x1
 2864 038e BE01     		.2byte	0x1be
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 69


 2865 0390 81000000 		.4byte	0x81
 2866 0394 03       		.uleb128 0x3
 2867 0395 91       		.byte	0x91
 2868 0396 8F7F     		.sleb128 -113
 2869 0398 12       		.uleb128 0x12
 2870 0399 636D6400 		.ascii	"cmd\000"
 2871 039d 01       		.byte	0x1
 2872 039e BF01     		.2byte	0x1bf
 2873 03a0 8D020000 		.4byte	0x28d
 2874 03a4 03       		.uleb128 0x3
 2875 03a5 91       		.byte	0x91
 2876 03a6 947F     		.sleb128 -108
 2877 03a8 00       		.byte	0
 2878 03a9 15       		.uleb128 0x15
 2879 03aa CF040000 		.4byte	.LASF49
 2880 03ae 01       		.byte	0x1
 2881 03af CB01     		.2byte	0x1cb
 2882 03b1 81000000 		.4byte	0x81
 2883 03b5 00000000 		.4byte	.LFB76
 2884 03b9 48000000 		.4byte	.LFE76-.LFB76
 2885 03bd 01       		.uleb128 0x1
 2886 03be 9C       		.byte	0x9c
 2887 03bf E4030000 		.4byte	0x3e4
 2888 03c3 16       		.uleb128 0x16
 2889 03c4 5B030000 		.4byte	.LASF48
 2890 03c8 01       		.byte	0x1
 2891 03c9 CB01     		.2byte	0x1cb
 2892 03cb 81000000 		.4byte	0x81
 2893 03cf 03       		.uleb128 0x3
 2894 03d0 91       		.byte	0x91
 2895 03d1 8F7F     		.sleb128 -113
 2896 03d3 12       		.uleb128 0x12
 2897 03d4 636D6400 		.ascii	"cmd\000"
 2898 03d8 01       		.byte	0x1
 2899 03d9 D901     		.2byte	0x1d9
 2900 03db 8D020000 		.4byte	0x28d
 2901 03df 03       		.uleb128 0x3
 2902 03e0 91       		.byte	0x91
 2903 03e1 947F     		.sleb128 -108
 2904 03e3 00       		.byte	0
 2905 03e4 10       		.uleb128 0x10
 2906 03e5 FE000000 		.4byte	.LASF50
 2907 03e9 01       		.byte	0x1
 2908 03ea E501     		.2byte	0x1e5
 2909 03ec 81000000 		.4byte	0x81
 2910 03f0 00000000 		.4byte	.LFB77
 2911 03f4 28000000 		.4byte	.LFE77-.LFB77
 2912 03f8 01       		.uleb128 0x1
 2913 03f9 9C       		.byte	0x9c
 2914 03fa 15       		.uleb128 0x15
 2915 03fb 4F000000 		.4byte	.LASF51
 2916 03ff 01       		.byte	0x1
 2917 0400 F001     		.2byte	0x1f0
 2918 0402 81000000 		.4byte	0x81
 2919 0406 00000000 		.4byte	.LFB78
 2920 040a 48000000 		.4byte	.LFE78-.LFB78
 2921 040e 01       		.uleb128 0x1
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 70


 2922 040f 9C       		.byte	0x9c
 2923 0410 35040000 		.4byte	0x435
 2924 0414 16       		.uleb128 0x16
 2925 0415 5B030000 		.4byte	.LASF48
 2926 0419 01       		.byte	0x1
 2927 041a F001     		.2byte	0x1f0
 2928 041c 81000000 		.4byte	0x81
 2929 0420 03       		.uleb128 0x3
 2930 0421 91       		.byte	0x91
 2931 0422 8F7F     		.sleb128 -113
 2932 0424 12       		.uleb128 0x12
 2933 0425 636D6400 		.ascii	"cmd\000"
 2934 0429 01       		.byte	0x1
 2935 042a F701     		.2byte	0x1f7
 2936 042c 8D020000 		.4byte	0x28d
 2937 0430 03       		.uleb128 0x3
 2938 0431 91       		.byte	0x91
 2939 0432 947F     		.sleb128 -108
 2940 0434 00       		.byte	0
 2941 0435 10       		.uleb128 0x10
 2942 0436 35010000 		.4byte	.LASF52
 2943 043a 01       		.byte	0x1
 2944 043b 0302     		.2byte	0x203
 2945 043d 81000000 		.4byte	0x81
 2946 0441 00000000 		.4byte	.LFB79
 2947 0445 28000000 		.4byte	.LFE79-.LFB79
 2948 0449 01       		.uleb128 0x1
 2949 044a 9C       		.byte	0x9c
 2950 044b 15       		.uleb128 0x15
 2951 044c 22050000 		.4byte	.LASF53
 2952 0450 01       		.byte	0x1
 2953 0451 0F02     		.2byte	0x20f
 2954 0453 81000000 		.4byte	0x81
 2955 0457 00000000 		.4byte	.LFB80
 2956 045b 44000000 		.4byte	.LFE80-.LFB80
 2957 045f 01       		.uleb128 0x1
 2958 0460 9C       		.byte	0x9c
 2959 0461 86040000 		.4byte	0x486
 2960 0465 16       		.uleb128 0x16
 2961 0466 66030000 		.4byte	.LASF54
 2962 046a 01       		.byte	0x1
 2963 046b 0F02     		.2byte	0x20f
 2964 046d BE000000 		.4byte	0xbe
 2965 0471 03       		.uleb128 0x3
 2966 0472 91       		.byte	0x91
 2967 0473 8C7F     		.sleb128 -116
 2968 0475 12       		.uleb128 0x12
 2969 0476 636D6400 		.ascii	"cmd\000"
 2970 047a 01       		.byte	0x1
 2971 047b 1102     		.2byte	0x211
 2972 047d 8D020000 		.4byte	0x28d
 2973 0481 03       		.uleb128 0x3
 2974 0482 91       		.byte	0x91
 2975 0483 947F     		.sleb128 -108
 2976 0485 00       		.byte	0
 2977 0486 15       		.uleb128 0x15
 2978 0487 A9000000 		.4byte	.LASF55
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 71


 2979 048b 01       		.byte	0x1
 2980 048c 1E02     		.2byte	0x21e
 2981 048e 81000000 		.4byte	0x81
 2982 0492 00000000 		.4byte	.LFB81
 2983 0496 44000000 		.4byte	.LFE81-.LFB81
 2984 049a 01       		.uleb128 0x1
 2985 049b 9C       		.byte	0x9c
 2986 049c C1040000 		.4byte	0x4c1
 2987 04a0 16       		.uleb128 0x16
 2988 04a1 00030000 		.4byte	.LASF56
 2989 04a5 01       		.byte	0x1
 2990 04a6 1E02     		.2byte	0x21e
 2991 04a8 BE000000 		.4byte	0xbe
 2992 04ac 03       		.uleb128 0x3
 2993 04ad 91       		.byte	0x91
 2994 04ae 8C7F     		.sleb128 -116
 2995 04b0 12       		.uleb128 0x12
 2996 04b1 636D6400 		.ascii	"cmd\000"
 2997 04b5 01       		.byte	0x1
 2998 04b6 2002     		.2byte	0x220
 2999 04b8 8D020000 		.4byte	0x28d
 3000 04bc 03       		.uleb128 0x3
 3001 04bd 91       		.byte	0x91
 3002 04be 947F     		.sleb128 -108
 3003 04c0 00       		.byte	0
 3004 04c1 10       		.uleb128 0x10
 3005 04c2 96010000 		.4byte	.LASF57
 3006 04c6 01       		.byte	0x1
 3007 04c7 2C02     		.2byte	0x22c
 3008 04c9 81000000 		.4byte	0x81
 3009 04cd 00000000 		.4byte	.LFB82
 3010 04d1 90000000 		.4byte	.LFE82-.LFB82
 3011 04d5 01       		.uleb128 0x1
 3012 04d6 9C       		.byte	0x9c
 3013 04d7 15       		.uleb128 0x15
 3014 04d8 4E040000 		.4byte	.LASF58
 3015 04dc 01       		.byte	0x1
 3016 04dd 6402     		.2byte	0x264
 3017 04df 81000000 		.4byte	0x81
 3018 04e3 00000000 		.4byte	.LFB83
 3019 04e7 F8000000 		.4byte	.LFE83-.LFB83
 3020 04eb 01       		.uleb128 0x1
 3021 04ec 9C       		.byte	0x9c
 3022 04ed 1C050000 		.4byte	0x51c
 3023 04f1 16       		.uleb128 0x16
 3024 04f2 3E020000 		.4byte	.LASF59
 3025 04f6 01       		.byte	0x1
 3026 04f7 6402     		.2byte	0x264
 3027 04f9 BE000000 		.4byte	0xbe
 3028 04fd 03       		.uleb128 0x3
 3029 04fe 91       		.byte	0x91
 3030 04ff 8478     		.sleb128 -1020
 3031 0501 0E       		.uleb128 0xe
 3032 0502 3C000000 		.4byte	.LBB3
 3033 0506 76000000 		.4byte	.LBE3-.LBB3
 3034 050a 17       		.uleb128 0x17
 3035 050b B5040000 		.4byte	.LASF60
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 72


 3036 050f 01       		.byte	0x1
 3037 0510 7602     		.2byte	0x276
 3038 0512 1C050000 		.4byte	0x51c
 3039 0516 03       		.uleb128 0x3
 3040 0517 91       		.byte	0x91
 3041 0518 8878     		.sleb128 -1016
 3042 051a 00       		.byte	0
 3043 051b 00       		.byte	0
 3044 051c 13       		.uleb128 0x13
 3045 051d B0000000 		.4byte	0xb0
 3046 0521 2D050000 		.4byte	0x52d
 3047 0525 18       		.uleb128 0x18
 3048 0526 B7000000 		.4byte	0xb7
 3049 052a E703     		.2byte	0x3e7
 3050 052c 00       		.byte	0
 3051 052d 15       		.uleb128 0x15
 3052 052e 13000000 		.4byte	.LASF61
 3053 0532 01       		.byte	0x1
 3054 0533 A402     		.2byte	0x2a4
 3055 0535 81000000 		.4byte	0x81
 3056 0539 00000000 		.4byte	.LFB84
 3057 053d 2C010000 		.4byte	.LFE84-.LFB84
 3058 0541 01       		.uleb128 0x1
 3059 0542 9C       		.byte	0x9c
 3060 0543 92050000 		.4byte	0x592
 3061 0547 16       		.uleb128 0x16
 3062 0548 4A010000 		.4byte	.LASF62
 3063 054c 01       		.byte	0x1
 3064 054d A402     		.2byte	0x2a4
 3065 054f BE000000 		.4byte	0xbe
 3066 0553 03       		.uleb128 0x3
 3067 0554 91       		.byte	0x91
 3068 0555 9C77     		.sleb128 -1124
 3069 0557 19       		.uleb128 0x19
 3070 0558 63737600 		.ascii	"csv\000"
 3071 055c 01       		.byte	0x1
 3072 055d A402     		.2byte	0x2a4
 3073 055f BE000000 		.4byte	0xbe
 3074 0563 03       		.uleb128 0x3
 3075 0564 91       		.byte	0x91
 3076 0565 9877     		.sleb128 -1128
 3077 0567 0E       		.uleb128 0xe
 3078 0568 4E000000 		.4byte	.LBB4
 3079 056c 8C000000 		.4byte	.LBE4-.LBB4
 3080 0570 17       		.uleb128 0x17
 3081 0571 BC000000 		.4byte	.LASF63
 3082 0575 01       		.byte	0x1
 3083 0576 B802     		.2byte	0x2b8
 3084 0578 1C050000 		.4byte	0x51c
 3085 057c 03       		.uleb128 0x3
 3086 057d 91       		.byte	0x91
 3087 057e 8878     		.sleb128 -1016
 3088 0580 17       		.uleb128 0x17
 3089 0581 51010000 		.4byte	.LASF64
 3090 0585 01       		.byte	0x1
 3091 0586 B802     		.2byte	0x2b8
 3092 0588 8D020000 		.4byte	0x28d
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 73


 3093 058c 03       		.uleb128 0x3
 3094 058d 91       		.byte	0x91
 3095 058e A477     		.sleb128 -1116
 3096 0590 00       		.byte	0
 3097 0591 00       		.byte	0
 3098 0592 11       		.uleb128 0x11
 3099 0593 7B040000 		.4byte	.LASF65
 3100 0597 01       		.byte	0x1
 3101 0598 0103     		.2byte	0x301
 3102 059a 81000000 		.4byte	0x81
 3103 059e 00000000 		.4byte	.LFB85
 3104 05a2 E4000000 		.4byte	.LFE85-.LFB85
 3105 05a6 01       		.uleb128 0x1
 3106 05a7 9C       		.byte	0x9c
 3107 05a8 F7050000 		.4byte	0x5f7
 3108 05ac 17       		.uleb128 0x17
 3109 05ad B6030000 		.4byte	.LASF66
 3110 05b1 01       		.byte	0x1
 3111 05b2 0903     		.2byte	0x309
 3112 05b4 81000000 		.4byte	0x81
 3113 05b8 02       		.uleb128 0x2
 3114 05b9 91       		.byte	0x91
 3115 05ba 63       		.sleb128 -29
 3116 05bb 12       		.uleb128 0x12
 3117 05bc 6900     		.ascii	"i\000"
 3118 05be 01       		.byte	0x1
 3119 05bf 0A03     		.2byte	0x30a
 3120 05c1 97000000 		.4byte	0x97
 3121 05c5 02       		.uleb128 0x2
 3122 05c6 91       		.byte	0x91
 3123 05c7 6C       		.sleb128 -20
 3124 05c8 17       		.uleb128 0x17
 3125 05c9 E4000000 		.4byte	.LASF26
 3126 05cd 01       		.byte	0x1
 3127 05ce 0A03     		.2byte	0x30a
 3128 05d0 97000000 		.4byte	0x97
 3129 05d4 02       		.uleb128 0x2
 3130 05d5 91       		.byte	0x91
 3131 05d6 68       		.sleb128 -24
 3132 05d7 17       		.uleb128 0x17
 3133 05d8 D4030000 		.4byte	.LASF67
 3134 05dc 01       		.byte	0x1
 3135 05dd 0A03     		.2byte	0x30a
 3136 05df 97000000 		.4byte	0x97
 3137 05e3 02       		.uleb128 0x2
 3138 05e4 91       		.byte	0x91
 3139 05e5 64       		.sleb128 -28
 3140 05e6 17       		.uleb128 0x17
 3141 05e7 EF040000 		.4byte	.LASF68
 3142 05eb 01       		.byte	0x1
 3143 05ec 0B03     		.2byte	0x30b
 3144 05ee F7050000 		.4byte	0x5f7
 3145 05f2 03       		.uleb128 0x3
 3146 05f3 91       		.byte	0x91
 3147 05f4 B47D     		.sleb128 -332
 3148 05f6 00       		.byte	0
 3149 05f7 13       		.uleb128 0x13
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 74


 3150 05f8 B0000000 		.4byte	0xb0
 3151 05fc 08060000 		.4byte	0x608
 3152 0600 18       		.uleb128 0x18
 3153 0601 B7000000 		.4byte	0xb7
 3154 0605 2B01     		.2byte	0x12b
 3155 0607 00       		.byte	0
 3156 0608 11       		.uleb128 0x11
 3157 0609 0F050000 		.4byte	.LASF69
 3158 060d 01       		.byte	0x1
 3159 060e 2703     		.2byte	0x327
 3160 0610 81000000 		.4byte	0x81
 3161 0614 00000000 		.4byte	.LFB86
 3162 0618 9C000000 		.4byte	.LFE86-.LFB86
 3163 061c 01       		.uleb128 0x1
 3164 061d 9C       		.byte	0x9c
 3165 061e 5E060000 		.4byte	0x65e
 3166 0622 12       		.uleb128 0x12
 3167 0623 6900     		.ascii	"i\000"
 3168 0625 01       		.byte	0x1
 3169 0626 2E03     		.2byte	0x32e
 3170 0628 97000000 		.4byte	0x97
 3171 062c 02       		.uleb128 0x2
 3172 062d 91       		.byte	0x91
 3173 062e 6C       		.sleb128 -20
 3174 062f 17       		.uleb128 0x17
 3175 0630 E4000000 		.4byte	.LASF26
 3176 0634 01       		.byte	0x1
 3177 0635 2E03     		.2byte	0x32e
 3178 0637 97000000 		.4byte	0x97
 3179 063b 02       		.uleb128 0x2
 3180 063c 91       		.byte	0x91
 3181 063d 68       		.sleb128 -24
 3182 063e 17       		.uleb128 0x17
 3183 063f D4030000 		.4byte	.LASF67
 3184 0643 01       		.byte	0x1
 3185 0644 2E03     		.2byte	0x32e
 3186 0646 97000000 		.4byte	0x97
 3187 064a 02       		.uleb128 0x2
 3188 064b 91       		.byte	0x91
 3189 064c 64       		.sleb128 -28
 3190 064d 17       		.uleb128 0x17
 3191 064e EF040000 		.4byte	.LASF68
 3192 0652 01       		.byte	0x1
 3193 0653 2F03     		.2byte	0x32f
 3194 0655 F7050000 		.4byte	0x5f7
 3195 0659 03       		.uleb128 0x3
 3196 065a 91       		.byte	0x91
 3197 065b B87D     		.sleb128 -328
 3198 065d 00       		.byte	0
 3199 065e 1A       		.uleb128 0x1a
 3200 065f C4000000 		.4byte	.LASF70
 3201 0663 01       		.byte	0x1
 3202 0664 4703     		.2byte	0x347
 3203 0666 00000000 		.4byte	.LFB87
 3204 066a 24000000 		.4byte	.LFE87-.LFB87
 3205 066e 01       		.uleb128 0x1
 3206 066f 9C       		.byte	0x9c
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 75


 3207 0670 1A       		.uleb128 0x1a
 3208 0671 24000000 		.4byte	.LASF71
 3209 0675 01       		.byte	0x1
 3210 0676 5603     		.2byte	0x356
 3211 0678 00000000 		.4byte	.LFB88
 3212 067c 0A000000 		.4byte	.LFE88-.LFB88
 3213 0680 01       		.uleb128 0x1
 3214 0681 9C       		.byte	0x9c
 3215 0682 1A       		.uleb128 0x1a
 3216 0683 06000000 		.4byte	.LASF72
 3217 0687 01       		.byte	0x1
 3218 0688 5A03     		.2byte	0x35a
 3219 068a 00000000 		.4byte	.LFB89
 3220 068e 0A000000 		.4byte	.LFE89-.LFB89
 3221 0692 01       		.uleb128 0x1
 3222 0693 9C       		.byte	0x9c
 3223 0694 1B       		.uleb128 0x1b
 3224 0695 66000000 		.4byte	.LASF73
 3225 0699 01       		.byte	0x1
 3226 069a 5F03     		.2byte	0x35f
 3227 069c 00000000 		.4byte	.LFB90
 3228 06a0 48000000 		.4byte	.LFE90-.LFB90
 3229 06a4 01       		.uleb128 0x1
 3230 06a5 9C       		.byte	0x9c
 3231 06a6 C4060000 		.4byte	0x6c4
 3232 06aa 0E       		.uleb128 0xe
 3233 06ab 08000000 		.4byte	.LBB5
 3234 06af 26000000 		.4byte	.LBE5-.LBB5
 3235 06b3 17       		.uleb128 0x17
 3236 06b4 42000000 		.4byte	.LASF74
 3237 06b8 01       		.byte	0x1
 3238 06b9 6203     		.2byte	0x362
 3239 06bb B0000000 		.4byte	0xb0
 3240 06bf 02       		.uleb128 0x2
 3241 06c0 91       		.byte	0x91
 3242 06c1 77       		.sleb128 -9
 3243 06c2 00       		.byte	0
 3244 06c3 00       		.byte	0
 3245 06c4 1C       		.uleb128 0x1c
 3246 06c5 92030000 		.4byte	.LASF75
 3247 06c9 05       		.byte	0x5
 3248 06ca 1606     		.2byte	0x616
 3249 06cc D0060000 		.4byte	0x6d0
 3250 06d0 1D       		.uleb128 0x1d
 3251 06d1 76000000 		.4byte	0x76
 3252 06d5 1E       		.uleb128 0x1e
 3253 06d6 1F030000 		.4byte	.LASF76
 3254 06da 01       		.byte	0x1
 3255 06db 16       		.byte	0x16
 3256 06dc 81000000 		.4byte	0x81
 3257 06e0 05       		.uleb128 0x5
 3258 06e1 03       		.byte	0x3
 3259 06e2 00000000 		.4byte	modem_state
 3260 06e6 1E       		.uleb128 0x1e
 3261 06e7 18040000 		.4byte	.LASF77
 3262 06eb 01       		.byte	0x1
 3263 06ec 16       		.byte	0x16
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 76


 3264 06ed 81000000 		.4byte	0x81
 3265 06f1 05       		.uleb128 0x5
 3266 06f2 03       		.byte	0x3
 3267 06f3 00000000 		.4byte	lock_acquired
 3268 06f7 1E       		.uleb128 0x1e
 3269 06f8 E7040000 		.4byte	.LASF78
 3270 06fc 01       		.byte	0x1
 3271 06fd 18       		.byte	0x18
 3272 06fe 97000000 		.4byte	0x97
 3273 0702 05       		.uleb128 0x5
 3274 0703 03       		.byte	0x3
 3275 0704 00000000 		.4byte	feed_id
 3276 0708 1E       		.uleb128 0x1e
 3277 0709 9A040000 		.4byte	.LASF79
 3278 070d 01       		.byte	0x1
 3279 070e 19       		.byte	0x19
 3280 070f BE000000 		.4byte	0xbe
 3281 0713 05       		.uleb128 0x5
 3282 0714 03       		.byte	0x3
 3283 0715 00000000 		.4byte	api_key
 3284 0719 1E       		.uleb128 0x1e
 3285 071a A8030000 		.4byte	.LASF80
 3286 071e 01       		.byte	0x1
 3287 071f 16       		.byte	0x16
 3288 0720 81000000 		.4byte	0x81
 3289 0724 05       		.uleb128 0x5
 3290 0725 03       		.byte	0x3
 3291 0726 00000000 		.4byte	ready
 3292 072a 1E       		.uleb128 0x1e
 3293 072b 6B020000 		.4byte	.LASF81
 3294 072f 01       		.byte	0x1
 3295 0730 17       		.byte	0x17
 3296 0731 8C000000 		.4byte	0x8c
 3297 0735 05       		.uleb128 0x5
 3298 0736 03       		.byte	0x3
 3299 0737 00000000 		.4byte	uart_string_index
 3300 073b 1E       		.uleb128 0x1e
 3301 073c 1A010000 		.4byte	.LASF82
 3302 0740 01       		.byte	0x1
 3303 0741 19       		.byte	0x19
 3304 0742 1C050000 		.4byte	0x51c
 3305 0746 05       		.uleb128 0x5
 3306 0747 03       		.byte	0x3
 3307 0748 00000000 		.4byte	uart_received_string
 3308 074c 1E       		.uleb128 0x1e
 3309 074d F4000000 		.4byte	.LASF83
 3310 0751 01       		.byte	0x1
 3311 0752 1A       		.byte	0x1a
 3312 0753 BE000000 		.4byte	0xbe
 3313 0757 05       		.uleb128 0x5
 3314 0758 03       		.byte	0x3
 3315 0759 00000000 		.4byte	modem_apn
 3316 075d 00       		.byte	0
 3317              		.section	.debug_abbrev,"",%progbits
 3318              	.Ldebug_abbrev0:
 3319 0000 01       		.uleb128 0x1
 3320 0001 11       		.uleb128 0x11
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 77


 3321 0002 01       		.byte	0x1
 3322 0003 25       		.uleb128 0x25
 3323 0004 0E       		.uleb128 0xe
 3324 0005 13       		.uleb128 0x13
 3325 0006 0B       		.uleb128 0xb
 3326 0007 03       		.uleb128 0x3
 3327 0008 0E       		.uleb128 0xe
 3328 0009 1B       		.uleb128 0x1b
 3329 000a 0E       		.uleb128 0xe
 3330 000b 55       		.uleb128 0x55
 3331 000c 17       		.uleb128 0x17
 3332 000d 11       		.uleb128 0x11
 3333 000e 01       		.uleb128 0x1
 3334 000f 10       		.uleb128 0x10
 3335 0010 17       		.uleb128 0x17
 3336 0011 00       		.byte	0
 3337 0012 00       		.byte	0
 3338 0013 02       		.uleb128 0x2
 3339 0014 24       		.uleb128 0x24
 3340 0015 00       		.byte	0
 3341 0016 0B       		.uleb128 0xb
 3342 0017 0B       		.uleb128 0xb
 3343 0018 3E       		.uleb128 0x3e
 3344 0019 0B       		.uleb128 0xb
 3345 001a 03       		.uleb128 0x3
 3346 001b 0E       		.uleb128 0xe
 3347 001c 00       		.byte	0
 3348 001d 00       		.byte	0
 3349 001e 03       		.uleb128 0x3
 3350 001f 16       		.uleb128 0x16
 3351 0020 00       		.byte	0
 3352 0021 03       		.uleb128 0x3
 3353 0022 0E       		.uleb128 0xe
 3354 0023 3A       		.uleb128 0x3a
 3355 0024 0B       		.uleb128 0xb
 3356 0025 3B       		.uleb128 0x3b
 3357 0026 0B       		.uleb128 0xb
 3358 0027 49       		.uleb128 0x49
 3359 0028 13       		.uleb128 0x13
 3360 0029 00       		.byte	0
 3361 002a 00       		.byte	0
 3362 002b 04       		.uleb128 0x4
 3363 002c 24       		.uleb128 0x24
 3364 002d 00       		.byte	0
 3365 002e 0B       		.uleb128 0xb
 3366 002f 0B       		.uleb128 0xb
 3367 0030 3E       		.uleb128 0x3e
 3368 0031 0B       		.uleb128 0xb
 3369 0032 03       		.uleb128 0x3
 3370 0033 08       		.uleb128 0x8
 3371 0034 00       		.byte	0
 3372 0035 00       		.byte	0
 3373 0036 05       		.uleb128 0x5
 3374 0037 0F       		.uleb128 0xf
 3375 0038 00       		.byte	0
 3376 0039 0B       		.uleb128 0xb
 3377 003a 0B       		.uleb128 0xb
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 78


 3378 003b 49       		.uleb128 0x49
 3379 003c 13       		.uleb128 0x13
 3380 003d 00       		.byte	0
 3381 003e 00       		.byte	0
 3382 003f 06       		.uleb128 0x6
 3383 0040 2E       		.uleb128 0x2e
 3384 0041 01       		.byte	0x1
 3385 0042 3F       		.uleb128 0x3f
 3386 0043 19       		.uleb128 0x19
 3387 0044 03       		.uleb128 0x3
 3388 0045 0E       		.uleb128 0xe
 3389 0046 3A       		.uleb128 0x3a
 3390 0047 0B       		.uleb128 0xb
 3391 0048 3B       		.uleb128 0x3b
 3392 0049 0B       		.uleb128 0xb
 3393 004a 27       		.uleb128 0x27
 3394 004b 19       		.uleb128 0x19
 3395 004c 49       		.uleb128 0x49
 3396 004d 13       		.uleb128 0x13
 3397 004e 11       		.uleb128 0x11
 3398 004f 01       		.uleb128 0x1
 3399 0050 12       		.uleb128 0x12
 3400 0051 06       		.uleb128 0x6
 3401 0052 40       		.uleb128 0x40
 3402 0053 18       		.uleb128 0x18
 3403 0054 9742     		.uleb128 0x2117
 3404 0056 19       		.uleb128 0x19
 3405 0057 01       		.uleb128 0x1
 3406 0058 13       		.uleb128 0x13
 3407 0059 00       		.byte	0
 3408 005a 00       		.byte	0
 3409 005b 07       		.uleb128 0x7
 3410 005c 05       		.uleb128 0x5
 3411 005d 00       		.byte	0
 3412 005e 03       		.uleb128 0x3
 3413 005f 08       		.uleb128 0x8
 3414 0060 3A       		.uleb128 0x3a
 3415 0061 0B       		.uleb128 0xb
 3416 0062 3B       		.uleb128 0x3b
 3417 0063 0B       		.uleb128 0xb
 3418 0064 49       		.uleb128 0x49
 3419 0065 13       		.uleb128 0x13
 3420 0066 02       		.uleb128 0x2
 3421 0067 18       		.uleb128 0x18
 3422 0068 00       		.byte	0
 3423 0069 00       		.byte	0
 3424 006a 08       		.uleb128 0x8
 3425 006b 2E       		.uleb128 0x2e
 3426 006c 00       		.byte	0
 3427 006d 3F       		.uleb128 0x3f
 3428 006e 19       		.uleb128 0x19
 3429 006f 03       		.uleb128 0x3
 3430 0070 0E       		.uleb128 0xe
 3431 0071 3A       		.uleb128 0x3a
 3432 0072 0B       		.uleb128 0xb
 3433 0073 3B       		.uleb128 0x3b
 3434 0074 0B       		.uleb128 0xb
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 79


 3435 0075 49       		.uleb128 0x49
 3436 0076 13       		.uleb128 0x13
 3437 0077 11       		.uleb128 0x11
 3438 0078 01       		.uleb128 0x1
 3439 0079 12       		.uleb128 0x12
 3440 007a 06       		.uleb128 0x6
 3441 007b 40       		.uleb128 0x40
 3442 007c 18       		.uleb128 0x18
 3443 007d 9642     		.uleb128 0x2116
 3444 007f 19       		.uleb128 0x19
 3445 0080 00       		.byte	0
 3446 0081 00       		.byte	0
 3447 0082 09       		.uleb128 0x9
 3448 0083 2E       		.uleb128 0x2e
 3449 0084 00       		.byte	0
 3450 0085 3F       		.uleb128 0x3f
 3451 0086 19       		.uleb128 0x19
 3452 0087 03       		.uleb128 0x3
 3453 0088 0E       		.uleb128 0xe
 3454 0089 3A       		.uleb128 0x3a
 3455 008a 0B       		.uleb128 0xb
 3456 008b 3B       		.uleb128 0x3b
 3457 008c 0B       		.uleb128 0xb
 3458 008d 11       		.uleb128 0x11
 3459 008e 01       		.uleb128 0x1
 3460 008f 12       		.uleb128 0x12
 3461 0090 06       		.uleb128 0x6
 3462 0091 40       		.uleb128 0x40
 3463 0092 18       		.uleb128 0x18
 3464 0093 9642     		.uleb128 0x2116
 3465 0095 19       		.uleb128 0x19
 3466 0096 00       		.byte	0
 3467 0097 00       		.byte	0
 3468 0098 0A       		.uleb128 0xa
 3469 0099 2E       		.uleb128 0x2e
 3470 009a 01       		.byte	0x1
 3471 009b 3F       		.uleb128 0x3f
 3472 009c 19       		.uleb128 0x19
 3473 009d 03       		.uleb128 0x3
 3474 009e 0E       		.uleb128 0xe
 3475 009f 3A       		.uleb128 0x3a
 3476 00a0 0B       		.uleb128 0xb
 3477 00a1 3B       		.uleb128 0x3b
 3478 00a2 0B       		.uleb128 0xb
 3479 00a3 27       		.uleb128 0x27
 3480 00a4 19       		.uleb128 0x19
 3481 00a5 49       		.uleb128 0x49
 3482 00a6 13       		.uleb128 0x13
 3483 00a7 11       		.uleb128 0x11
 3484 00a8 01       		.uleb128 0x1
 3485 00a9 12       		.uleb128 0x12
 3486 00aa 06       		.uleb128 0x6
 3487 00ab 40       		.uleb128 0x40
 3488 00ac 18       		.uleb128 0x18
 3489 00ad 9642     		.uleb128 0x2116
 3490 00af 19       		.uleb128 0x19
 3491 00b0 01       		.uleb128 0x1
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 80


 3492 00b1 13       		.uleb128 0x13
 3493 00b2 00       		.byte	0
 3494 00b3 00       		.byte	0
 3495 00b4 0B       		.uleb128 0xb
 3496 00b5 05       		.uleb128 0x5
 3497 00b6 00       		.byte	0
 3498 00b7 03       		.uleb128 0x3
 3499 00b8 0E       		.uleb128 0xe
 3500 00b9 3A       		.uleb128 0x3a
 3501 00ba 0B       		.uleb128 0xb
 3502 00bb 3B       		.uleb128 0x3b
 3503 00bc 0B       		.uleb128 0xb
 3504 00bd 49       		.uleb128 0x49
 3505 00be 13       		.uleb128 0x13
 3506 00bf 02       		.uleb128 0x2
 3507 00c0 18       		.uleb128 0x18
 3508 00c1 00       		.byte	0
 3509 00c2 00       		.byte	0
 3510 00c3 0C       		.uleb128 0xc
 3511 00c4 34       		.uleb128 0x34
 3512 00c5 00       		.byte	0
 3513 00c6 03       		.uleb128 0x3
 3514 00c7 0E       		.uleb128 0xe
 3515 00c8 3A       		.uleb128 0x3a
 3516 00c9 0B       		.uleb128 0xb
 3517 00ca 3B       		.uleb128 0x3b
 3518 00cb 0B       		.uleb128 0xb
 3519 00cc 49       		.uleb128 0x49
 3520 00cd 13       		.uleb128 0x13
 3521 00ce 02       		.uleb128 0x2
 3522 00cf 18       		.uleb128 0x18
 3523 00d0 00       		.byte	0
 3524 00d1 00       		.byte	0
 3525 00d2 0D       		.uleb128 0xd
 3526 00d3 34       		.uleb128 0x34
 3527 00d4 00       		.byte	0
 3528 00d5 03       		.uleb128 0x3
 3529 00d6 08       		.uleb128 0x8
 3530 00d7 3A       		.uleb128 0x3a
 3531 00d8 0B       		.uleb128 0xb
 3532 00d9 3B       		.uleb128 0x3b
 3533 00da 0B       		.uleb128 0xb
 3534 00db 49       		.uleb128 0x49
 3535 00dc 13       		.uleb128 0x13
 3536 00dd 02       		.uleb128 0x2
 3537 00de 18       		.uleb128 0x18
 3538 00df 00       		.byte	0
 3539 00e0 00       		.byte	0
 3540 00e1 0E       		.uleb128 0xe
 3541 00e2 0B       		.uleb128 0xb
 3542 00e3 01       		.byte	0x1
 3543 00e4 11       		.uleb128 0x11
 3544 00e5 01       		.uleb128 0x1
 3545 00e6 12       		.uleb128 0x12
 3546 00e7 06       		.uleb128 0x6
 3547 00e8 00       		.byte	0
 3548 00e9 00       		.byte	0
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 81


 3549 00ea 0F       		.uleb128 0xf
 3550 00eb 2E       		.uleb128 0x2e
 3551 00ec 01       		.byte	0x1
 3552 00ed 3F       		.uleb128 0x3f
 3553 00ee 19       		.uleb128 0x19
 3554 00ef 03       		.uleb128 0x3
 3555 00f0 0E       		.uleb128 0xe
 3556 00f1 3A       		.uleb128 0x3a
 3557 00f2 0B       		.uleb128 0xb
 3558 00f3 3B       		.uleb128 0x3b
 3559 00f4 0B       		.uleb128 0xb
 3560 00f5 49       		.uleb128 0x49
 3561 00f6 13       		.uleb128 0x13
 3562 00f7 11       		.uleb128 0x11
 3563 00f8 01       		.uleb128 0x1
 3564 00f9 12       		.uleb128 0x12
 3565 00fa 06       		.uleb128 0x6
 3566 00fb 40       		.uleb128 0x40
 3567 00fc 18       		.uleb128 0x18
 3568 00fd 9642     		.uleb128 0x2116
 3569 00ff 19       		.uleb128 0x19
 3570 0100 01       		.uleb128 0x1
 3571 0101 13       		.uleb128 0x13
 3572 0102 00       		.byte	0
 3573 0103 00       		.byte	0
 3574 0104 10       		.uleb128 0x10
 3575 0105 2E       		.uleb128 0x2e
 3576 0106 00       		.byte	0
 3577 0107 3F       		.uleb128 0x3f
 3578 0108 19       		.uleb128 0x19
 3579 0109 03       		.uleb128 0x3
 3580 010a 0E       		.uleb128 0xe
 3581 010b 3A       		.uleb128 0x3a
 3582 010c 0B       		.uleb128 0xb
 3583 010d 3B       		.uleb128 0x3b
 3584 010e 05       		.uleb128 0x5
 3585 010f 49       		.uleb128 0x49
 3586 0110 13       		.uleb128 0x13
 3587 0111 11       		.uleb128 0x11
 3588 0112 01       		.uleb128 0x1
 3589 0113 12       		.uleb128 0x12
 3590 0114 06       		.uleb128 0x6
 3591 0115 40       		.uleb128 0x40
 3592 0116 18       		.uleb128 0x18
 3593 0117 9642     		.uleb128 0x2116
 3594 0119 19       		.uleb128 0x19
 3595 011a 00       		.byte	0
 3596 011b 00       		.byte	0
 3597 011c 11       		.uleb128 0x11
 3598 011d 2E       		.uleb128 0x2e
 3599 011e 01       		.byte	0x1
 3600 011f 3F       		.uleb128 0x3f
 3601 0120 19       		.uleb128 0x19
 3602 0121 03       		.uleb128 0x3
 3603 0122 0E       		.uleb128 0xe
 3604 0123 3A       		.uleb128 0x3a
 3605 0124 0B       		.uleb128 0xb
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 82


 3606 0125 3B       		.uleb128 0x3b
 3607 0126 05       		.uleb128 0x5
 3608 0127 49       		.uleb128 0x49
 3609 0128 13       		.uleb128 0x13
 3610 0129 11       		.uleb128 0x11
 3611 012a 01       		.uleb128 0x1
 3612 012b 12       		.uleb128 0x12
 3613 012c 06       		.uleb128 0x6
 3614 012d 40       		.uleb128 0x40
 3615 012e 18       		.uleb128 0x18
 3616 012f 9642     		.uleb128 0x2116
 3617 0131 19       		.uleb128 0x19
 3618 0132 01       		.uleb128 0x1
 3619 0133 13       		.uleb128 0x13
 3620 0134 00       		.byte	0
 3621 0135 00       		.byte	0
 3622 0136 12       		.uleb128 0x12
 3623 0137 34       		.uleb128 0x34
 3624 0138 00       		.byte	0
 3625 0139 03       		.uleb128 0x3
 3626 013a 08       		.uleb128 0x8
 3627 013b 3A       		.uleb128 0x3a
 3628 013c 0B       		.uleb128 0xb
 3629 013d 3B       		.uleb128 0x3b
 3630 013e 05       		.uleb128 0x5
 3631 013f 49       		.uleb128 0x49
 3632 0140 13       		.uleb128 0x13
 3633 0141 02       		.uleb128 0x2
 3634 0142 18       		.uleb128 0x18
 3635 0143 00       		.byte	0
 3636 0144 00       		.byte	0
 3637 0145 13       		.uleb128 0x13
 3638 0146 01       		.uleb128 0x1
 3639 0147 01       		.byte	0x1
 3640 0148 49       		.uleb128 0x49
 3641 0149 13       		.uleb128 0x13
 3642 014a 01       		.uleb128 0x1
 3643 014b 13       		.uleb128 0x13
 3644 014c 00       		.byte	0
 3645 014d 00       		.byte	0
 3646 014e 14       		.uleb128 0x14
 3647 014f 21       		.uleb128 0x21
 3648 0150 00       		.byte	0
 3649 0151 49       		.uleb128 0x49
 3650 0152 13       		.uleb128 0x13
 3651 0153 2F       		.uleb128 0x2f
 3652 0154 0B       		.uleb128 0xb
 3653 0155 00       		.byte	0
 3654 0156 00       		.byte	0
 3655 0157 15       		.uleb128 0x15
 3656 0158 2E       		.uleb128 0x2e
 3657 0159 01       		.byte	0x1
 3658 015a 3F       		.uleb128 0x3f
 3659 015b 19       		.uleb128 0x19
 3660 015c 03       		.uleb128 0x3
 3661 015d 0E       		.uleb128 0xe
 3662 015e 3A       		.uleb128 0x3a
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 83


 3663 015f 0B       		.uleb128 0xb
 3664 0160 3B       		.uleb128 0x3b
 3665 0161 05       		.uleb128 0x5
 3666 0162 27       		.uleb128 0x27
 3667 0163 19       		.uleb128 0x19
 3668 0164 49       		.uleb128 0x49
 3669 0165 13       		.uleb128 0x13
 3670 0166 11       		.uleb128 0x11
 3671 0167 01       		.uleb128 0x1
 3672 0168 12       		.uleb128 0x12
 3673 0169 06       		.uleb128 0x6
 3674 016a 40       		.uleb128 0x40
 3675 016b 18       		.uleb128 0x18
 3676 016c 9642     		.uleb128 0x2116
 3677 016e 19       		.uleb128 0x19
 3678 016f 01       		.uleb128 0x1
 3679 0170 13       		.uleb128 0x13
 3680 0171 00       		.byte	0
 3681 0172 00       		.byte	0
 3682 0173 16       		.uleb128 0x16
 3683 0174 05       		.uleb128 0x5
 3684 0175 00       		.byte	0
 3685 0176 03       		.uleb128 0x3
 3686 0177 0E       		.uleb128 0xe
 3687 0178 3A       		.uleb128 0x3a
 3688 0179 0B       		.uleb128 0xb
 3689 017a 3B       		.uleb128 0x3b
 3690 017b 05       		.uleb128 0x5
 3691 017c 49       		.uleb128 0x49
 3692 017d 13       		.uleb128 0x13
 3693 017e 02       		.uleb128 0x2
 3694 017f 18       		.uleb128 0x18
 3695 0180 00       		.byte	0
 3696 0181 00       		.byte	0
 3697 0182 17       		.uleb128 0x17
 3698 0183 34       		.uleb128 0x34
 3699 0184 00       		.byte	0
 3700 0185 03       		.uleb128 0x3
 3701 0186 0E       		.uleb128 0xe
 3702 0187 3A       		.uleb128 0x3a
 3703 0188 0B       		.uleb128 0xb
 3704 0189 3B       		.uleb128 0x3b
 3705 018a 05       		.uleb128 0x5
 3706 018b 49       		.uleb128 0x49
 3707 018c 13       		.uleb128 0x13
 3708 018d 02       		.uleb128 0x2
 3709 018e 18       		.uleb128 0x18
 3710 018f 00       		.byte	0
 3711 0190 00       		.byte	0
 3712 0191 18       		.uleb128 0x18
 3713 0192 21       		.uleb128 0x21
 3714 0193 00       		.byte	0
 3715 0194 49       		.uleb128 0x49
 3716 0195 13       		.uleb128 0x13
 3717 0196 2F       		.uleb128 0x2f
 3718 0197 05       		.uleb128 0x5
 3719 0198 00       		.byte	0
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 84


 3720 0199 00       		.byte	0
 3721 019a 19       		.uleb128 0x19
 3722 019b 05       		.uleb128 0x5
 3723 019c 00       		.byte	0
 3724 019d 03       		.uleb128 0x3
 3725 019e 08       		.uleb128 0x8
 3726 019f 3A       		.uleb128 0x3a
 3727 01a0 0B       		.uleb128 0xb
 3728 01a1 3B       		.uleb128 0x3b
 3729 01a2 05       		.uleb128 0x5
 3730 01a3 49       		.uleb128 0x49
 3731 01a4 13       		.uleb128 0x13
 3732 01a5 02       		.uleb128 0x2
 3733 01a6 18       		.uleb128 0x18
 3734 01a7 00       		.byte	0
 3735 01a8 00       		.byte	0
 3736 01a9 1A       		.uleb128 0x1a
 3737 01aa 2E       		.uleb128 0x2e
 3738 01ab 00       		.byte	0
 3739 01ac 3F       		.uleb128 0x3f
 3740 01ad 19       		.uleb128 0x19
 3741 01ae 03       		.uleb128 0x3
 3742 01af 0E       		.uleb128 0xe
 3743 01b0 3A       		.uleb128 0x3a
 3744 01b1 0B       		.uleb128 0xb
 3745 01b2 3B       		.uleb128 0x3b
 3746 01b3 05       		.uleb128 0x5
 3747 01b4 11       		.uleb128 0x11
 3748 01b5 01       		.uleb128 0x1
 3749 01b6 12       		.uleb128 0x12
 3750 01b7 06       		.uleb128 0x6
 3751 01b8 40       		.uleb128 0x40
 3752 01b9 18       		.uleb128 0x18
 3753 01ba 9642     		.uleb128 0x2116
 3754 01bc 19       		.uleb128 0x19
 3755 01bd 00       		.byte	0
 3756 01be 00       		.byte	0
 3757 01bf 1B       		.uleb128 0x1b
 3758 01c0 2E       		.uleb128 0x2e
 3759 01c1 01       		.byte	0x1
 3760 01c2 3F       		.uleb128 0x3f
 3761 01c3 19       		.uleb128 0x19
 3762 01c4 03       		.uleb128 0x3
 3763 01c5 0E       		.uleb128 0xe
 3764 01c6 3A       		.uleb128 0x3a
 3765 01c7 0B       		.uleb128 0xb
 3766 01c8 3B       		.uleb128 0x3b
 3767 01c9 05       		.uleb128 0x5
 3768 01ca 27       		.uleb128 0x27
 3769 01cb 19       		.uleb128 0x19
 3770 01cc 11       		.uleb128 0x11
 3771 01cd 01       		.uleb128 0x1
 3772 01ce 12       		.uleb128 0x12
 3773 01cf 06       		.uleb128 0x6
 3774 01d0 40       		.uleb128 0x40
 3775 01d1 18       		.uleb128 0x18
 3776 01d2 9642     		.uleb128 0x2116
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 85


 3777 01d4 19       		.uleb128 0x19
 3778 01d5 01       		.uleb128 0x1
 3779 01d6 13       		.uleb128 0x13
 3780 01d7 00       		.byte	0
 3781 01d8 00       		.byte	0
 3782 01d9 1C       		.uleb128 0x1c
 3783 01da 34       		.uleb128 0x34
 3784 01db 00       		.byte	0
 3785 01dc 03       		.uleb128 0x3
 3786 01dd 0E       		.uleb128 0xe
 3787 01de 3A       		.uleb128 0x3a
 3788 01df 0B       		.uleb128 0xb
 3789 01e0 3B       		.uleb128 0x3b
 3790 01e1 05       		.uleb128 0x5
 3791 01e2 49       		.uleb128 0x49
 3792 01e3 13       		.uleb128 0x13
 3793 01e4 3F       		.uleb128 0x3f
 3794 01e5 19       		.uleb128 0x19
 3795 01e6 3C       		.uleb128 0x3c
 3796 01e7 19       		.uleb128 0x19
 3797 01e8 00       		.byte	0
 3798 01e9 00       		.byte	0
 3799 01ea 1D       		.uleb128 0x1d
 3800 01eb 35       		.uleb128 0x35
 3801 01ec 00       		.byte	0
 3802 01ed 49       		.uleb128 0x49
 3803 01ee 13       		.uleb128 0x13
 3804 01ef 00       		.byte	0
 3805 01f0 00       		.byte	0
 3806 01f1 1E       		.uleb128 0x1e
 3807 01f2 34       		.uleb128 0x34
 3808 01f3 00       		.byte	0
 3809 01f4 03       		.uleb128 0x3
 3810 01f5 0E       		.uleb128 0xe
 3811 01f6 3A       		.uleb128 0x3a
 3812 01f7 0B       		.uleb128 0xb
 3813 01f8 3B       		.uleb128 0x3b
 3814 01f9 0B       		.uleb128 0xb
 3815 01fa 49       		.uleb128 0x49
 3816 01fb 13       		.uleb128 0x13
 3817 01fc 3F       		.uleb128 0x3f
 3818 01fd 19       		.uleb128 0x19
 3819 01fe 02       		.uleb128 0x2
 3820 01ff 18       		.uleb128 0x18
 3821 0200 00       		.byte	0
 3822 0201 00       		.byte	0
 3823 0202 00       		.byte	0
 3824              		.section	.debug_aranges,"",%progbits
 3825 0000 2C010000 		.4byte	0x12c
 3826 0004 0200     		.2byte	0x2
 3827 0006 00000000 		.4byte	.Ldebug_info0
 3828 000a 04       		.byte	0x4
 3829 000b 00       		.byte	0
 3830 000c 0000     		.2byte	0
 3831 000e 0000     		.2byte	0
 3832 0010 00000000 		.4byte	.LFB56
 3833 0014 2C000000 		.4byte	.LFE56-.LFB56
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 86


 3834 0018 00000000 		.4byte	.LFB57
 3835 001c 18000000 		.4byte	.LFE57-.LFB57
 3836 0020 00000000 		.4byte	.LFB58
 3837 0024 38000000 		.4byte	.LFE58-.LFB58
 3838 0028 00000000 		.4byte	.LFB59
 3839 002c 24000000 		.4byte	.LFE59-.LFB59
 3840 0030 00000000 		.4byte	.LFB60
 3841 0034 78000000 		.4byte	.LFE60-.LFB60
 3842 0038 00000000 		.4byte	.LFB61
 3843 003c 68000000 		.4byte	.LFE61-.LFB61
 3844 0040 00000000 		.4byte	.LFB62
 3845 0044 48000000 		.4byte	.LFE62-.LFB62
 3846 0048 00000000 		.4byte	.LFB63
 3847 004c 3C000000 		.4byte	.LFE63-.LFB63
 3848 0050 00000000 		.4byte	.LFB64
 3849 0054 1A000000 		.4byte	.LFE64-.LFB64
 3850 0058 00000000 		.4byte	.LFB65
 3851 005c 78000000 		.4byte	.LFE65-.LFB65
 3852 0060 00000000 		.4byte	.LFB66
 3853 0064 38000000 		.4byte	.LFE66-.LFB66
 3854 0068 00000000 		.4byte	.LFB67
 3855 006c 44000000 		.4byte	.LFE67-.LFB67
 3856 0070 00000000 		.4byte	.LFB68
 3857 0074 48000000 		.4byte	.LFE68-.LFB68
 3858 0078 00000000 		.4byte	.LFB69
 3859 007c 28000000 		.4byte	.LFE69-.LFB69
 3860 0080 00000000 		.4byte	.LFB70
 3861 0084 28000000 		.4byte	.LFE70-.LFB70
 3862 0088 00000000 		.4byte	.LFB71
 3863 008c 28000000 		.4byte	.LFE71-.LFB71
 3864 0090 00000000 		.4byte	.LFB72
 3865 0094 28000000 		.4byte	.LFE72-.LFB72
 3866 0098 00000000 		.4byte	.LFB73
 3867 009c 34000000 		.4byte	.LFE73-.LFB73
 3868 00a0 00000000 		.4byte	.LFB74
 3869 00a4 28000000 		.4byte	.LFE74-.LFB74
 3870 00a8 00000000 		.4byte	.LFB75
 3871 00ac 48000000 		.4byte	.LFE75-.LFB75
 3872 00b0 00000000 		.4byte	.LFB76
 3873 00b4 48000000 		.4byte	.LFE76-.LFB76
 3874 00b8 00000000 		.4byte	.LFB77
 3875 00bc 28000000 		.4byte	.LFE77-.LFB77
 3876 00c0 00000000 		.4byte	.LFB78
 3877 00c4 48000000 		.4byte	.LFE78-.LFB78
 3878 00c8 00000000 		.4byte	.LFB79
 3879 00cc 28000000 		.4byte	.LFE79-.LFB79
 3880 00d0 00000000 		.4byte	.LFB80
 3881 00d4 44000000 		.4byte	.LFE80-.LFB80
 3882 00d8 00000000 		.4byte	.LFB81
 3883 00dc 44000000 		.4byte	.LFE81-.LFB81
 3884 00e0 00000000 		.4byte	.LFB82
 3885 00e4 90000000 		.4byte	.LFE82-.LFB82
 3886 00e8 00000000 		.4byte	.LFB83
 3887 00ec F8000000 		.4byte	.LFE83-.LFB83
 3888 00f0 00000000 		.4byte	.LFB84
 3889 00f4 2C010000 		.4byte	.LFE84-.LFB84
 3890 00f8 00000000 		.4byte	.LFB85
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 87


 3891 00fc E4000000 		.4byte	.LFE85-.LFB85
 3892 0100 00000000 		.4byte	.LFB86
 3893 0104 9C000000 		.4byte	.LFE86-.LFB86
 3894 0108 00000000 		.4byte	.LFB87
 3895 010c 24000000 		.4byte	.LFE87-.LFB87
 3896 0110 00000000 		.4byte	.LFB88
 3897 0114 0A000000 		.4byte	.LFE88-.LFB88
 3898 0118 00000000 		.4byte	.LFB89
 3899 011c 0A000000 		.4byte	.LFE89-.LFB89
 3900 0120 00000000 		.4byte	.LFB90
 3901 0124 48000000 		.4byte	.LFE90-.LFB90
 3902 0128 00000000 		.4byte	0
 3903 012c 00000000 		.4byte	0
 3904              		.section	.debug_ranges,"",%progbits
 3905              	.Ldebug_ranges0:
 3906 0000 00000000 		.4byte	.LFB56
 3907 0004 2C000000 		.4byte	.LFE56
 3908 0008 00000000 		.4byte	.LFB57
 3909 000c 18000000 		.4byte	.LFE57
 3910 0010 00000000 		.4byte	.LFB58
 3911 0014 38000000 		.4byte	.LFE58
 3912 0018 00000000 		.4byte	.LFB59
 3913 001c 24000000 		.4byte	.LFE59
 3914 0020 00000000 		.4byte	.LFB60
 3915 0024 78000000 		.4byte	.LFE60
 3916 0028 00000000 		.4byte	.LFB61
 3917 002c 68000000 		.4byte	.LFE61
 3918 0030 00000000 		.4byte	.LFB62
 3919 0034 48000000 		.4byte	.LFE62
 3920 0038 00000000 		.4byte	.LFB63
 3921 003c 3C000000 		.4byte	.LFE63
 3922 0040 00000000 		.4byte	.LFB64
 3923 0044 1A000000 		.4byte	.LFE64
 3924 0048 00000000 		.4byte	.LFB65
 3925 004c 78000000 		.4byte	.LFE65
 3926 0050 00000000 		.4byte	.LFB66
 3927 0054 38000000 		.4byte	.LFE66
 3928 0058 00000000 		.4byte	.LFB67
 3929 005c 44000000 		.4byte	.LFE67
 3930 0060 00000000 		.4byte	.LFB68
 3931 0064 48000000 		.4byte	.LFE68
 3932 0068 00000000 		.4byte	.LFB69
 3933 006c 28000000 		.4byte	.LFE69
 3934 0070 00000000 		.4byte	.LFB70
 3935 0074 28000000 		.4byte	.LFE70
 3936 0078 00000000 		.4byte	.LFB71
 3937 007c 28000000 		.4byte	.LFE71
 3938 0080 00000000 		.4byte	.LFB72
 3939 0084 28000000 		.4byte	.LFE72
 3940 0088 00000000 		.4byte	.LFB73
 3941 008c 34000000 		.4byte	.LFE73
 3942 0090 00000000 		.4byte	.LFB74
 3943 0094 28000000 		.4byte	.LFE74
 3944 0098 00000000 		.4byte	.LFB75
 3945 009c 48000000 		.4byte	.LFE75
 3946 00a0 00000000 		.4byte	.LFB76
 3947 00a4 48000000 		.4byte	.LFE76
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 88


 3948 00a8 00000000 		.4byte	.LFB77
 3949 00ac 28000000 		.4byte	.LFE77
 3950 00b0 00000000 		.4byte	.LFB78
 3951 00b4 48000000 		.4byte	.LFE78
 3952 00b8 00000000 		.4byte	.LFB79
 3953 00bc 28000000 		.4byte	.LFE79
 3954 00c0 00000000 		.4byte	.LFB80
 3955 00c4 44000000 		.4byte	.LFE80
 3956 00c8 00000000 		.4byte	.LFB81
 3957 00cc 44000000 		.4byte	.LFE81
 3958 00d0 00000000 		.4byte	.LFB82
 3959 00d4 90000000 		.4byte	.LFE82
 3960 00d8 00000000 		.4byte	.LFB83
 3961 00dc F8000000 		.4byte	.LFE83
 3962 00e0 00000000 		.4byte	.LFB84
 3963 00e4 2C010000 		.4byte	.LFE84
 3964 00e8 00000000 		.4byte	.LFB85
 3965 00ec E4000000 		.4byte	.LFE85
 3966 00f0 00000000 		.4byte	.LFB86
 3967 00f4 9C000000 		.4byte	.LFE86
 3968 00f8 00000000 		.4byte	.LFB87
 3969 00fc 24000000 		.4byte	.LFE87
 3970 0100 00000000 		.4byte	.LFB88
 3971 0104 0A000000 		.4byte	.LFE88
 3972 0108 00000000 		.4byte	.LFB89
 3973 010c 0A000000 		.4byte	.LFE89
 3974 0110 00000000 		.4byte	.LFB90
 3975 0114 48000000 		.4byte	.LFE90
 3976 0118 00000000 		.4byte	0
 3977 011c 00000000 		.4byte	0
 3978              		.section	.debug_line,"",%progbits
 3979              	.Ldebug_line0:
 3980 0000 FE040000 		.section	.debug_str,"MS",%progbits,1
 3980      02004A01 
 3980      00000201 
 3980      FB0E0D00 
 3980      01010101 
 3981              	.LASF28:
 3982 0000 76616C69 		.ascii	"valid\000"
 3982      6400
 3983              	.LASF72:
 3984 0006 6D6F6465 		.ascii	"modem_wakeup\000"
 3984      6D5F7761 
 3984      6B657570 
 3984      00
 3985              	.LASF61:
 3986 0013 6D6F6465 		.ascii	"modem_get_packet\000"
 3986      6D5F6765 
 3986      745F7061 
 3986      636B6574 
 3986      00
 3987              	.LASF71:
 3988 0024 6D6F6465 		.ascii	"modem_sleep\000"
 3988      6D5F736C 
 3988      65657000 
 3989              	.LASF23:
 3990 0030 65787065 		.ascii	"expected_response\000"
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 89


 3990      63746564 
 3990      5F726573 
 3990      706F6E73 
 3990      6500
 3991              	.LASF74:
 3992 0042 72785F63 		.ascii	"rx_char_hold\000"
 3992      6861725F 
 3992      686F6C64 
 3992      00
 3993              	.LASF51:
 3994 004f 6D6F6465 		.ascii	"modem_enable_CDMA_data\000"
 3994      6D5F656E 
 3994      61626C65 
 3994      5F43444D 
 3994      415F6461 
 3995              	.LASF73:
 3996 0066 54656C69 		.ascii	"Telit_isr_rx\000"
 3996      745F6973 
 3996      725F7278 
 3996      00
 3997              	.LASF33:
 3998 0073 68617264 		.ascii	"hardware_specific_modem_setup\000"
 3998      77617265 
 3998      5F737065 
 3998      63696669 
 3998      635F6D6F 
 3999              	.LASF85:
 4000 0091 2E5C6D6F 		.ascii	".\\modem.c\000"
 4000      64656D2E 
 4000      6300
 4001              	.LASF38:
 4002 009b 6D6F6465 		.ascii	"modem_set_apn\000"
 4002      6D5F7365 
 4002      745F6170 
 4002      6E00
 4003              	.LASF55:
 4004 00a9 6D6F6465 		.ascii	"modem_set_password\000"
 4004      6D5F7365 
 4004      745F7061 
 4004      7373776F 
 4004      726400
 4005              	.LASF63:
 4006 00bc 6765745F 		.ascii	"get_str\000"
 4006      73747200 
 4007              	.LASF70:
 4008 00c4 75617274 		.ascii	"uart_string_reset\000"
 4008      5F737472 
 4008      696E675F 
 4008      72657365 
 4008      7400
 4009              	.LASF6:
 4010 00d6 6C6F6E67 		.ascii	"long long int\000"
 4010      206C6F6E 
 4010      6720696E 
 4010      7400
 4011              	.LASF26:
 4012 00e4 64656C61 		.ascii	"delay\000"
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 90


 4012      7900
 4013              	.LASF2:
 4014 00ea 73686F72 		.ascii	"short int\000"
 4014      7420696E 
 4014      7400
 4015              	.LASF83:
 4016 00f4 6D6F6465 		.ascii	"modem_apn\000"
 4016      6D5F6170 
 4016      6E00
 4017              	.LASF50:
 4018 00fe 6D6F6465 		.ascii	"modem_get_sw_version\000"
 4018      6D5F6765 
 4018      745F7377 
 4018      5F766572 
 4018      73696F6E 
 4019              	.LASF12:
 4020 0113 75696E74 		.ascii	"uint16\000"
 4020      313600
 4021              	.LASF82:
 4022 011a 75617274 		.ascii	"uart_received_string\000"
 4022      5F726563 
 4022      65697665 
 4022      645F7374 
 4022      72696E67 
 4023              	.LASF34:
 4024 012f 636F756E 		.ascii	"count\000"
 4024      7400
 4025              	.LASF52:
 4026 0135 6D6F6465 		.ascii	"modem_test_CDMA_data\000"
 4026      6D5F7465 
 4026      73745F43 
 4026      444D415F 
 4026      64617461 
 4027              	.LASF62:
 4028 014a 7061636B 		.ascii	"packet\000"
 4028      657400
 4029              	.LASF64:
 4030 0151 6B65795F 		.ascii	"key_str\000"
 4030      73747200 
 4031              	.LASF14:
 4032 0159 666C6F61 		.ascii	"float\000"
 4032      7400
 4033              	.LASF31:
 4034 015f 6D6F6465 		.ascii	"modem_power_off\000"
 4034      6D5F706F 
 4034      7765725F 
 4034      6F666600 
 4035              	.LASF45:
 4036 016f 6D6F6465 		.ascii	"modem_get_serial_number\000"
 4036      6D5F6765 
 4036      745F7365 
 4036      7269616C 
 4036      5F6E756D 
 4037              	.LASF35:
 4038 0187 6E657477 		.ascii	"network_status\000"
 4038      6F726B5F 
 4038      73746174 
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 91


 4038      757300
 4039              	.LASF57:
 4040 0196 6D6F6465 		.ascii	"modem_get_google\000"
 4040      6D5F6765 
 4040      745F676F 
 4040      6F676C65 
 4040      00
 4041              	.LASF84:
 4042 01a7 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 4042      4320342E 
 4042      392E3320 
 4042      32303135 
 4042      30333033 
 4043 01da 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 4043      20726576 
 4043      6973696F 
 4043      6E203232 
 4043      31323230 
 4044 020d 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4044      66756E63 
 4044      74696F6E 
 4044      2D736563 
 4044      74696F6E 
 4045              	.LASF17:
 4046 0235 73697A65 		.ascii	"sizetype\000"
 4046      74797065 
 4046      00
 4047              	.LASF59:
 4048 023e 626F6479 		.ascii	"body\000"
 4048      00
 4049              	.LASF21:
 4050 0243 61745F77 		.ascii	"at_write_command\000"
 4050      72697465 
 4050      5F636F6D 
 4050      6D616E64 
 4050      00
 4051              	.LASF47:
 4052 0254 6D6F6465 		.ascii	"modem_set_flow_control\000"
 4052      6D5F7365 
 4052      745F666C 
 4052      6F775F63 
 4052      6F6E7472 
 4053              	.LASF81:
 4054 026b 75617274 		.ascii	"uart_string_index\000"
 4054      5F737472 
 4054      696E675F 
 4054      696E6465 
 4054      7800
 4055              	.LASF20:
 4056 027d 6D6F6465 		.ascii	"modem_set_api_feed\000"
 4056      6D5F7365 
 4056      745F6170 
 4056      695F6665 
 4056      656400
 4057              	.LASF42:
 4058 0290 6D6F6465 		.ascii	"modem_get_nertwork_time\000"
 4058      6D5F6765 
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 92


 4058      745F6E65 
 4058      7274776F 
 4058      726B5F74 
 4059              	.LASF86:
 4060 02a8 433A5C55 		.ascii	"C:\\Users\\cps\\Documents\\kLab\\IoT\\CellBoard\\Ce"
 4060      73657273 
 4060      5C637073 
 4060      5C446F63 
 4060      756D656E 
 4061 02d4 6C6C2042 		.ascii	"ll Board.cydsn\000"
 4061      6F617264 
 4061      2E637964 
 4061      736E00
 4062              	.LASF37:
 4063 02e3 6D6F6465 		.ascii	"modem_connect\000"
 4063      6D5F636F 
 4063      6E6E6563 
 4063      7400
 4064              	.LASF39:
 4065 02f1 6D6F6465 		.ascii	"modem_set_band\000"
 4065      6D5F7365 
 4065      745F6261 
 4065      6E6400
 4066              	.LASF56:
 4067 0300 70617373 		.ascii	"pass\000"
 4067      00
 4068              	.LASF1:
 4069 0305 756E7369 		.ascii	"unsigned char\000"
 4069      676E6564 
 4069      20636861 
 4069      7200
 4070              	.LASF32:
 4071 0313 6D6F6465 		.ascii	"modem_reset\000"
 4071      6D5F7265 
 4071      73657400 
 4072              	.LASF76:
 4073 031f 6D6F6465 		.ascii	"modem_state\000"
 4073      6D5F7374 
 4073      61746500 
 4074              	.LASF0:
 4075 032b 7369676E 		.ascii	"signed char\000"
 4075      65642063 
 4075      68617200 
 4076              	.LASF7:
 4077 0337 6C6F6E67 		.ascii	"long long unsigned int\000"
 4077      206C6F6E 
 4077      6720756E 
 4077      7369676E 
 4077      65642069 
 4078              	.LASF8:
 4079 034e 756E7369 		.ascii	"unsigned int\000"
 4079      676E6564 
 4079      20696E74 
 4079      00
 4080              	.LASF48:
 4081 035b 70617261 		.ascii	"param\000"
 4081      6D00
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 93


 4082              	.LASF40:
 4083 0361 62616E64 		.ascii	"band\000"
 4083      00
 4084              	.LASF54:
 4085 0366 75736572 		.ascii	"user\000"
 4085      00
 4086              	.LASF3:
 4087 036b 73686F72 		.ascii	"short unsigned int\000"
 4087      7420756E 
 4087      7369676E 
 4087      65642069 
 4087      6E7400
 4088              	.LASF30:
 4089 037e 6D6F6465 		.ascii	"modem_power_on\000"
 4089      6D5F706F 
 4089      7765725F 
 4089      6F6E00
 4090              	.LASF16:
 4091 038d 63686172 		.ascii	"char\000"
 4091      00
 4092              	.LASF75:
 4093 0392 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4093      52784275 
 4093      66666572 
 4093      00
 4094              	.LASF4:
 4095 039f 6C6F6E67 		.ascii	"long int\000"
 4095      20696E74 
 4095      00
 4096              	.LASF80:
 4097 03a8 72656164 		.ascii	"ready\000"
 4097      7900
 4098              	.LASF10:
 4099 03ae 696E7433 		.ascii	"int32_t\000"
 4099      325F7400 
 4100              	.LASF66:
 4101 03b6 6C6F636B 		.ascii	"lock\000"
 4101      00
 4102              	.LASF44:
 4103 03bb 6D6F6465 		.ascii	"modem_get_signal_quality\000"
 4103      6D5F6765 
 4103      745F7369 
 4103      676E616C 
 4103      5F717561 
 4104              	.LASF67:
 4105 03d4 6C6F636B 		.ascii	"lock_attempts\000"
 4105      5F617474 
 4105      656D7074 
 4105      7300
 4106              	.LASF11:
 4107 03e2 75696E74 		.ascii	"uint8\000"
 4107      3800
 4108              	.LASF19:
 4109 03e8 6D6F6465 		.ascii	"modem_stop\000"
 4109      6D5F7374 
 4109      6F7000
 4110              	.LASF18:
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 94


 4111 03f3 6D6F6465 		.ascii	"modem_start\000"
 4111      6D5F7374 
 4111      61727400 
 4112              	.LASF13:
 4113 03ff 75696E74 		.ascii	"uint32\000"
 4113      333200
 4114              	.LASF5:
 4115 0406 6C6F6E67 		.ascii	"long unsigned int\000"
 4115      20756E73 
 4115      69676E65 
 4115      6420696E 
 4115      7400
 4116              	.LASF77:
 4117 0418 6C6F636B 		.ascii	"lock_acquired\000"
 4117      5F616371 
 4117      75697265 
 4117      6400
 4118              	.LASF15:
 4119 0426 646F7562 		.ascii	"double\000"
 4119      6C6500
 4120              	.LASF27:
 4121 042d 696E7465 		.ascii	"interval\000"
 4121      7276616C 
 4121      00
 4122              	.LASF25:
 4123 0436 72657370 		.ascii	"response\000"
 4123      6F6E7365 
 4123      00
 4124              	.LASF29:
 4125 043f 6D6F6465 		.ascii	"modem_shutdown\000"
 4125      6D5F7368 
 4125      7574646F 
 4125      776E00
 4126              	.LASF58:
 4127 044e 6D6F6465 		.ascii	"modem_send_packet\000"
 4127      6D5F7365 
 4127      6E645F70 
 4127      61636B65 
 4127      7400
 4128              	.LASF9:
 4129 0460 5F5F696E 		.ascii	"__int32_t\000"
 4129      7433325F 
 4129      7400
 4130              	.LASF36:
 4131 046a 6D6F6465 		.ascii	"modem_disconnect\000"
 4131      6D5F6469 
 4131      73636F6E 
 4131      6E656374 
 4131      00
 4132              	.LASF65:
 4133 047b 6D6F6465 		.ascii	"modem_acquire_lock\000"
 4133      6D5F6163 
 4133      71756972 
 4133      655F6C6F 
 4133      636B00
 4134              	.LASF22:
 4135 048e 75617274 		.ascii	"uart_string\000"
ARM GAS  C:\Users\cps\AppData\Local\Temp\ccrabKRR.s 			page 95


 4135      5F737472 
 4135      696E6700 
 4136              	.LASF79:
 4137 049a 6170695F 		.ascii	"api_key\000"
 4137      6B657900 
 4138              	.LASF41:
 4139 04a2 6D6F6465 		.ascii	"modem_get_rtc_time\000"
 4139      6D5F6765 
 4139      745F7274 
 4139      635F7469 
 4139      6D6500
 4140              	.LASF60:
 4141 04b5 7075745F 		.ascii	"put_str\000"
 4141      73747200 
 4142              	.LASF46:
 4143 04bd 6D6F6465 		.ascii	"modem_get_profile\000"
 4143      6D5F6765 
 4143      745F7072 
 4143      6F66696C 
 4143      6500
 4144              	.LASF49:
 4145 04cf 6D6F6465 		.ascii	"modem_set_error_reports\000"
 4145      6D5F7365 
 4145      745F6572 
 4145      726F725F 
 4145      7265706F 
 4146              	.LASF78:
 4147 04e7 66656564 		.ascii	"feed_id\000"
 4147      5F696400 
 4148              	.LASF68:
 4149 04ef 64617461 		.ascii	"data_packet\000"
 4149      5F706163 
 4149      6B657400 
 4150              	.LASF43:
 4151 04fb 6D6F6465 		.ascii	"modem_check_network\000"
 4151      6D5F6368 
 4151      65636B5F 
 4151      6E657477 
 4151      6F726B00 
 4152              	.LASF69:
 4153 050f 6D6F6465 		.ascii	"modem_release_lock\000"
 4153      6D5F7265 
 4153      6C656173 
 4153      655F6C6F 
 4153      636B00
 4154              	.LASF53:
 4155 0522 6D6F6465 		.ascii	"modem_set_user\000"
 4155      6D5F7365 
 4155      745F7573 
 4155      657200
 4156              	.LASF24:
 4157 0531 75617274 		.ascii	"uart_timeout\000"
 4157      5F74696D 
 4157      656F7574 
 4157      00
 4158              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
